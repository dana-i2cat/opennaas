/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class WeightedREDDropperService as well as methods
 * comparable to the invokeMethods defined for this class. This Class implements the WeightedREDDropperServiceBean Interface. The CIM class
 * WeightedREDDropperService is described as follows:
 * 
 * This class represents a logical entity that resides in the data forwarding path of a network device. It describes the ability to drop network
 * traffic using a Weighted Random Early Detection (WRED) algorithm. Like RED, the purpose of WRED is to avoid congestion (as opposed to managing
 * congestion). This modification of the basic RED algorithm enables packets belonging to different traffic classes to be dropped at different queue
 * depths. This algorithm also enables discard to be done based on different information contained in the packet header, such as IP Precedence, RSVP
 * session parameters, or even on other factors not directly encoded in the packet header, such as the queue depth. Implementation of this class has
 * shown that weighting should not be a property of the class (but on an association to it), and that there is insufficient data to process the drop
 * metric. The class is deprecated pending further definition by the DMTF.
 */
@Deprecated
public class WeightedREDDropperService extends DropperService implements
		Serializable {

	/**
	 * This constructor creates a WeightedREDDropperServiceBeanImpl Class which implements the WeightedREDDropperServiceBean Interface, and
	 * encapsulates the CIM class WeightedREDDropperService in a Java Bean. The CIM class WeightedREDDropperService is described as follows:
	 * 
	 * This class represents a logical entity that resides in the data forwarding path of a network device. It describes the ability to drop network
	 * traffic using a Weighted Random Early Detection (WRED) algorithm. Like RED, the purpose of WRED is to avoid congestion (as opposed to managing
	 * congestion). This modification of the basic RED algorithm enables packets belonging to different traffic classes to be dropped at different
	 * queue depths. This algorithm also enables discard to be done based on different information contained in the packet header, such as IP
	 * Precedence, RSVP session parameters, or even on other factors not directly encoded in the packet header, such as the queue depth.
	 * Implementation of this class has shown that weighting should not be a property of the class (but on an association to it), and that there is
	 * insufficient data to process the drop metric. The class is deprecated pending further definition by the DMTF.
	 */
	public WeightedREDDropperService() {
	};

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property DropMetric.
	 */
	@Deprecated
	public enum DropMetric {
		OTHER,
		IP_PRECEDENCE,
		DSCP_VALUE,
		_802_1P_PRIORITY_VALUE,
		RSVP_SESSION,
		QUEUE_DEPTH,
		PACKET_ARRIVAL_RATE
	}

	@Deprecated
	private DropMetric	dropMetric;

	/**
	 * This method returns the WeightedREDDropperService.dropMetric property value. This property is described as follows:
	 * 
	 * This property is an enumerated 16-bit unsigned integer, and defines the type of metric that is used to drop traffic. Values are: 1: Other 2: IP
	 * Precedence 3: DSCP Value 4: 802.1P Priority Value 5: RSVP Session 6: Queue Depth 7: Packet Arrival Rate.
	 * 
	 * @return int current dropMetric property value
	 * @exception Exception
	 */
	@Deprecated
	public DropMetric getDropMetric() {

		return this.dropMetric;
	} // getDropMetric

	/**
	 * This method sets the WeightedREDDropperService.dropMetric property value. This property is described as follows:
	 * 
	 * This property is an enumerated 16-bit unsigned integer, and defines the type of metric that is used to drop traffic. Values are: 1: Other 2: IP
	 * Precedence 3: DSCP Value 4: 802.1P Priority Value 5: RSVP Session 6: Queue Depth 7: Packet Arrival Rate.
	 * 
	 * @param int new dropMetric property value
	 * @exception Exception
	 */
	@Deprecated
	public void setDropMetric(DropMetric dropMetric) {

		this.dropMetric = dropMetric;
	} // setDropMetric

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property otherDropMetric.
	 */
	@Deprecated
	private String	otherDropMetric;

	/**
	 * This method returns the WeightedREDDropperService.otherDropMetric property value. This property is described as follows:
	 * 
	 * This string property is used in conjunction with the DropMetric property. When the value of DropMetric is 1 (i.e., "Other"), then the type of
	 * metric to be used is defined in this property.
	 * 
	 * @return String current otherDropMetric property value
	 * @exception Exception
	 */
	@Deprecated
	public String getOtherDropMetric() {

		return this.otherDropMetric;
	} // getOtherDropMetric

	/**
	 * This method sets the WeightedREDDropperService.otherDropMetric property value. This property is described as follows:
	 * 
	 * This string property is used in conjunction with the DropMetric property. When the value of DropMetric is 1 (i.e., "Other"), then the type of
	 * metric to be used is defined in this property.
	 * 
	 * @param String
	 *            new otherDropMetric property value
	 * @exception Exception
	 */
	@Deprecated
	public void setOtherDropMetric(String otherDropMetric) {

		this.otherDropMetric = otherDropMetric;
	} // setOtherDropMetric

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property weight.
	 */
	@Deprecated
	private float	weight;

	/**
	 * This method returns the WeightedREDDropperService.weight property value. This property is described as follows:
	 * 
	 * This is a 32-bit real number that represents the weighting factor used to determine which queues get more service.
	 * 
	 * @return float current weight property value
	 * @exception Exception
	 */
	@Deprecated
	public float getWeight() {

		return this.weight;
	} // getWeight

	/**
	 * This method sets the WeightedREDDropperService.weight property value. This property is described as follows:
	 * 
	 * This is a 32-bit real number that represents the weighting factor used to determine which queues get more service.
	 * 
	 * @param float new weight property value
	 * @exception Exception
	 */
	@Deprecated
	public void setWeight(float weight) {

		this.weight = weight;
	} // setWeight

} // Class WeightedREDDropperService
