/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class VLAN as well as methods comparable to the
 * invokeMethods defined for this class. This Class implements the VLANBean Interface. The CIM class VLAN is described as follows:
 * 
 * An instance of VLAN represents a VLAN within a switch. In a particular switch, there should be an instance of VLAN for every VLAN available. For
 * example, in a switch with port-based VLANs, if there are 16 VLANs to which ports can be assigned (VLAN 1 through VLAN 16), there should be an
 * instance of CIM_VLAN for each of VLAN 1 through VLAN 16. VLAN inherits Name from ServiceAccessPoint. Use this for the textual name of the VLAN, if
 * there is one. Otherwise, synthesize a textual name, e.g., VLAN 0003. (Consider leading zero fill, as shown, to ensure that if the textual VLAN
 * names are extracted and presented by a management applictions, the VLAN names will sort in the expected order.) The numeric part of the name should
 * be at least four digits wide since 802.1Q specifies 4095 VLANs. It is intended that VLAN be subclassed only if necessary to add attributes. The
 * type of the VLAN can be inferred from the VLANService(s) with which the VLAN is associated in the VLANFor association. An instance of VLAN may be
 * associated with more than one VLANService. For example, there are switches that support both 802.1Q VLANs and the vendor's proprietary VLANs. In
 * some such switches, if a broadcast packet is received on a port in an 802.1Q VLAN (VLAN 5, for example), it may be be transmitted from a port in a
 * 'proprietary' VLAN 5. In effect, there is only one VLAN 5, and the type of port only determines the packet format for tagged packets. In the case
 * just described, only one instance of CIM_VLAN should be instantiated for VLAN 5, and it should be associated both with the 802.1Q VLANService and
 * the proprietary VLANService. In typical VLAN-aware switches, packets can be assigned to a VLAN based on the port on which they are received
 * (port-based VLANS), based on the source MAC address (MAC-based VLANs), or based on the value of a set of bits in the packet (protocol-based VLANs).
 * If it is desirable to represent the VLAN assignment predicate for some MAC-based VLAN switch, it will be necessary to subclass VLAN. The list of
 * MAC addresses associated with a VLAN might be an attribute of the subclass. If it is desirable to represent the VLAN assignment predicate in a
 * protocol-based VLAN switch, it will also be necessary to subclass VLAN, InboundVLAN, or both. If the predicate applies to all ports in the switch,
 * then only VLAN need be used/instantiated. If the predicate may vary based on the port, then InboundVLAN must be subclassed, and CIM_VLAN might have
 * to be subclassed as well.
 */
@Deprecated
public class VLAN extends ServiceAccessPoint implements Serializable {

	/**
	 * This constructor creates a VLANBeanImpl Class which implements the VLANBean Interface, and encapsulates the CIM class VLAN in a Java Bean. The
	 * CIM class VLAN is described as follows:
	 * 
	 * An instance of VLAN represents a VLAN within a switch. In a particular switch, there should be an instance of VLAN for every VLAN available.
	 * For example, in a switch with port-based VLANs, if there are 16 VLANs to which ports can be assigned (VLAN 1 through VLAN 16), there should be
	 * an instance of CIM_VLAN for each of VLAN 1 through VLAN 16. VLAN inherits Name from ServiceAccessPoint. Use this for the textual name of the
	 * VLAN, if there is one. Otherwise, synthesize a textual name, e.g., VLAN 0003. (Consider leading zero fill, as shown, to ensure that if the
	 * textual VLAN names are extracted and presented by a management applictions, the VLAN names will sort in the expected order.) The numeric part
	 * of the name should be at least four digits wide since 802.1Q specifies 4095 VLANs. It is intended that VLAN be subclassed only if necessary to
	 * add attributes. The type of the VLAN can be inferred from the VLANService(s) with which the VLAN is associated in the VLANFor association. An
	 * instance of VLAN may be associated with more than one VLANService. For example, there are switches that support both 802.1Q VLANs and the
	 * vendor's proprietary VLANs. In some such switches, if a broadcast packet is received on a port in an 802.1Q VLAN (VLAN 5, for example), it may
	 * be be transmitted from a port in a 'proprietary' VLAN 5. In effect, there is only one VLAN 5, and the type of port only determines the packet
	 * format for tagged packets. In the case just described, only one instance of CIM_VLAN should be instantiated for VLAN 5, and it should be
	 * associated both with the 802.1Q VLANService and the proprietary VLANService. In typical VLAN-aware switches, packets can be assigned to a VLAN
	 * based on the port on which they are received (port-based VLANS), based on the source MAC address (MAC-based VLANs), or based on the value of a
	 * set of bits in the packet (protocol-based VLANs). If it is desirable to represent the VLAN assignment predicate for some MAC-based VLAN switch,
	 * it will be necessary to subclass VLAN. The list of MAC addresses associated with a VLAN might be an attribute of the subclass. If it is
	 * desirable to represent the VLAN assignment predicate in a protocol-based VLAN switch, it will also be necessary to subclass VLAN, InboundVLAN,
	 * or both. If the predicate applies to all ports in the switch, then only VLAN need be used/instantiated. If the predicate may vary based on the
	 * port, then InboundVLAN must be subclassed, and CIM_VLAN might have to be subclassed as well.
	 */
	public VLAN() {
	};

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property vLANNumber.
	 */
	@Deprecated
	private int	vLANNumber;

	/**
	 * This method returns the VLAN.vLANNumber property value. This property is described as follows:
	 * 
	 * VLAN identifying number.
	 * 
	 * @return int current vLANNumber property value
	 * @exception Exception
	 */
	@Deprecated
	public int getVLANNumber() {

		return this.vLANNumber;
	} // getVLANNumber

	/**
	 * This method sets the VLAN.vLANNumber property value. This property is described as follows:
	 * 
	 * VLAN identifying number.
	 * 
	 * @param int new vLANNumber property value
	 * @exception Exception
	 */
	@Deprecated
	public void setVLANNumber(int vLANNumber) {

		this.vLANNumber = vLANNumber;
	} // setVLANNumber

} // Class VLAN
