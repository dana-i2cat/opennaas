/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class IsSpare as well as methods comparable to the
 * invokeMethods defined for this class. This Class implements the IsSpareBean Interface. The CIM class IsSpare is described as follows:
 * 
 * The IsSpare association indicates an element that can spare or replace any of the elements in the referenced RedundancySet. If the 'spare' is
 * itself a Collection, this indicates that each of the 'spare' members can replace any of the elements in the RedundancySet. In the case of a
 * collection all of the values in the properties of this association MUST apply to all members of the Collection. If this is not true, then the
 * Collection SHOULD be broken down into smaller sets (and the IsSpare association defined for each of these smaller sets), such that the properties
 * of this association apply to all collected members.
 */
public class IsSpare extends Dependency implements Serializable {

	/**
	 * This constructor creates a IsSpareBeanImpl Class which implements the IsSpareBean Interface, and encapsulates the CIM class IsSpare in a Java
	 * Bean. The CIM class IsSpare is described as follows:
	 * 
	 * The IsSpare association indicates an element that can spare or replace any of the elements in the referenced RedundancySet. If the 'spare' is
	 * itself a Collection, this indicates that each of the 'spare' members can replace any of the elements in the RedundancySet. In the case of a
	 * collection all of the values in the properties of this association MUST apply to all members of the Collection. If this is not true, then the
	 * Collection SHOULD be broken down into smaller sets (and the IsSpare association defined for each of these smaller sets), such that the
	 * properties of this association apply to all collected members.
	 */
	public IsSpare() {
	};

	/**
	 * This method create an Association of the type IsSpare between one ManagedElement object and RedundancySet object
	 */
	public static IsSpare link(ManagedElement antecedent, RedundancySet
			dependent) {

		return (IsSpare) Association.link(IsSpare.class, antecedent, dependent);
	}// link

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property SpareStatus.
	 */

	public enum SpareStatus {
		UNKNOWN,
		HOT_STANDBY,
		COLD_STANDBY
	}

	private SpareStatus	spareStatus;

	/**
	 * This method returns the IsSpare.spareStatus property value. This property is described as follows:
	 * 
	 * Indicates the state of the 'spare'. - Hot Standby. The element is available 'immediately' to become a functioning member of the set. Such an
	 * element is powered on and has been initialized for it's role as a spare. - Cold Standby. The element is not available to join the set without
	 * action to prepare it.
	 * 
	 * @return int current spareStatus property value
	 * @exception Exception
	 */
	public SpareStatus getSpareStatus() {

		return this.spareStatus;
	} // getSpareStatus

	/**
	 * This method sets the IsSpare.spareStatus property value. This property is described as follows:
	 * 
	 * Indicates the state of the 'spare'. - Hot Standby. The element is available 'immediately' to become a functioning member of the set. Such an
	 * element is powered on and has been initialized for it's role as a spare. - Cold Standby. The element is not available to join the set without
	 * action to prepare it.
	 * 
	 * @param int new spareStatus property value
	 * @exception Exception
	 */
	public void setSpareStatus(SpareStatus spareStatus) {

		this.spareStatus = spareStatus;
	} // setSpareStatus

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property FailoverSupported.
	 */

	public enum FailoverSupported {
		UNKNOWN,
		AUTOMATIC,
		MANUAL,
		BOTH_MANUAL_AND_AUTOMATIC
	}

	private FailoverSupported	failoverSupported;

	/**
	 * This method returns the IsSpare.failoverSupported property value. This property is described as follows:
	 * 
	 * Indicates whether or not the failover to the spare is a manual or automatic action.
	 * 
	 * @return int current failoverSupported property value
	 * @exception Exception
	 */
	public FailoverSupported getFailoverSupported() {

		return this.failoverSupported;
	} // getFailoverSupported

	/**
	 * This method sets the IsSpare.failoverSupported property value. This property is described as follows:
	 * 
	 * Indicates whether or not the failover to the spare is a manual or automatic action.
	 * 
	 * @param int new failoverSupported property value
	 * @exception Exception
	 */
	public void setFailoverSupported(FailoverSupported failoverSupported) {

		this.failoverSupported = failoverSupported;
	} // setFailoverSupported

} // Class IsSpare
