/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class AHTransform as well as methods comparable to the
 * invokeMethods defined for this class. This Class implements the AHTransformBean Interface. The CIM class AHTransform is described as follows:
 * 
 * AHTransform defines the parameters used for a phase 2 AH (Authentication Header) Security Association.
 */
public class AHTransform extends SATransform implements Serializable {

	/**
	 * This constructor creates a AHTransformBeanImpl Class which implements the AHTransformBean Interface, and encapsulates the CIM class AHTransform
	 * in a Java Bean. The CIM class AHTransform is described as follows:
	 * 
	 * AHTransform defines the parameters used for a phase 2 AH (Authentication Header) Security Association.
	 */
	public AHTransform() {
	};

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property AHTransformId.
	 */

	public enum AHTransformId {
		OTHER,
		MD5,
		SHA_1,
		DES
	}

	private AHTransformId	aHTransformId;

	/**
	 * This method returns the AHTransform.aHTransformId property value. This property is described as follows:
	 * 
	 * AHTransformId is an enumeration that specifies the hash algorithm to be used. The list of values was generated from RFC2407, Section 4.4.3.
	 * 
	 * @return int current aHTransformId property value
	 * @exception Exception
	 */
	public AHTransformId getAHTransformId() {

		return this.aHTransformId;
	} // getAHTransformId

	/**
	 * This method sets the AHTransform.aHTransformId property value. This property is described as follows:
	 * 
	 * AHTransformId is an enumeration that specifies the hash algorithm to be used. The list of values was generated from RFC2407, Section 4.4.3.
	 * 
	 * @param int new aHTransformId property value
	 * @exception Exception
	 */
	public void setAHTransformId(AHTransformId aHTransformId) {

		this.aHTransformId = aHTransformId;
	} // setAHTransformId

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property otherAHTransformId.
	 */
	private String	otherAHTransformId;

	/**
	 * This method returns the AHTransform.otherAHTransformId property value. This property is described as follows:
	 * 
	 * Description of the hash algorithm when the value 1 ("Other") is specified for the property, AHTransformId.
	 * 
	 * @return String current otherAHTransformId property value
	 * @exception Exception
	 */
	public String getOtherAHTransformId() {

		return this.otherAHTransformId;
	} // getOtherAHTransformId

	/**
	 * This method sets the AHTransform.otherAHTransformId property value. This property is described as follows:
	 * 
	 * Description of the hash algorithm when the value 1 ("Other") is specified for the property, AHTransformId.
	 * 
	 * @param String
	 *            new otherAHTransformId property value
	 * @exception Exception
	 */
	public void setOtherAHTransformId(String otherAHTransformId) {

		this.otherAHTransformId = otherAHTransformId;
	} // setOtherAHTransformId

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property useReplayPrevention.
	 */
	private boolean	useReplayPrevention;

	/**
	 * This method returns the AHTransform.useReplayPrevention property value. This property is described as follows:
	 * 
	 * UseReplayPrevention causes the local peer to enable replay prevention detection. This can be accomplished by using a sequence number when
	 * sending a packet or checking the sequence number upon receipt of a packet.
	 * 
	 * @return boolean current useReplayPrevention property value
	 * @exception Exception
	 */
	public boolean isUseReplayPrevention() {

		return this.useReplayPrevention;
	} // getUseReplayPrevention

	/**
	 * This method sets the AHTransform.useReplayPrevention property value. This property is described as follows:
	 * 
	 * UseReplayPrevention causes the local peer to enable replay prevention detection. This can be accomplished by using a sequence number when
	 * sending a packet or checking the sequence number upon receipt of a packet.
	 * 
	 * @param boolean new useReplayPrevention property value
	 * @exception Exception
	 */
	public void setUseReplayPrevention(boolean useReplayPrevention) {

		this.useReplayPrevention = useReplayPrevention;
	} // setUseReplayPrevention

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property replayPreventionWindowSize.
	 */
	private long	replayPreventionWindowSize;

	/**
	 * This method returns the AHTransform.replayPreventionWindowSize property value. This property is described as follows:
	 * 
	 * ReplayPreventionWindowsSize specifies, in bits, the length of the sliding window used by the replay prevention mechanism. The value of this
	 * property is meaningless if UseReplayPrevention is false. The window size MUST be a power of 2.
	 * 
	 * @return long current replayPreventionWindowSize property value
	 * @exception Exception
	 */
	public long getReplayPreventionWindowSize() {

		return this.replayPreventionWindowSize;
	} // getReplayPreventionWindowSize

	/**
	 * This method sets the AHTransform.replayPreventionWindowSize property value. This property is described as follows:
	 * 
	 * ReplayPreventionWindowsSize specifies, in bits, the length of the sliding window used by the replay prevention mechanism. The value of this
	 * property is meaningless if UseReplayPrevention is false. The window size MUST be a power of 2.
	 * 
	 * @param long new replayPreventionWindowSize property value
	 * @exception Exception
	 */
	public void setReplayPreventionWindowSize(long replayPreventionWindowSize)
	{

		this.replayPreventionWindowSize = replayPreventionWindowSize;
	} // setReplayPreventionWindowSize

} // Class AHTransform
