/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class NextServiceAfterMeter as well as methods comparable to
 * the invokeMethods defined for this class. This Class implements the NextServiceAfterMeterBean Interface. The CIM class NextServiceAfterMeter is
 * described as follows:
 * 
 * This association describes a predecessor-successor relationship between a MeterService and one or more ConditioningService objects that process
 * traffic from the meter. For example, for devices that implement preamble marking, the FollowingService reference (after the meter) is a
 * PreambleMarkerService - to record the results of the metering in the preamble. It might be expected that the NextServiceAfterMeter association
 * would subclass from NextService. However, meters are 1:n fan-out elements, and require a mechanism to distinguish between the different
 * results/outputs of the meter. Therefore, this association defines a new key property, MeterResult, which is used to record the result and identify
 * the output through which this traffic left the meter.
 */
public class NextServiceAfterMeter extends Association implements Serializable
{

	/**
	 * This constructor creates a NextServiceAfterMeterBeanImpl Class which implements the NextServiceAfterMeterBean Interface, and encapsulates the
	 * CIM class NextServiceAfterMeter in a Java Bean. The CIM class NextServiceAfterMeter is described as follows:
	 * 
	 * This association describes a predecessor-successor relationship between a MeterService and one or more ConditioningService objects that process
	 * traffic from the meter. For example, for devices that implement preamble marking, the FollowingService reference (after the meter) is a
	 * PreambleMarkerService - to record the results of the metering in the preamble. It might be expected that the NextServiceAfterMeter association
	 * would subclass from NextService. However, meters are 1:n fan-out elements, and require a mechanism to distinguish between the different
	 * results/outputs of the meter. Therefore, this association defines a new key property, MeterResult, which is used to record the result and
	 * identify the output through which this traffic left the meter.
	 */
	public NextServiceAfterMeter() {
	};

	/**
	 * This method create an Association of the type NextServiceAfterMeter between one MeterService object and ConditioningService object
	 */
	public static NextServiceAfterMeter link(MeterService
			precedingService, ConditioningService followingService) {

		return (NextServiceAfterMeter) Association.link(NextServiceAfterMeter.class, precedingService, followingService);
	}// link

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property MeterResult.
	 */

	public enum MeterResult {
		UNKNOWN,
		CONFORMING,
		PARTIALLY_CONFORMING,
		NON_CONFORMING
	}

	private MeterResult	meterResult;

	/**
	 * This method returns the NextServiceAfterMeter.meterResult property value. This property is described as follows:
	 * 
	 * Information on the result of the metering. Traffic is distinguished as being conforming, non-conforming, or partially conforming. More
	 * complicated metering can be built either by extending the enumeration or by cascading meters.
	 * 
	 * @return int current meterResult property value
	 * @exception Exception
	 */
	public MeterResult getMeterResult() {

		return this.meterResult;
	} // getMeterResult

	/**
	 * This method sets the NextServiceAfterMeter.meterResult property value. This property is described as follows:
	 * 
	 * Information on the result of the metering. Traffic is distinguished as being conforming, non-conforming, or partially conforming. More
	 * complicated metering can be built either by extending the enumeration or by cascading meters.
	 * 
	 * @param int new meterResult property value
	 * @exception Exception
	 */
	public void setMeterResult(MeterResult meterResult) {

		this.meterResult = meterResult;
	} // setMeterResult

} // Class NextServiceAfterMeter
