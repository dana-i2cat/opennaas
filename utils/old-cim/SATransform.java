/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class SATransform as well as methods comparable to the
 * invokeMethods defined for this class. This Class implements the SATransformBean Interface. The CIM class SATransform is described as follows:
 * 
 * SATransform is the base class for the various types of transforms that are in effect for an existing IPsecSAEndpoint, or aggregated into phase 2
 * proposals used during the IPsec negotiation process. This class is defined as a kind of ScopedSettingData, since it describes the set of transform
 * properties that MUST be applied together, if negotiated. This subclassing is different than that defined in IETF's IPSP Policy draft - where it is
 * subclassed from Policy. The definition as SettingData is more consistent with the application of the properties as a set, to the negotiated
 * Security Association. Note that an instance of this class is 'scoped' or contained by a System (either a ComputerSystem or AdminDomain), rather
 * than by a SecurityAssociationEndpoint. This is indicated by instantiating the ScopedSetting association, and is necessary since the transform data
 * is used in IPsec negotiation policies (also scoped by Systems) before ever being associated with a SecurityAssociationEndpoint. The latter
 * semantics (i.e., that 'this' transform is negotiated for 'this' Security Association) is conveyed via a subclass of ElementSettingData,
 * TransformOfSecurityAssociation.
 */
public class SATransform extends ScopedSettingData implements Serializable {

	/**
	 * This constructor creates a SATransformBeanImpl Class which implements the SATransformBean Interface, and encapsulates the CIM class SATransform
	 * in a Java Bean. The CIM class SATransform is described as follows:
	 * 
	 * SATransform is the base class for the various types of transforms that are in effect for an existing IPsecSAEndpoint, or aggregated into phase
	 * 2 proposals used during the IPsec negotiation process. This class is defined as a kind of ScopedSettingData, since it describes the set of
	 * transform properties that MUST be applied together, if negotiated. This subclassing is different than that defined in IETF's IPSP Policy draft
	 * - where it is subclassed from Policy. The definition as SettingData is more consistent with the application of the properties as a set, to the
	 * negotiated Security Association. Note that an instance of this class is 'scoped' or contained by a System (either a ComputerSystem or
	 * AdminDomain), rather than by a SecurityAssociationEndpoint. This is indicated by instantiating the ScopedSetting association, and is necessary
	 * since the transform data is used in IPsec negotiation policies (also scoped by Systems) before ever being associated with a
	 * SecurityAssociationEndpoint. The latter semantics (i.e., that 'this' transform is negotiated for 'this' Security Association) is conveyed via a
	 * subclass of ElementSettingData, TransformOfSecurityAssociation.
	 */
	protected SATransform() {
	};

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property elementName.
	 */
	private String	elementName;

	/**
	 * This method returns the SATransform.elementName property value. This property is described as follows:
	 * 
	 * The user-friendly name for this instance of SettingData. In addition, the user-friendly name can be used as an index property for a search or
	 * query. (Note: The name does not have to be unique within a namespace.)
	 * 
	 * @return String current elementName property value
	 * @exception Exception
	 */
	@Override
	public String getElementName() {

		return this.elementName;
	} // getElementName

	/**
	 * This method sets the SATransform.elementName property value. This property is described as follows:
	 * 
	 * The user-friendly name for this instance of SettingData. In addition, the user-friendly name can be used as an index property for a search or
	 * query. (Note: The name does not have to be unique within a namespace.)
	 * 
	 * @param String
	 *            new elementName property value
	 * @exception Exception
	 */
	@Override
	public void setElementName(String elementName) {

		this.elementName = elementName;
	} // setElementName

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property maxLifetimeSeconds.
	 */
	private long	maxLifetimeSeconds;

	/**
	 * This method returns the SATransform.maxLifetimeSeconds property value. This property is described as follows:
	 * 
	 * MaxLifetimeSeconds specifies the maximum time that the Security Association should be considered valid after it has been created. A value of 0,
	 * the default, indicates that 8 hours should be used. A non-zero value indicates the maximum lifetime in seconds.
	 * 
	 * @return long current maxLifetimeSeconds property value
	 * @exception Exception
	 */
	public long getMaxLifetimeSeconds() {

		return this.maxLifetimeSeconds;
	} // getMaxLifetimeSeconds

	/**
	 * This method sets the SATransform.maxLifetimeSeconds property value. This property is described as follows:
	 * 
	 * MaxLifetimeSeconds specifies the maximum time that the Security Association should be considered valid after it has been created. A value of 0,
	 * the default, indicates that 8 hours should be used. A non-zero value indicates the maximum lifetime in seconds.
	 * 
	 * @param long new maxLifetimeSeconds property value
	 * @exception Exception
	 */
	public void setMaxLifetimeSeconds(long maxLifetimeSeconds) {

		this.maxLifetimeSeconds = maxLifetimeSeconds;
	} // setMaxLifetimeSeconds

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property maxLifetimeKilobytes.
	 */
	private long	maxLifetimeKilobytes;

	/**
	 * This method returns the SATransform.maxLifetimeKilobytes property value. This property is described as follows:
	 * 
	 * MaxLifetimeKilobytes specifies the maximum kilobyte lifetime for a Security Association. Different lifetimes are used, depending on the
	 * strength of the encryption algorithm. A value of 0, the default, indicates that no maximum should be defined. A non-zero value specifies the
	 * desired kilobyte lifetime.
	 * 
	 * @return long current maxLifetimeKilobytes property value
	 * @exception Exception
	 */
	public long getMaxLifetimeKilobytes() {

		return this.maxLifetimeKilobytes;
	} // getMaxLifetimeKilobytes

	/**
	 * This method sets the SATransform.maxLifetimeKilobytes property value. This property is described as follows:
	 * 
	 * MaxLifetimeKilobytes specifies the maximum kilobyte lifetime for a Security Association. Different lifetimes are used, depending on the
	 * strength of the encryption algorithm. A value of 0, the default, indicates that no maximum should be defined. A non-zero value specifies the
	 * desired kilobyte lifetime.
	 * 
	 * @param long new maxLifetimeKilobytes property value
	 * @exception Exception
	 */
	public void setMaxLifetimeKilobytes(long maxLifetimeKilobytes) {

		this.maxLifetimeKilobytes = maxLifetimeKilobytes;
	} // setMaxLifetimeKilobytes

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property vendorID.
	 */
	private String	vendorID;

	/**
	 * This method returns the SATransform.vendorID property value. This property is described as follows:
	 * 
	 * VendorID identifies vendor-defined transforms. If this field is empty (the default), then this is a standard transform.
	 * 
	 * @return String current vendorID property value
	 * @exception Exception
	 */
	public String getVendorID() {

		return this.vendorID;
	} // getVendorID

	/**
	 * This method sets the SATransform.vendorID property value. This property is described as follows:
	 * 
	 * VendorID identifies vendor-defined transforms. If this field is empty (the default), then this is a standard transform.
	 * 
	 * @param String
	 *            new vendorID property value
	 * @exception Exception
	 */
	public void setVendorID(String vendorID) {

		this.vendorID = vendorID;
	} // setVendorID

} // Class SATransform
