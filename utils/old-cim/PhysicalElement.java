/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class PhysicalElement as well as methods comparable to the
 * invokeMethods defined for this class. This Class implements the PhysicalElementBean Interface. The CIM class PhysicalElement is described as
 * follows:
 * 
 * Subclasses of CIM_PhysicalElement define any component of a System that has a distinct physical identity. Instances of this class can be defined as
 * an object that can be seen or touched. All Processes, Files, and LogicalDevices are considered not to be Physical Elements. For example, it is not
 * possible to touch the functionality of a 'modem.' You can touch only the card or package that implements the modem. The same card could also
 * implement a LAN adapter. PhysicalElements are tangible ManagedSystemElements that have a physical manifestation of some sort. Note that the
 * properties of PhysicalElement describe a hardware entity. Possible replacement (FRU) information is defined by following the ElementFRU association
 * to one or more instances of the ReplacementFRU class. This definition allows a client to determine what hardware can be replaced (FRUed) and what
 * 'spare' parts might be required by a customer or engineer doing the replacement. If it can be instrumented or manually determined that an element
 * actually replaced (FRUed) another, then this can be described in the model using the ElementHasBeenFRUed association.
 */
public class PhysicalElement extends ManagedSystemElement implements
		Serializable {

	/**
	 * This constructor creates a PhysicalElementBeanImpl Class which implements the PhysicalElementBean Interface, and encapsulates the CIM class
	 * PhysicalElement in a Java Bean. The CIM class PhysicalElement is described as follows:
	 * 
	 * Subclasses of CIM_PhysicalElement define any component of a System that has a distinct physical identity. Instances of this class can be
	 * defined as an object that can be seen or touched. All Processes, Files, and LogicalDevices are considered not to be Physical Elements. For
	 * example, it is not possible to touch the functionality of a 'modem.' You can touch only the card or package that implements the modem. The same
	 * card could also implement a LAN adapter. PhysicalElements are tangible ManagedSystemElements that have a physical manifestation of some sort.
	 * Note that the properties of PhysicalElement describe a hardware entity. Possible replacement (FRU) information is defined by following the
	 * ElementFRU association to one or more instances of the ReplacementFRU class. This definition allows a client to determine what hardware can be
	 * replaced (FRUed) and what 'spare' parts might be required by a customer or engineer doing the replacement. If it can be instrumented or
	 * manually determined that an element actually replaced (FRUed) another, then this can be described in the model using the ElementHasBeenFRUed
	 * association.
	 */
	protected PhysicalElement() {
	};

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property tag.
	 */
	private String	tag;

	/**
	 * This method returns the PhysicalElement.tag property value. This property is described as follows:
	 * 
	 * An arbitrary string that uniquely identifies the Physical Element and serves as the key of the Element. The Tag property can contain
	 * information such as asset tag or serial number data. The key for PhysicalElement is placed very high in the object hierarchy in order to
	 * independently identify the hardware or entity, regardless of physical placement in or on Cabinets, Adapters, and so on. For example, a
	 * hotswappable or removable component can be taken from its containing (scoping) Package and be temporarily unused. The object still continues to
	 * exist and can even be inserted into a different scoping container. Therefore, the key for Physical Element is an arbitrary string and is
	 * defined independently of any placement or location-oriented hierarchy.
	 * 
	 * @return String current tag property value
	 * @exception Exception
	 */
	public String getTag() {

		return this.tag;
	} // getTag

	/**
	 * This method sets the PhysicalElement.tag property value. This property is described as follows:
	 * 
	 * An arbitrary string that uniquely identifies the Physical Element and serves as the key of the Element. The Tag property can contain
	 * information such as asset tag or serial number data. The key for PhysicalElement is placed very high in the object hierarchy in order to
	 * independently identify the hardware or entity, regardless of physical placement in or on Cabinets, Adapters, and so on. For example, a
	 * hotswappable or removable component can be taken from its containing (scoping) Package and be temporarily unused. The object still continues to
	 * exist and can even be inserted into a different scoping container. Therefore, the key for Physical Element is an arbitrary string and is
	 * defined independently of any placement or location-oriented hierarchy.
	 * 
	 * @param String
	 *            new tag property value
	 * @exception Exception
	 */
	public void setTag(String tag) {

		this.tag = tag;
	} // setTag

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property description.
	 */
	private String	description;

	/**
	 * This method returns the PhysicalElement.description property value. This property is described as follows:
	 * 
	 * A textual description of the PhysicalElement.
	 * 
	 * @return String current description property value
	 * @exception Exception
	 */
	@Override
	public String getDescription() {

		return this.description;
	} // getDescription

	/**
	 * This method sets the PhysicalElement.description property value. This property is described as follows:
	 * 
	 * A textual description of the PhysicalElement.
	 * 
	 * @param String
	 *            new description property value
	 * @exception Exception
	 */
	@Override
	public void setDescription(String description) {

		this.description = description;
	} // setDescription

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property creationClassName.
	 */
	private String	creationClassName;

	/**
	 * This method returns the PhysicalElement.creationClassName property value. This property is described as follows:
	 * 
	 * CreationClassName indicates the name of the class or the subclass used in the creation of an instance. When used with the other key properties
	 * of this class, this property allows all instances of this class and its subclasses to be uniquely identified.
	 * 
	 * @return String current creationClassName property value
	 * @exception Exception
	 */
	public String getCreationClassName() {

		return this.creationClassName;
	} // getCreationClassName

	/**
	 * This method sets the PhysicalElement.creationClassName property value. This property is described as follows:
	 * 
	 * CreationClassName indicates the name of the class or the subclass used in the creation of an instance. When used with the other key properties
	 * of this class, this property allows all instances of this class and its subclasses to be uniquely identified.
	 * 
	 * @param String
	 *            new creationClassName property value
	 * @exception Exception
	 */
	public void setCreationClassName(String creationClassName) {

		this.creationClassName = creationClassName;
	} // setCreationClassName

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property elementName.
	 */
	private String	elementName;

	/**
	 * This method returns the PhysicalElement.elementName property value. This property is described as follows:
	 * 
	 * A user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties,
	 * identity data, and description information. Note that the Name property of ManagedSystemElement is also defined as a user-friendly name. But,
	 * it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user-friendly name, without
	 * inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information can be present in both the
	 * Name and ElementName properties. Note that if there is an associated instance of CIM_EnabledLogicalElementCapabilities, restrictions on this
	 * properties may exist as defined in ElementNameMask and MaxElementNameLen properties defined in that class.
	 * 
	 * @return String current elementName property value
	 * @exception Exception
	 */
	@Override
	public String getElementName() {

		return this.elementName;
	} // getElementName

	/**
	 * This method sets the PhysicalElement.elementName property value. This property is described as follows:
	 * 
	 * A user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties,
	 * identity data, and description information. Note that the Name property of ManagedSystemElement is also defined as a user-friendly name. But,
	 * it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user-friendly name, without
	 * inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information can be present in both the
	 * Name and ElementName properties. Note that if there is an associated instance of CIM_EnabledLogicalElementCapabilities, restrictions on this
	 * properties may exist as defined in ElementNameMask and MaxElementNameLen properties defined in that class.
	 * 
	 * @param String
	 *            new elementName property value
	 * @exception Exception
	 */
	@Override
	public void setElementName(String elementName) {

		this.elementName = elementName;
	} // setElementName

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property manufacturer.
	 */
	private String	manufacturer;

	/**
	 * This method returns the PhysicalElement.manufacturer property value. This property is described as follows:
	 * 
	 * The name of the organization responsible for producing the PhysicalElement. This organization might be the entity from whom the Element is
	 * purchased, but this is not necessarily true. The latter information is contained in the Vendor property of CIM_Product.
	 * 
	 * @return String current manufacturer property value
	 * @exception Exception
	 */
	public String getManufacturer() {

		return this.manufacturer;
	} // getManufacturer

	/**
	 * This method sets the PhysicalElement.manufacturer property value. This property is described as follows:
	 * 
	 * The name of the organization responsible for producing the PhysicalElement. This organization might be the entity from whom the Element is
	 * purchased, but this is not necessarily true. The latter information is contained in the Vendor property of CIM_Product.
	 * 
	 * @param String
	 *            new manufacturer property value
	 * @exception Exception
	 */
	public void setManufacturer(String manufacturer) {

		this.manufacturer = manufacturer;
	} // setManufacturer

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property model.
	 */
	private String	model;

	/**
	 * This method returns the PhysicalElement.model property value. This property is described as follows:
	 * 
	 * The name by which the PhysicalElement is generally known.
	 * 
	 * @return String current model property value
	 * @exception Exception
	 */
	public String getModel() {

		return this.model;
	} // getModel

	/**
	 * This method sets the PhysicalElement.model property value. This property is described as follows:
	 * 
	 * The name by which the PhysicalElement is generally known.
	 * 
	 * @param String
	 *            new model property value
	 * @exception Exception
	 */
	public void setModel(String model) {

		this.model = model;
	} // setModel

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property sKU.
	 */
	private String	sKU;

	/**
	 * This method returns the PhysicalElement.sKU property value. This property is described as follows:
	 * 
	 * The stock-keeping unit number for this PhysicalElement.
	 * 
	 * @return String current sKU property value
	 * @exception Exception
	 */
	public String getSKU() {

		return this.sKU;
	} // getSKU

	/**
	 * This method sets the PhysicalElement.sKU property value. This property is described as follows:
	 * 
	 * The stock-keeping unit number for this PhysicalElement.
	 * 
	 * @param String
	 *            new sKU property value
	 * @exception Exception
	 */
	public void setSKU(String sKU) {

		this.sKU = sKU;
	} // setSKU

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property serialNumber.
	 */
	private String	serialNumber;

	/**
	 * This method returns the PhysicalElement.serialNumber property value. This property is described as follows:
	 * 
	 * A manufacturer-allocated number used to identify the Physical Element.
	 * 
	 * @return String current serialNumber property value
	 * @exception Exception
	 */
	public String getSerialNumber() {

		return this.serialNumber;
	} // getSerialNumber

	/**
	 * This method sets the PhysicalElement.serialNumber property value. This property is described as follows:
	 * 
	 * A manufacturer-allocated number used to identify the Physical Element.
	 * 
	 * @param String
	 *            new serialNumber property value
	 * @exception Exception
	 */
	public void setSerialNumber(String serialNumber) {

		this.serialNumber = serialNumber;
	} // setSerialNumber

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property version.
	 */
	private String	version;

	/**
	 * This method returns the PhysicalElement.version property value. This property is described as follows:
	 * 
	 * A string that indicates the version of the PhysicalElement.
	 * 
	 * @return String current version property value
	 * @exception Exception
	 */
	public String getVersion() {

		return this.version;
	} // getVersion

	/**
	 * This method sets the PhysicalElement.version property value. This property is described as follows:
	 * 
	 * A string that indicates the version of the PhysicalElement.
	 * 
	 * @param String
	 *            new version property value
	 * @exception Exception
	 */
	public void setVersion(String version) {

		this.version = version;
	} // setVersion

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property partNumber.
	 */
	private String	partNumber;

	/**
	 * This method returns the PhysicalElement.partNumber property value. This property is described as follows:
	 * 
	 * The part number assigned by the organization that is responsible for producing or manufacturing the PhysicalElement.
	 * 
	 * @return String current partNumber property value
	 * @exception Exception
	 */
	public String getPartNumber() {

		return this.partNumber;
	} // getPartNumber

	/**
	 * This method sets the PhysicalElement.partNumber property value. This property is described as follows:
	 * 
	 * The part number assigned by the organization that is responsible for producing or manufacturing the PhysicalElement.
	 * 
	 * @param String
	 *            new partNumber property value
	 * @exception Exception
	 */
	public void setPartNumber(String partNumber) {

		this.partNumber = partNumber;
	} // setPartNumber

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property otherIdentifyingInfo.
	 */
	private String	otherIdentifyingInfo;

	/**
	 * This method returns the PhysicalElement.otherIdentifyingInfo property value. This property is described as follows:
	 * 
	 * OtherIdentifyingInfo captures data in addition to Tag information. This information could be used to identify a Physical Element. One example
	 * is bar code data associated with an Element that also has an asset tag. Note that if only bar code data is available and is unique or able to
	 * be used as an Element key, this property would be null and the bar code data would be used as the class key, in the Tag property.
	 * 
	 * @return String current otherIdentifyingInfo property value
	 * @exception Exception
	 */
	public String getOtherIdentifyingInfo() {

		return this.otherIdentifyingInfo;
	} // getOtherIdentifyingInfo

	/**
	 * This method sets the PhysicalElement.otherIdentifyingInfo property value. This property is described as follows:
	 * 
	 * OtherIdentifyingInfo captures data in addition to Tag information. This information could be used to identify a Physical Element. One example
	 * is bar code data associated with an Element that also has an asset tag. Note that if only bar code data is available and is unique or able to
	 * be used as an Element key, this property would be null and the bar code data would be used as the class key, in the Tag property.
	 * 
	 * @param String
	 *            new otherIdentifyingInfo property value
	 * @exception Exception
	 */
	public void setOtherIdentifyingInfo(String otherIdentifyingInfo) {

		this.otherIdentifyingInfo = otherIdentifyingInfo;
	} // setOtherIdentifyingInfo

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property poweredOn.
	 */
	private boolean	poweredOn;

	/**
	 * This method returns the PhysicalElement.poweredOn property value. This property is described as follows:
	 * 
	 * Boolean that indicates whether the PhysicalElement is powered on (TRUE) or is currently off (FALSE).
	 * 
	 * @return boolean current poweredOn property value
	 * @exception Exception
	 */
	public boolean isPoweredOn() {

		return this.poweredOn;
	} // getPoweredOn

	/**
	 * This method sets the PhysicalElement.poweredOn property value. This property is described as follows:
	 * 
	 * Boolean that indicates whether the PhysicalElement is powered on (TRUE) or is currently off (FALSE).
	 * 
	 * @param boolean new poweredOn property value
	 * @exception Exception
	 */
	public void setPoweredOn(boolean poweredOn) {

		this.poweredOn = poweredOn;
	} // setPoweredOn

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property manufactureDate.
	 */
	private Date	manufactureDate;

	/**
	 * This method returns the PhysicalElement.manufactureDate property value. This property is described as follows:
	 * 
	 * The date that this PhysicalElement was manufactured.
	 * 
	 * @return Date current manufactureDate property value
	 * @exception Exception
	 */
	public Date getManufactureDate() {

		return this.manufactureDate;
	} // getManufactureDate

	/**
	 * This method sets the PhysicalElement.manufactureDate property value. This property is described as follows:
	 * 
	 * The date that this PhysicalElement was manufactured.
	 * 
	 * @param Date
	 *            new manufactureDate property value
	 * @exception Exception
	 */
	public void setManufactureDate(Date manufactureDate) {

		this.manufactureDate = manufactureDate;
	} // setManufactureDate

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property vendorEquipmentType.
	 */
	private String	vendorEquipmentType;

	/**
	 * This method returns the PhysicalElement.vendorEquipmentType property value. This property is described as follows:
	 * 
	 * A vendor-specific hardware type for the PhysicalElement. It describes the specific equipment type for the element, as defined by the vendor or
	 * manufacturer.
	 * 
	 * @return String current vendorEquipmentType property value
	 * @exception Exception
	 */
	public String getVendorEquipmentType() {

		return this.vendorEquipmentType;
	} // getVendorEquipmentType

	/**
	 * This method sets the PhysicalElement.vendorEquipmentType property value. This property is described as follows:
	 * 
	 * A vendor-specific hardware type for the PhysicalElement. It describes the specific equipment type for the element, as defined by the vendor or
	 * manufacturer.
	 * 
	 * @param String
	 *            new vendorEquipmentType property value
	 * @exception Exception
	 */
	public void setVendorEquipmentType(String vendorEquipmentType) {

		this.vendorEquipmentType = vendorEquipmentType;
	} // setVendorEquipmentType

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property userTracking.
	 */
	private String	userTracking;

	/**
	 * This method returns the PhysicalElement.userTracking property value. This property is described as follows:
	 * 
	 * User-assigned and writeable asset-tracking identifier for the PhysicalElement.
	 * 
	 * @return String current userTracking property value
	 * @exception Exception
	 */
	public String getUserTracking() {

		return this.userTracking;
	} // getUserTracking

	/**
	 * This method sets the PhysicalElement.userTracking property value. This property is described as follows:
	 * 
	 * User-assigned and writeable asset-tracking identifier for the PhysicalElement.
	 * 
	 * @param String
	 *            new userTracking property value
	 * @exception Exception
	 */
	public void setUserTracking(String userTracking) {

		this.userTracking = userTracking;
	} // setUserTracking

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property canBeFRUed.
	 */
	private boolean	canBeFRUed;

	/**
	 * This method returns the PhysicalElement.canBeFRUed property value. This property is described as follows:
	 * 
	 * Boolean that indicates whether this PhysicalElement can be FRUed (TRUE) or not (FALSE).
	 * 
	 * @return boolean current canBeFRUed property value
	 * @exception Exception
	 */
	public boolean isCanBeFRUed() {

		return this.canBeFRUed;
	} // getCanBeFRUed

	/**
	 * This method sets the PhysicalElement.canBeFRUed property value. This property is described as follows:
	 * 
	 * Boolean that indicates whether this PhysicalElement can be FRUed (TRUE) or not (FALSE).
	 * 
	 * @param boolean new canBeFRUed property value
	 * @exception Exception
	 */
	public void setCanBeFRUed(boolean canBeFRUed) {

		this.canBeFRUed = canBeFRUed;
	} // setCanBeFRUed

} // Class PhysicalElement
