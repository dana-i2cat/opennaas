/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class X509CredentialFilterEntry as well as methods
 * comparable to the invokeMethods defined for this class. This Class implements the X509CredentialFilterEntryBean Interface. The CIM class
 * X509CredentialFilterEntry is described as follows:
 * 
 * An X509CredentialFilterEntry allows filtering on the attributes of an X.509 certificate. Each instance includes a value for MatchFieldName that
 * specifies the particular X.509 attribute that is being matched.
 */
public class X509CredentialFilterEntry extends FilterEntryBase implements
		Serializable {

	/**
	 * This constructor creates a X509CredentialFilterEntryBeanImpl Class which implements the X509CredentialFilterEntryBean Interface, and
	 * encapsulates the CIM class X509CredentialFilterEntry in a Java Bean. The CIM class X509CredentialFilterEntry is described as follows:
	 * 
	 * An X509CredentialFilterEntry allows filtering on the attributes of an X.509 certificate. Each instance includes a value for MatchFieldName that
	 * specifies the particular X.509 attribute that is being matched.
	 */
	public X509CredentialFilterEntry() {
	};

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property MatchFieldName.
	 */

	public enum MatchFieldName {
		OTHER,
		VERSION,
		SERIAL_NUMBER,
		SIGNATURE_ALGORITHM_IDENTIFIER,
		ISSUER_NAME,
		VALIDITY_PERIOD,
		SUBJECT_NAME,
		SUBJECT_PUBLIC_KEY_INFO,
		KEY_USAGE,
		ALTERNATE_NAME,
		DMTF_RESERVED,
		VENDOR_RESERVED
	}

	private MatchFieldName	matchFieldName;

	/**
	 * This method returns the X509CredentialFilterEntry.matchFieldName property value. This property is described as follows:
	 * 
	 * MatchFieldName specifies the X.509 attribute to match against MatchFieldValue. Note that this enumeration is modified from the IETF's IPSP
	 * Policy Model to explicitly list the 'standard' X.509 attributes.
	 * 
	 * @return String current matchFieldName property value
	 * @exception Exception
	 */
	public MatchFieldName getMatchFieldName() {

		return this.matchFieldName;
	} // getMatchFieldName

	/**
	 * This method sets the X509CredentialFilterEntry.matchFieldName property value. This property is described as follows:
	 * 
	 * MatchFieldName specifies the X.509 attribute to match against MatchFieldValue. Note that this enumeration is modified from the IETF's IPSP
	 * Policy Model to explicitly list the 'standard' X.509 attributes.
	 * 
	 * @param String
	 *            new matchFieldName property value
	 * @exception Exception
	 */
	public void setMatchFieldName(MatchFieldName matchFieldName) {

		this.matchFieldName = matchFieldName;
	} // setMatchFieldName

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property matchFieldValue.
	 */
	private String	matchFieldValue;

	/**
	 * This method returns the X509CredentialFilterEntry.matchFieldValue property value. This property is described as follows:
	 * 
	 * MatchFieldValue specifies the value to compare with the credential attribute (defined in MatchFieldName), to determine if the credential
	 * matches this filter entry. An implementation must convert this string to a DER- encoded string before matching against the values extracted
	 * from credentials at runtime. Note that a wildcard mechanism may be used when MatchFieldName specifies a general character string (for example,
	 * if MatchFieldName=7, 'Subject Name'). MatchFieldValue may contain a wildcard character, '*', in the pattern match specification. For example,
	 * for 'Subject Name', a MatchFieldValue of 'cn=*,ou=engineering,o=foo,c=be' will successfully match a certificate whose subject attribute is
	 * 'cn=JaneDoe,ou=engineering,o=foo,c=be'. A wildcard can be used to represent 0 or more characters as would be displayed to the user (i.e., a
	 * wildcard pattern match operates on displayable character boundaries).
	 * 
	 * @return String current matchFieldValue property value
	 * @exception Exception
	 */
	public String getMatchFieldValue() {

		return this.matchFieldValue;
	} // getMatchFieldValue

	/**
	 * This method sets the X509CredentialFilterEntry.matchFieldValue property value. This property is described as follows:
	 * 
	 * MatchFieldValue specifies the value to compare with the credential attribute (defined in MatchFieldName), to determine if the credential
	 * matches this filter entry. An implementation must convert this string to a DER- encoded string before matching against the values extracted
	 * from credentials at runtime. Note that a wildcard mechanism may be used when MatchFieldName specifies a general character string (for example,
	 * if MatchFieldName=7, 'Subject Name'). MatchFieldValue may contain a wildcard character, '*', in the pattern match specification. For example,
	 * for 'Subject Name', a MatchFieldValue of 'cn=*,ou=engineering,o=foo,c=be' will successfully match a certificate whose subject attribute is
	 * 'cn=JaneDoe,ou=engineering,o=foo,c=be'. A wildcard can be used to represent 0 or more characters as would be displayed to the user (i.e., a
	 * wildcard pattern match operates on displayable character boundaries).
	 * 
	 * @param String
	 *            new matchFieldValue property value
	 * @exception Exception
	 */
	public void setMatchFieldValue(String matchFieldValue) {

		this.matchFieldValue = matchFieldValue;
	} // setMatchFieldValue

} // Class X509CredentialFilterEntry
