<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
	xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0	http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd 
						http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0 	http://aries.apache.org/schemas/blueprint-cm/blueprint-cm-1.1.0.xsd">

	<!-- 
	Using update-strategy="none" is a workaround for the issue of 
	having the blueprint container constantly going on and off if using update-strategy="reload",
	as explained here:
	https://mail-archives.apache.org/mod_mbox/karaf-user/201404.mbox/%3C535A2DF6.5080400%40i2cat.net%3E
	
	NOTE: using update-strategy="none" makes opennaas unable to react to changes made to properties 
	-->
    <cm:property-placeholder persistent-id="org.opennaas" update-strategy="none">
  		<cm:default-properties>
            <cm:property name="ws.rest.url" value="/opennaas"/>
        </cm:default-properties> 
   	</cm:property-placeholder>

	<!-- Register OpenNaaS OSGi Services & Beans -->

	<bean id="dataSourceSecurity" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="org.hsqldb.jdbcDriver" />
		<property name="url"
			value="jdbc:hsqldb:file:databases/security/security_db;hsqldb.default_table_type=cached;shutdown=true" />
		<property name="username" value="sa" />
		<property name="password" value="" />
	</bean>

	<service ref="dataSourceSecurity" interface="javax.sql.DataSource">
		<service-properties>
			<entry key="osgi.jndi.service.name" value="jdbc/opennaas-security" />
		</service-properties>
	</service>

	<!-- Workaround for  https://issues.apache.org/jira/browse/ARIES-796:
	Resolve and inject entityManagerFactory and get the entityManager using code in securityEntityManagerFactory. 
	Obtained entityManager is not container managed, then. 
	Given unit MUST already be registered as an OSGi service for this to work. -->
	<reference id="securityEntityManagerFactory" interface="javax.persistence.EntityManagerFactory" filter="(osgi.unit.name=opennaas-security)"/>
	<bean id="securityRepository"
		class="org.opennaas.core.security.persistence.SecurityRepository"
		init-method="init" destroy-method="close">
		<property name="entityManagerFactory" ref="securityEntityManagerFactory" />
	</bean>
	<service ref="securityRepository" interface="org.opennaas.core.security.persistence.SecurityRepository" />

</blueprint>
