<?xml version="1.0" encoding="UTF-8"?>
<!--
		Licensed to the Apache Software Foundation (ASF) under one or more
		contributor license agreements. See the NOTICE file distributed with
		this work for additional information regarding copyright ownership.
		The ASF licenses this file to You under the Apache License, Version
		2.0 (the "License"); you may not use this file except in compliance
		with the License. You may obtain a copy of the License at

		http://www.apache.org/licenses/LICENSE-2.0 Unless required by
		applicable law or agreed to in writing, software distributed under the
		License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
		CONDITIONS OF ANY KIND, either express or implied. See the License for
		the specific language governing permissions and limitations under the
		License.
	-->
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0">
	<!-- Build the bootstrapper -->
	<bean id="quantumresourceBootstrapperFactory" class="org.opennaas.extensions.quantum.repository.QuantumResourceBootstrapperFactory"/>
	
    <bean id="resourceDescriptorRepository"
          class="org.opennaas.core.resources.descriptor.ResourceDescriptorRepository"
          init-method="initializeEntityManager" destroy-method="close">
         <property name="persistenceUnit" value="ResourceCore"/>
    </bean>
    
	<bean id="quantumresourceRepository" class="org.opennaas.extensions.quantum.repository.QuantumResourceRepository" init-method="init">
		<argument value="quantumresource"/>
		<property name="resourceDescriptorRepository" ref="resourceDescriptorRepository"/>
		<property name="resourceBootstrapperFactory" ref="quantumresourceBootstrapperFactory"/>
	</bean>
	
	<!-- Get capability factories from the OSGi registry -->
	<reference-list id="capabilityFactory" interface="org.opennaas.core.resources.capability.ICapabilityFactory" availability="optional">
		<reference-listener ref="quantumresourceRepository" bind-method="capabilityFactoryAdded" unbind-method="capabilityFactoryDeleted"/>
	</reference-list>
	
	<service ref="quantumresourceRepository" interface="org.opennaas.core.resources.IResourceRepository">
		<service-properties>
			<entry key="type" value="quantumresource"/>
			<entry key="version" value="1.0.0"/>
		</service-properties>
	</service>
	
	<!-- Forces this bundle to wait for dataSourceResources being published -->
	<reference id="dataSourceResources" interface="javax.sql.DataSource" filter="(osgi.jndi.service.name=jdbc/opennaas-resources)"/>	

	<!-- Factory that creates protocol capabilities -->
	<bean id="quantumAPIV2CapabilityFactory" class="org.opennaas.extensions.quantum.capability.apiv2.QuantumAPIV2CapabilityFactory">
		<property name="type" value="quantum-apiv2"/>
	</bean>
	
	
	<!-- Register the Service as an OSGi Service -->
	<service ref="quantumAPIV2CapabilityFactory" interface="org.opennaas.core.resources.capability.ICapabilityFactory">
		<service-properties>
			<entry key="capability" value="quantum-apiv2"/>
			<entry key="capability.version" value="1.0"/>
		</service-properties>
	</service>
	
	<!-- Command completers -->
	<reference id="resourceNameCompleter" interface="org.apache.karaf.shell.console.Completer" filter="(completer.name=resourceNameCompleter)"/>
	
	<!-- Provide commands to the Karaf shell 
	<command-bundle xmlns="http://karaf.apache.org/xmlns/shell/v1.0.0">
		<command name="example/sayHello">
			<action class="org.opennaas.extensions.quantum.capability.example.shell.ExampleCommand"/>
			<completers>
				<ref component-id="resourceNameCompleter"/>
				<null/>
			</completers>
		</command>
	</command-bundle>
	-->
</blueprint>
