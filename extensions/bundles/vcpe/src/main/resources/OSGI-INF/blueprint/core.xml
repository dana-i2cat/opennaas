<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0">
	
	<!-- Build capability factories -->
	<bean id="vcpeBuilderCapabilityFactory" class="org.opennaas.extensions.vcpe.capability.builder.VCPENetworkBuilderFactory">
		<property name="type" value="vcpenet_builder"/>
	</bean>
	<!-- Build the bootstrapper -->
	<bean id="vCPENetBootstrapperFactory" class="org.opennaas.extensions.vcpe.repository.VCPENetBootstrapperFactory"/>
    <bean id="resourceDescriptorRepository"
          class="org.opennaas.core.resources.descriptor.ResourceDescriptorRepository"
          init-method="initializeEntityManager" destroy-method="close">
         <property name="persistenceUnit" value="ResourceCore"/>
    </bean>
   
    <!-- Build the repository -->
	<bean id="vCPENetRepository" class="org.opennaas.extensions.vcpe.repository.VCPENetRepository"
          init-method="init">
		<argument value="vcpenet"/>
		<property name="resourceDescriptorRepository" ref="resourceDescriptorRepository"/>
		<property name="resourceBootstrapperFactory" ref="vCPENetBootstrapperFactory"/>
	</bean>

	<!--
	    Register VCPENetworkManager as OSGi Service
	  -->		
	<bean id="vcpeNetworkManager" class="org.opennaas.extensions.vcpe.manager.VCPENetworkManager"/>
	<service ref="vcpeNetworkManager" interface="org.opennaas.extensions.vcpe.manager.IVCPENetworkManager">
		<service-properties>
			<!-- Rest -->	
			<entry key="service.exported.interfaces" value="*"/>
			<entry key="service.exported.configs" value="org.apache.cxf.rs"/>
			<entry key="service.exported.intents" value="HTTP"/>		
			<entry key="org.apache.cxf.ws.address" value="http://localhost:8888/opennaas/vcpenetwork"/>  
		</service-properties>
	</service>

	<!-- Publish capability factories as an OSGi Service -->
	<service ref="vcpeBuilderCapabilityFactory" interface="org.opennaas.core.resources.capability.ICapabilityFactory">
		<service-properties>
			<entry key="capability" value="vcpenet_builder"/>
			<entry key="capability.version" value="1.0.0"/>
		</service-properties>
	</service>
	
	<!-- Make repo a listener of published capability factories -->
	<reference-list id="capabilityFactory" interface="org.opennaas.core.resources.capability.ICapabilityFactory" availability="optional">
		<reference-listener ref="vCPENetRepository" bind-method="capabilityFactoryAdded" unbind-method="capabilityFactoryDeleted"/>
	</reference-list>
	
	<!-- Publish repository -->
	<service ref="vCPENetRepository" interface="org.opennaas.core.resources.IResourceRepository">
		<service-properties>
			<entry key="type" value="vcpenet"/>
			<entry key="version" value="1.0.0"/>
		</service-properties>
	</service>
		
	<!-- Command completers -->
	<reference id="resourceNameCompleter" interface="org.apache.karaf.shell.console.Completer" filter="(completer.name=resourceNameCompleter)"/>
	
	<!-- Provide commands to the Karaf shell -->
	<command-bundle xmlns="http://karaf.apache.org/xmlns/shell/v1.0.0">
		<command name="vcpenet/create">
			<action class="org.opennaas.extensions.vcpe.capability.builder.shell.CreateVCPEScenarioCommand"/>
			<completers>
				<ref component-id="resourceNameCompleter"/>
				<null/>
			</completers>
		</command>
		<command name="vcpenet/destroy">
			<action class="org.opennaas.extensions.vcpe.capability.builder.shell.DestroyVCPEScenarioCommand"/>
			<completers>
				<ref component-id="resourceNameCompleter"/>
				<null/>
			</completers>
		</command>
	</command-bundle>

	
	<!-- Forces this bundle to wait for dataSourceResources being published -->
	<reference id="dataSourceResources" interface="javax.sql.DataSource" filter="(osgi.jndi.service.name=jdbc/opennaas-resources)"/>
</blueprint>