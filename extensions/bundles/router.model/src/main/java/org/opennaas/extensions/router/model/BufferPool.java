/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class BufferPool as well as methods comparable to the
 * invokeMethods defined for this class. This Class implements the BufferPoolBean Interface. The CIM class BufferPool is described as follows:
 * 
 * This class represents the use of buffers by a Queuing Service. The existence and management of individual buffers will be modeled in a future
 * release. At the current level of abstraction, modeling the existence of the BufferPool is necessary. Long term, it is not sufficient. In
 * implementations where there are multiple buffer sizes, an instance of BufferPool should be defined for each set of buffers with identical or
 * similar sizes. These instances of buffer pools can then be grouped together using the CollectedBuffersPool association. Note that this class is
 * derived from CollectionOfMSEs, and not from Forwarding or ConditioningService. BufferPool is only a collection of storage, and is NOT a Service.
 */
public class BufferPool extends CollectionOfMSEs implements Serializable {

	/**
	 * This constructor creates a BufferPoolBeanImpl Class which implements the BufferPoolBean Interface, and encapsulates the CIM class BufferPool in
	 * a Java Bean. The CIM class BufferPool is described as follows:
	 * 
	 * This class represents the use of buffers by a Queuing Service. The existence and management of individual buffers will be modeled in a future
	 * release. At the current level of abstraction, modeling the existence of the BufferPool is necessary. Long term, it is not sufficient. In
	 * implementations where there are multiple buffer sizes, an instance of BufferPool should be defined for each set of buffers with identical or
	 * similar sizes. These instances of buffer pools can then be grouped together using the CollectedBuffersPool association. Note that this class is
	 * derived from CollectionOfMSEs, and not from Forwarding or ConditioningService. BufferPool is only a collection of storage, and is NOT a
	 * Service.
	 */
	public BufferPool() {
	};

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property collectionID.
	 */
	private String	collectionID;

	/**
	 * This method returns the BufferPool.collectionID property value. This property is described as follows:
	 * 
	 * This property is defined in the CollectionOfMSEs class, but is overridden here to serve as part of the (composite) key that identifies the
	 * BufferPool instance.
	 * 
	 * @return String current collectionID property value
	 * @exception Exception
	 */
	@Override
	public String getCollectionID() {

		return this.collectionID;
	} // getCollectionID

	/**
	 * This method sets the BufferPool.collectionID property value. This property is described as follows:
	 * 
	 * This property is defined in the CollectionOfMSEs class, but is overridden here to serve as part of the (composite) key that identifies the
	 * BufferPool instance.
	 * 
	 * @param String
	 *            new collectionID property value
	 * @exception Exception
	 */
	@Override
	public void setCollectionID(String collectionID) {

		this.collectionID = collectionID;
	} // setCollectionID

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property creationClassName.
	 */
	private String	creationClassName;

	/**
	 * This method returns the BufferPool.creationClassName property value. This property is described as follows:
	 * 
	 * CreationClassName indicates the name of the class or the subclass used in the creation of an instance. When used with the other key properties
	 * of this class, this property allows all instances of this class and its subclasses to be uniquely identified.
	 * 
	 * @return String current creationClassName property value
	 * @exception Exception
	 */
	public String getCreationClassName() {

		return this.creationClassName;
	} // getCreationClassName

	/**
	 * This method sets the BufferPool.creationClassName property value. This property is described as follows:
	 * 
	 * CreationClassName indicates the name of the class or the subclass used in the creation of an instance. When used with the other key properties
	 * of this class, this property allows all instances of this class and its subclasses to be uniquely identified.
	 * 
	 * @param String
	 *            new creationClassName property value
	 * @exception Exception
	 */
	public void setCreationClassName(String creationClassName) {

		this.creationClassName = creationClassName;
	} // setCreationClassName

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property name.
	 */
	private String	name;

	/**
	 * This method returns the BufferPool.name property value. This property is described as follows:
	 * 
	 * The Name property defines the label by which the object is known.
	 * 
	 * @return String current name property value
	 * @exception Exception
	 */
	public String getName() {

		return this.name;
	} // getName

	/**
	 * This method sets the BufferPool.name property value. This property is described as follows:
	 * 
	 * The Name property defines the label by which the object is known.
	 * 
	 * @param String
	 *            new name property value
	 * @exception Exception
	 */
	public void setName(String name) {

		this.name = name;
	} // setName

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property bufferSize.
	 */
	@Deprecated
	private int	bufferSize;

	/**
	 * This method returns the BufferPool.bufferSize property value. This property is described as follows:
	 * 
	 * This property is a 16-bit unsigned integer, and defines the number of bytes in each buffer. It is deprecated in lieu of a similar uint32
	 * property.
	 * 
	 * @return int current bufferSize property value
	 * @exception Exception
	 */
	@Deprecated
	public int getBufferSize() {

		return this.bufferSize;
	} // getBufferSize

	/**
	 * This method sets the BufferPool.bufferSize property value. This property is described as follows:
	 * 
	 * This property is a 16-bit unsigned integer, and defines the number of bytes in each buffer. It is deprecated in lieu of a similar uint32
	 * property.
	 * 
	 * @param int new bufferSize property value
	 * @exception Exception
	 */
	@Deprecated
	public void setBufferSize(int bufferSize) {

		this.bufferSize = bufferSize;
	} // setBufferSize

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property sizeOfBuffers.
	 */
	private long	sizeOfBuffers;

	/**
	 * This method returns the BufferPool.sizeOfBuffers property value. This property is described as follows:
	 * 
	 * This property is a 32-bit unsigned integer, and defines the number of bytes in each buffer.
	 * 
	 * @return long current sizeOfBuffers property value
	 * @exception Exception
	 */
	public long getSizeOfBuffers() {

		return this.sizeOfBuffers;
	} // getSizeOfBuffers

	/**
	 * This method sets the BufferPool.sizeOfBuffers property value. This property is described as follows:
	 * 
	 * This property is a 32-bit unsigned integer, and defines the number of bytes in each buffer.
	 * 
	 * @param long new sizeOfBuffers property value
	 * @exception Exception
	 */
	public void setSizeOfBuffers(long sizeOfBuffers) {

		this.sizeOfBuffers = sizeOfBuffers;
	} // setSizeOfBuffers

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property totalBuffers.
	 */
	private long	totalBuffers;

	/**
	 * This method returns the BufferPool.totalBuffers property value. This property is described as follows:
	 * 
	 * This property is a 32-bit unsigned integer, and defines the total number of buffers in the Pool.
	 * 
	 * @return long current totalBuffers property value
	 * @exception Exception
	 */
	public long getTotalBuffers() {

		return this.totalBuffers;
	} // getTotalBuffers

	/**
	 * This method sets the BufferPool.totalBuffers property value. This property is described as follows:
	 * 
	 * This property is a 32-bit unsigned integer, and defines the total number of buffers in the Pool.
	 * 
	 * @param long new totalBuffers property value
	 * @exception Exception
	 */
	public void setTotalBuffers(long totalBuffers) {

		this.totalBuffers = totalBuffers;
	} // setTotalBuffers

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property availableBuffers.
	 */
	private long	availableBuffers;

	/**
	 * This method returns the BufferPool.availableBuffers property value. This property is described as follows:
	 * 
	 * This property is a 32-bit unsigned integer, and defines the number of buffers in the Pool that are currently not allocated to any instance of a
	 * QueuingService. Buffers allocated to a QueuingService could either be in use (containing packet data), or allocated to a Queue pending the
	 * arrival of new packet data.
	 * 
	 * @return long current availableBuffers property value
	 * @exception Exception
	 */
	public long getAvailableBuffers() {

		return this.availableBuffers;
	} // getAvailableBuffers

	/**
	 * This method sets the BufferPool.availableBuffers property value. This property is described as follows:
	 * 
	 * This property is a 32-bit unsigned integer, and defines the number of buffers in the Pool that are currently not allocated to any instance of a
	 * QueuingService. Buffers allocated to a QueuingService could either be in use (containing packet data), or allocated to a Queue pending the
	 * arrival of new packet data.
	 * 
	 * @param long new availableBuffers property value
	 * @exception Exception
	 */
	public void setAvailableBuffers(long availableBuffers) {

		this.availableBuffers = availableBuffers;
	} // setAvailableBuffers

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property sharedBuffers.
	 */
	private long	sharedBuffers;

	/**
	 * This method returns the BufferPool.sharedBuffers property value. This property is described as follows:
	 * 
	 * This property is a 32-bit unsigned integer, and defines the number of buffers in the Pool that have been simultaneously allocated to multiple
	 * instances of QueuingService.
	 * 
	 * @return long current sharedBuffers property value
	 * @exception Exception
	 */
	public long getSharedBuffers() {

		return this.sharedBuffers;
	} // getSharedBuffers

	/**
	 * This method sets the BufferPool.sharedBuffers property value. This property is described as follows:
	 * 
	 * This property is a 32-bit unsigned integer, and defines the number of buffers in the Pool that have been simultaneously allocated to multiple
	 * instances of QueuingService.
	 * 
	 * @param long new sharedBuffers property value
	 * @exception Exception
	 */
	public void setSharedBuffers(long sharedBuffers) {

		this.sharedBuffers = sharedBuffers;
	} // setSharedBuffers

} // Class BufferPool
