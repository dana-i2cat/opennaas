/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.*;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class NextService as well as methods comparable to the
 * invokeMethods defined for this class. This Class implements the NextServiceBean Interface. The CIM class NextService is described as follows:
 * 
 * NextService establishes a predecessor-successor relationship between two ConditioningService objects. This association is used to indicate the
 * sequence of ConditioningServices required to process a particular type of traffic. Instances describe the various relationships between different
 * ConditioningServices (such as classifiers, meters, droppers, etc.) that are used collectively to condition traffic. Both one-to-one and more
 * complicated fan-in and/or fan-out relationships can be described. The Conditioning Services may feed one another directly, or they may be mapped to
 * multiple 'next' Services based on the characteristics of the packet.
 */
public class NextService extends Association implements Serializable {

	/**
	 * This constructor creates a NextServiceBeanImpl Class which implements the NextServiceBean Interface, and encapsulates the CIM class NextService
	 * in a Java Bean. The CIM class NextService is described as follows:
	 * 
	 * NextService establishes a predecessor-successor relationship between two ConditioningService objects. This association is used to indicate the
	 * sequence of ConditioningServices required to process a particular type of traffic. Instances describe the various relationships between
	 * different ConditioningServices (such as classifiers, meters, droppers, etc.) that are used collectively to condition traffic. Both one-to-one
	 * and more complicated fan-in and/or fan-out relationships can be described. The Conditioning Services may feed one another directly, or they may
	 * be mapped to multiple 'next' Services based on the characteristics of the packet.
	 */
	public NextService() {
	};

	/**
	 * This method create an Association of the type NextService between one ConditioningService object and ConditioningService object
	 */
	public static NextService link(ConditioningService
			precedingService, ConditioningService followingService) {

		return (NextService) Association.link(NextService.class, precedingService, followingService);
	}// link

} // Class NextService
