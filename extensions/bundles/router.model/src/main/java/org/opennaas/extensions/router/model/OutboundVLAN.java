/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class OutboundVLAN as well as methods comparable to the
 * invokeMethods defined for this class. This Class implements the OutboundVLANBean Interface. The CIM class OutboundVLAN is described as follows:
 * 
 * This class is deprecated in lieu or not being necessary to indicate whether the VLAN is inbound/outbound This association makes explicit the
 * operational dependencies of a SwitchPort when operating in a VLAN. If there is no instance of OutboundVLAN between a given SwitchPort and VLAN,
 * then any packet that has been assigned to the VLAN and whose destination address is associated with the port will be dropped by the switch without
 * being transmitted. Otherwise, the packet will be transmitted.
 */
@Deprecated
public class OutboundVLAN extends SAPSAPDependency implements Serializable {

	/**
	 * This constructor creates a OutboundVLANBeanImpl Class which implements the OutboundVLANBean Interface, and encapsulates the CIM class
	 * OutboundVLAN in a Java Bean. The CIM class OutboundVLAN is described as follows:
	 * 
	 * This class is deprecated in lieu or not being necessary to indicate whether the VLAN is inbound/outbound This association makes explicit the
	 * operational dependencies of a SwitchPort when operating in a VLAN. If there is no instance of OutboundVLAN between a given SwitchPort and VLAN,
	 * then any packet that has been assigned to the VLAN and whose destination address is associated with the port will be dropped by the switch
	 * without being transmitted. Otherwise, the packet will be transmitted.
	 */
	public OutboundVLAN() {
	};

	/**
	 * This method create an Association of the type OutboundVLAN between one VLAN object and SwitchPort object
	 */
	@Deprecated
	public static OutboundVLAN link(VLAN antecedent, SwitchPort dependent) {

		return (OutboundVLAN) Association.link(OutboundVLAN.class, antecedent, dependent);
	}// link

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property tagged.
	 */
	@Deprecated
	private boolean	tagged;

	/**
	 * This method returns the OutboundVLAN.tagged property value. This property is described as follows:
	 * 
	 * If Tagged is TRUE, then the packet will be transmitted in encapsulated form, tagged with the associated VLAN tag. If Tagged is FALSE, the
	 * packet will be trasmitted without any VLAN tag.
	 * 
	 * @return boolean current tagged property value
	 * @exception Exception
	 */
	@Deprecated
	public boolean isTagged() {

		return this.tagged;
	} // getTagged

	/**
	 * This method sets the OutboundVLAN.tagged property value. This property is described as follows:
	 * 
	 * If Tagged is TRUE, then the packet will be transmitted in encapsulated form, tagged with the associated VLAN tag. If Tagged is FALSE, the
	 * packet will be trasmitted without any VLAN tag.
	 * 
	 * @param boolean new tagged property value
	 * @exception Exception
	 */
	@Deprecated
	public void setTagged(boolean tagged) {

		this.tagged = tagged;
	} // setTagged

} // Class OutboundVLAN
