/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class LANEndpoint as well as methods comparable to the
 * invokeMethods defined for this class. This Class implements the LANEndpointBean Interface. The CIM class LANEndpoint is described as follows:
 * 
 * A communication endpoint which, when its associated interface device is connected to a LAN, may send and receive data frames. LANEndpoints include
 * Ethernet, Token Ring and FDDI interfaces.
 */
public class LANEndpoint extends ProtocolEndpoint implements Serializable {

	/**
	 * This constructor creates a LANEndpointBeanImpl Class which implements the LANEndpointBean Interface, and encapsulates the CIM class LANEndpoint
	 * in a Java Bean. The CIM class LANEndpoint is described as follows:
	 * 
	 * A communication endpoint which, when its associated interface device is connected to a LAN, may send and receive data frames. LANEndpoints
	 * include Ethernet, Token Ring and FDDI interfaces.
	 */
	public LANEndpoint() {
	};

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property lANID.
	 */
	private String	lANID;

	/**
	 * This method returns the LANEndpoint.lANID property value. This property is described as follows:
	 * 
	 * A label or identifier for the LAN Segment to which the Endpoint is connected. If the Endpoint is not currently active/connected or this
	 * information is not known, then LANID is NULL.
	 * 
	 * @return String current lANID property value
	 * @exception Exception
	 */
	public String getLANID() {

		return this.lANID;
	} // getLANID

	/**
	 * This method sets the LANEndpoint.lANID property value. This property is described as follows:
	 * 
	 * A label or identifier for the LAN Segment to which the Endpoint is connected. If the Endpoint is not currently active/connected or this
	 * information is not known, then LANID is NULL.
	 * 
	 * @param String
	 *            new lANID property value
	 * @exception Exception
	 */
	public void setLANID(String lANID) {

		this.lANID = lANID;
	} // setLANID

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property LANType.
	 */
	@Deprecated
	public enum LANType {
		UNKNOWN,
		OTHER,
		ETHERNET,
		TOKENRING,
		FDDI
	}

	@Deprecated
	private LANType	lANType;

	/**
	 * This method returns the LANEndpoint.lANType property value. This property is described as follows:
	 * 
	 * An indication of the kind of technology used on the LAN. This property is deprecated in lieu of ProtocolType, which is an enumeration inherited
	 * from ProtocolEndpoint and which includes the Values specified here.
	 * 
	 * @return int current lANType property value
	 * @exception Exception
	 */
	@Deprecated
	public LANType getLANType() {

		return this.lANType;
	} // getLANType

	/**
	 * This method sets the LANEndpoint.lANType property value. This property is described as follows:
	 * 
	 * An indication of the kind of technology used on the LAN. This property is deprecated in lieu of ProtocolType, which is an enumeration inherited
	 * from ProtocolEndpoint and which includes the Values specified here.
	 * 
	 * @param int new lANType property value
	 * @exception Exception
	 */
	@Deprecated
	public void setLANType(LANType lANType) {

		this.lANType = lANType;
	} // setLANType

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property otherLANType.
	 */
	@Deprecated
	private String	otherLANType;

	/**
	 * This method returns the LANEndpoint.otherLANType property value. This property is described as follows:
	 * 
	 * A free-form string that describes the type of technology used on the LAN when the value of the LANType property is equal to 1 (i.e., "Other").
	 * This property is deprecated since its purpose overlaps with OtherTypeDescription, which which is inherited from ProtocolEndpoint.
	 * 
	 * @return String current otherLANType property value
	 * @exception Exception
	 */
	@Deprecated
	public String getOtherLANType() {

		return this.otherLANType;
	} // getOtherLANType

	/**
	 * This method sets the LANEndpoint.otherLANType property value. This property is described as follows:
	 * 
	 * A free-form string that describes the type of technology used on the LAN when the value of the LANType property is equal to 1 (i.e., "Other").
	 * This property is deprecated since its purpose overlaps with OtherTypeDescription, which which is inherited from ProtocolEndpoint.
	 * 
	 * @param String
	 *            new otherLANType property value
	 * @exception Exception
	 */
	@Deprecated
	public void setOtherLANType(String otherLANType) {

		this.otherLANType = otherLANType;
	} // setOtherLANType

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property mACAddress.
	 */
	private String	mACAddress;

	/**
	 * This method returns the LANEndpoint.mACAddress property value. This property is described as follows:
	 * 
	 * The principal unicast address used in communication with the LANEndpoint. The MAC address is formatted as twelve hexadecimal digits (e.g.,
	 * "010203040506"), with each pair representing one of the six octets of the MAC address in "canonical" bit order according to RFC 2469.
	 * 
	 * @return String current mACAddress property value
	 * @exception Exception
	 */
	public String getMACAddress() {

		return this.mACAddress;
	} // getMACAddress

	/**
	 * This method sets the LANEndpoint.mACAddress property value. This property is described as follows:
	 * 
	 * The principal unicast address used in communication with the LANEndpoint. The MAC address is formatted as twelve hexadecimal digits (e.g.,
	 * "010203040506"), with each pair representing one of the six octets of the MAC address in "canonical" bit order according to RFC 2469.
	 * 
	 * @param String
	 *            new mACAddress property value
	 * @exception Exception
	 */
	public void setMACAddress(String mACAddress) {

		this.mACAddress = mACAddress;
	} // setMACAddress

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property aliasAddresses.
	 */
	private String[]	aliasAddresses;

	/**
	 * This method returns the LANEndpoint.aliasAddresses property value. This property is described as follows:
	 * 
	 * Other unicast addresses that may be used to communicate with the LANEndpoint.
	 * 
	 * @return String[] current aliasAddresses property value
	 * @exception Exception
	 */
	public String[] getAliasAddresses() {

		return this.aliasAddresses;
	} // getAliasAddresses

	/**
	 * This method sets the LANEndpoint.aliasAddresses property value. This property is described as follows:
	 * 
	 * Other unicast addresses that may be used to communicate with the LANEndpoint.
	 * 
	 * @param String
	 *            [] new aliasAddresses property value
	 * @exception Exception
	 */
	public void setAliasAddresses(String[] aliasAddresses) {

		this.aliasAddresses = aliasAddresses;
	} // setAliasAddresses

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property groupAddresses.
	 */
	private String[]	groupAddresses;

	/**
	 * This method returns the LANEndpoint.groupAddresses property value. This property is described as follows:
	 * 
	 * Multicast addresses to which the LANEndpoint listens.
	 * 
	 * @return String[] current groupAddresses property value
	 * @exception Exception
	 */
	public String[] getGroupAddresses() {

		return this.groupAddresses;
	} // getGroupAddresses

	/**
	 * This method sets the LANEndpoint.groupAddresses property value. This property is described as follows:
	 * 
	 * Multicast addresses to which the LANEndpoint listens.
	 * 
	 * @param String
	 *            [] new groupAddresses property value
	 * @exception Exception
	 */
	public void setGroupAddresses(String[] groupAddresses) {

		this.groupAddresses = groupAddresses;
	} // setGroupAddresses

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property maxDataSize.
	 */
	private long	maxDataSize;

	/**
	 * This method returns the LANEndpoint.maxDataSize property value. This property is described as follows:
	 * 
	 * The largest information field that may be sent or received by the LANEndpoint.
	 * 
	 * @return long current maxDataSize property value
	 * @exception Exception
	 */
	public long getMaxDataSize() {

		return this.maxDataSize;
	} // getMaxDataSize

	/**
	 * This method sets the LANEndpoint.maxDataSize property value. This property is described as follows:
	 * 
	 * The largest information field that may be sent or received by the LANEndpoint.
	 * 
	 * @param long new maxDataSize property value
	 * @exception Exception
	 */
	public void setMaxDataSize(long maxDataSize) {

		this.maxDataSize = maxDataSize;
	} // setMaxDataSize

} // Class LANEndpoint
