/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class Capabilities as well as methods comparable to the
 * invokeMethods defined for this class. This Class implements the CapabilitiesBean Interface. The CIM class Capabilities is described as follows:
 * 
 * Capabilities is an abstract class whose subclasses describe abilities and/or potential for use. For example, one may describe the maximum number of
 * VLANs that can be supported on a system using a subclass of Capabilities. Capabilities are tied to the elements which they describe using the
 * ElementCapabilities association. Note that the cardinality of the ManagedElement reference is Min(1), Max(1). This cardinality mandates the
 * instantiation of the ElementCapabilities association for the referenced instance of Capabilities. ElementCapabilities describes the existence
 * requirements and context for the referenced instance of ManagedElement. Specifically, the ManagedElement MUST exist and provides the context for
 * the Capabilities. Note that Capabilities do not indicate what IS configured or operational, but what CAN or CANNOT exist, be defined or be used.
 * Note that it is possible to describe both supported and excluded abilities and functions (both capabilities and limitations) using this class.
 */
public class Capabilities extends ManagedElement implements Serializable {

	/**
	 * This constructor creates a CapabilitiesBeanImpl Class which implements the CapabilitiesBean Interface, and encapsulates the CIM class
	 * Capabilities in a Java Bean. The CIM class Capabilities is described as follows:
	 * 
	 * Capabilities is an abstract class whose subclasses describe abilities and/or potential for use. For example, one may describe the maximum
	 * number of VLANs that can be supported on a system using a subclass of Capabilities. Capabilities are tied to the elements which they describe
	 * using the ElementCapabilities association. Note that the cardinality of the ManagedElement reference is Min(1), Max(1). This cardinality
	 * mandates the instantiation of the ElementCapabilities association for the referenced instance of Capabilities. ElementCapabilities describes
	 * the existence requirements and context for the referenced instance of ManagedElement. Specifically, the ManagedElement MUST exist and provides
	 * the context for the Capabilities. Note that Capabilities do not indicate what IS configured or operational, but what CAN or CANNOT exist, be
	 * defined or be used. Note that it is possible to describe both supported and excluded abilities and functions (both capabilities and
	 * limitations) using this class.
	 */
	protected Capabilities() {
	};

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property instanceID.
	 */
	private String	instanceID;

	/**
	 * This method returns the Capabilities.instanceID property value. This property is described as follows:
	 * 
	 * Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. In order to ensure
	 * uniqueness within the NameSpace, the value of InstanceID SHOULD be constructed using the following 'preferred' algorithm: <OrgID>:<LocalID>
	 * Where <OrgID> and <LocalID> are separated by a colon ':', and where <OrgID> MUST include a copyrighted, trademarked or otherwise unique name
	 * that is owned by the business entity creating/defining the InstanceID, or is a registered ID that is assigned to the business entity by a
	 * recognized global authority (This is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure
	 * uniqueness <OrgID> MUST NOT contain a colon (':'). When using this algorithm, the first colon to appear in InstanceID MUST appear between
	 * <OrgID> and <LocalID>. <LocalID> is chosen by the business entity and SHOULD not be re-used to identify different underlying (real-world)
	 * elements. If the above 'preferred' algorithm is not used, the defining entity MUST assure that the resultant InstanceID is not re-used across
	 * any InstanceIDs produced by this or other providers for this instance's NameSpace. For DMTF defined instances, the 'preferred' algorithm MUST
	 * be used with the <OrgID> set to 'CIM'.
	 * 
	 * @return String current instanceID property value
	 * @exception Exception
	 */
	@Override
	public String getInstanceID() {

		return this.instanceID;
	} // getInstanceID

	/**
	 * This method sets the Capabilities.instanceID property value. This property is described as follows:
	 * 
	 * Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. In order to ensure
	 * uniqueness within the NameSpace, the value of InstanceID SHOULD be constructed using the following 'preferred' algorithm: <OrgID>:<LocalID>
	 * Where <OrgID> and <LocalID> are separated by a colon ':', and where <OrgID> MUST include a copyrighted, trademarked or otherwise unique name
	 * that is owned by the business entity creating/defining the InstanceID, or is a registered ID that is assigned to the business entity by a
	 * recognized global authority (This is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure
	 * uniqueness <OrgID> MUST NOT contain a colon (':'). When using this algorithm, the first colon to appear in InstanceID MUST appear between
	 * <OrgID> and <LocalID>. <LocalID> is chosen by the business entity and SHOULD not be re-used to identify different underlying (real-world)
	 * elements. If the above 'preferred' algorithm is not used, the defining entity MUST assure that the resultant InstanceID is not re-used across
	 * any InstanceIDs produced by this or other providers for this instance's NameSpace. For DMTF defined instances, the 'preferred' algorithm MUST
	 * be used with the <OrgID> set to 'CIM'.
	 * 
	 * @param String
	 *            new instanceID property value
	 * @exception Exception
	 */
	@Override
	public void setInstanceID(String instanceID) {

		this.instanceID = instanceID;
	} // setInstanceID

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property elementName.
	 */
	private String	elementName;

	/**
	 * This method returns the Capabilities.elementName property value. This property is described as follows:
	 * 
	 * The user friendly name for this instance of Capabilities. In addition, the user friendly name can be used as a index property for a search of
	 * query. (Note: Name does not have to be unique within a namespace.)
	 * 
	 * @return String current elementName property value
	 * @exception Exception
	 */
	@Override
	public String getElementName() {

		return this.elementName;
	} // getElementName

	/**
	 * This method sets the Capabilities.elementName property value. This property is described as follows:
	 * 
	 * The user friendly name for this instance of Capabilities. In addition, the user friendly name can be used as a index property for a search of
	 * query. (Note: Name does not have to be unique within a namespace.)
	 * 
	 * @param String
	 *            new elementName property value
	 * @exception Exception
	 */
	@Override
	public void setElementName(String elementName) {

		this.elementName = elementName;
	} // setElementName

} // Class Capabilities
