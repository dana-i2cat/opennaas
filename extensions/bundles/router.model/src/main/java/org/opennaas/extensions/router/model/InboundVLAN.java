/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class InboundVLAN as well as methods comparable to the
 * invokeMethods defined for this class. This Class implements the InboundVLANBean Interface. The CIM class InboundVLAN is described as follows:
 * 
 * This class is deprecated in lieu or not being necessary to indicate whether the VLAN is inbound/outbound This association makes explicit the
 * operational dependencies of a SwitchPort when operating in a VLAN. If there is an association between a particular SwitchPort and a particular
 * VLAN, then there is the possibility that a packet received by the port will be assigned to the VLAN (or if the packet already has a VLAN tag, that
 * the packet will not be dropped). If there is no such association, then there is NO possibility that a packet received by the port will progress
 * through the switch having been assigned to the referenced VLAN.
 */
@Deprecated
public class InboundVLAN extends SAPSAPDependency implements Serializable {

	/**
	 * This constructor creates a InboundVLANBeanImpl Class which implements the InboundVLANBean Interface, and encapsulates the CIM class InboundVLAN
	 * in a Java Bean. The CIM class InboundVLAN is described as follows:
	 * 
	 * This class is deprecated in lieu or not being necessary to indicate whether the VLAN is inbound/outbound This association makes explicit the
	 * operational dependencies of a SwitchPort when operating in a VLAN. If there is an association between a particular SwitchPort and a particular
	 * VLAN, then there is the possibility that a packet received by the port will be assigned to the VLAN (or if the packet already has a VLAN tag,
	 * that the packet will not be dropped). If there is no such association, then there is NO possibility that a packet received by the port will
	 * progress through the switch having been assigned to the referenced VLAN.
	 */
	public InboundVLAN() {
	};

	/**
	 * This method create an Association of the type InboundVLAN between one VLAN object and SwitchPort object
	 */
	@Deprecated
	public static InboundVLAN link(VLAN antecedent, SwitchPort dependent) {

		return (InboundVLAN) Association.link(InboundVLAN.class, antecedent, dependent);
	}// link

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property tagged.
	 */
	@Deprecated
	private boolean	tagged;

	/**
	 * This method returns the InboundVLAN.tagged property value. This property is described as follows:
	 * 
	 * If TRUE, packets already tagged with this VLAN number will be accepted when arriving at this port. For example, if there is an InboundVLAN
	 * association between port 12 and VLAN 7 for which Tagged is true, then when a packet tagged with VLAN 7 arrives at port 12, the packet will be
	 * accepted into the switch for further processing. If there is no such association, then the packet will be dropped. If FALSE, it means that any
	 * untagged packets arriving at this port MIGHT be classified into the associated VLAN. If, for a particular SwitchPort, there is only one
	 * instance of the association for which Tagged is FALSE, then all incoming untagged packets will be classified into that VLAN. This is the
	 * typical configuration of a non-trunk port in a switch implementing port-based VLANs. If there is more than one such association instance, then
	 * the packet MIGHT be classified into any one of them, based on some criterion other than the identity of the switch port. For example, in a
	 * MAC-based VLAN switch, the decision would be based on the source MAC address. In a protocol-based VLAN switch, the decision would be based on
	 * the values of some set of bits in the packet. Note that the MAC address is formatted as twelve hexadecimal digits (e.g., "010203040506"), with
	 * each pair representing one of the six octets of the MAC address in "canonical" bit order according to RFC 2469.
	 * 
	 * @return boolean current tagged property value
	 * @exception Exception
	 */
	@Deprecated
	public boolean isTagged() {

		return this.tagged;
	} // getTagged

	/**
	 * This method sets the InboundVLAN.tagged property value. This property is described as follows:
	 * 
	 * If TRUE, packets already tagged with this VLAN number will be accepted when arriving at this port. For example, if there is an InboundVLAN
	 * association between port 12 and VLAN 7 for which Tagged is true, then when a packet tagged with VLAN 7 arrives at port 12, the packet will be
	 * accepted into the switch for further processing. If there is no such association, then the packet will be dropped. If FALSE, it means that any
	 * untagged packets arriving at this port MIGHT be classified into the associated VLAN. If, for a particular SwitchPort, there is only one
	 * instance of the association for which Tagged is FALSE, then all incoming untagged packets will be classified into that VLAN. This is the
	 * typical configuration of a non-trunk port in a switch implementing port-based VLANs. If there is more than one such association instance, then
	 * the packet MIGHT be classified into any one of them, based on some criterion other than the identity of the switch port. For example, in a
	 * MAC-based VLAN switch, the decision would be based on the source MAC address. In a protocol-based VLAN switch, the decision would be based on
	 * the values of some set of bits in the packet. Note that the MAC address is formatted as twelve hexadecimal digits (e.g., "010203040506"), with
	 * each pair representing one of the six octets of the MAC address in "canonical" bit order according to RFC 2469.
	 * 
	 * @param boolean new tagged property value
	 * @exception Exception
	 */
	@Deprecated
	public void setTagged(boolean tagged) {

		this.tagged = tagged;
	} // setTagged

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property _default.
	 */
	@Deprecated
	private boolean	_default;

	/**
	 * This method returns the InboundVLAN._default property value. This property is described as follows:
	 * 
	 * Default should be TRUE if untagged packets received by the SwitchPort are assigned to the VLAN. For 802.1Q-compliant ports, the Default
	 * property should be TRUE on the association instance connecting a SwitchPort to the VLAN corresponding to the port's PVID. Default MUST never be
	 * TRUE if Tagged is true -- it applies only to untagged packets.
	 * 
	 * @return boolean current _default property value
	 * @exception Exception
	 */
	@Deprecated
	public boolean isDefault() {

		return this._default;
	} // getDefault

	/**
	 * This method sets the InboundVLAN._default property value. This property is described as follows:
	 * 
	 * Default should be TRUE if untagged packets received by the SwitchPort are assigned to the VLAN. For 802.1Q-compliant ports, the Default
	 * property should be TRUE on the association instance connecting a SwitchPort to the VLAN corresponding to the port's PVID. Default MUST never be
	 * TRUE if Tagged is true -- it applies only to untagged packets.
	 * 
	 * @param boolean new _default property value
	 * @exception Exception
	 */
	@Deprecated
	public void setDefault(boolean _default) {

		this._default = _default;
	} // setDefault

} // Class InboundVLAN
