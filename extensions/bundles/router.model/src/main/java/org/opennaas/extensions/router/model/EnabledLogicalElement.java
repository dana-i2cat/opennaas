/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.Serializable;
import java.util.Date;

import javax.xml.bind.annotation.XmlSeeAlso;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class EnabledLogicalElement as well as methods comparable to
 * the invokeMethods defined for this class. This Class implements the EnabledLogicalElementBean Interface. The CIM class EnabledLogicalElement is
 * described as follows:
 * 
 * This class extends LogicalElement to abstract the concept of an element that is enabled and disabled, such as a LogicalDevice or a
 * ServiceAccessPoint.
 */
@XmlSeeAlso({
		ServiceAccessPoint.class
})
public class EnabledLogicalElement extends LogicalElement implements
		Serializable {

	/**
	 * 
	 */
	private static final long	serialVersionUID	= 6626174356716679399L;

	/**
	 * This constructor creates a EnabledLogicalElementBeanImpl Class which implements the EnabledLogicalElementBean Interface, and encapsulates the
	 * CIM class EnabledLogicalElement in a Java Bean. The CIM class EnabledLogicalElement is described as follows:
	 * 
	 * This class extends LogicalElement to abstract the concept of an element that is enabled and disabled, such as a LogicalDevice or a
	 * ServiceAccessPoint.
	 */
	protected EnabledLogicalElement() {
	};

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property EnabledState.
	 */

	public enum EnabledState {
		UNKNOWN,
		OTHER,
		ENABLED,
		DISABLED,
		SHUTTING_DOWN,
		NOT_APPLICABLE,
		ENABLED_BUT_OFFLINE,
		IN_TEST,
		DEFERRED,
		QUIESCE,
		STARTING,
		DMTF_RESERVED,
		VENDOR_RESERVED
	}

	private EnabledState	enabledState;

	/**
	 * This method returns the EnabledLogicalElement.enabledState property value. This property is described as follows:
	 * 
	 * EnabledState is an integer enumeration that indicates the enabled and disabled states of an element. It can also indicate the transitions
	 * between these requested states. For example, shutting down (value=4) and starting (value=10) are transient states between enabled and disabled.
	 * The following text briefly summarizes the various enabled and disabled states: Enabled (2) indicates that the element is or could be executing
	 * commands, will process any queued commands, and queues new requests. Disabled (3) indicates that the element will not execute commands and will
	 * drop any new requests. Shutting Down (4) indicates that the element is in the process of going to a Disabled state. Not Applicable (5)
	 * indicates the element does not support being enabled or disabled. Enabled but Offline (6) indicates that the element might be completing
	 * commands, and will drop any new requests. Test (7) indicates that the element is in a test state. Deferred (8) indicates that the element might
	 * be completing commands, but will queue any new requests. Quiesce (9) indicates that the element is enabled but in a restricted mode. Starting
	 * (10) indicates that the element is in the process of going to an Enabled state. New requests are queued.
	 * 
	 * @return int current enabledState property value
	 * @exception Exception
	 */
	public EnabledState getEnabledState() {

		return this.enabledState;
	} // getEnabledState

	/**
	 * This method sets the EnabledLogicalElement.enabledState property value. This property is described as follows:
	 * 
	 * EnabledState is an integer enumeration that indicates the enabled and disabled states of an element. It can also indicate the transitions
	 * between these requested states. For example, shutting down (value=4) and starting (value=10) are transient states between enabled and disabled.
	 * The following text briefly summarizes the various enabled and disabled states: Enabled (2) indicates that the element is or could be executing
	 * commands, will process any queued commands, and queues new requests. Disabled (3) indicates that the element will not execute commands and will
	 * drop any new requests. Shutting Down (4) indicates that the element is in the process of going to a Disabled state. Not Applicable (5)
	 * indicates the element does not support being enabled or disabled. Enabled but Offline (6) indicates that the element might be completing
	 * commands, and will drop any new requests. Test (7) indicates that the element is in a test state. Deferred (8) indicates that the element might
	 * be completing commands, but will queue any new requests. Quiesce (9) indicates that the element is enabled but in a restricted mode. Starting
	 * (10) indicates that the element is in the process of going to an Enabled state. New requests are queued.
	 * 
	 * @param int new enabledState property value
	 * @exception Exception
	 */
	public void setEnabledState(EnabledState enabledState) {

		this.enabledState = enabledState;
	} // setEnabledState

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property otherEnabledState.
	 */
	private String	otherEnabledState;

	/**
	 * This method returns the EnabledLogicalElement.otherEnabledState property value. This property is described as follows:
	 * 
	 * A string that describes the enabled or disabled state of the element when the EnabledState property is set to 1 ("Other"). This property must
	 * be set to null when EnabledState is any value other than 1.
	 * 
	 * @return String current otherEnabledState property value
	 * @exception Exception
	 */
	public String getOtherEnabledState() {

		return this.otherEnabledState;
	} // getOtherEnabledState

	/**
	 * This method sets the EnabledLogicalElement.otherEnabledState property value. This property is described as follows:
	 * 
	 * A string that describes the enabled or disabled state of the element when the EnabledState property is set to 1 ("Other"). This property must
	 * be set to null when EnabledState is any value other than 1.
	 * 
	 * @param String
	 *            new otherEnabledState property value
	 * @exception Exception
	 */
	public void setOtherEnabledState(String otherEnabledState) {

		this.otherEnabledState = otherEnabledState;
	} // setOtherEnabledState

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property RequestedState.
	 */

	public enum RequestedState {
		UNKNOWN,
		ENABLED,
		DISABLED,
		SHUT_DOWN,
		NO_CHANGE,
		OFFLINE,
		TEST,
		DEFERRED,
		QUIESCE,
		REBOOT,
		RESET,
		NOT_APPLICABLE,
		DMTF_RESERVED,
		VENDOR_RESERVED
	}

	private RequestedState	requestedState;

	/**
	 * This method returns the EnabledLogicalElement.requestedState property value. This property is described as follows:
	 * 
	 * RequestedState is an integer enumeration that indicates the last requested or desired state for the element, irrespective of the mechanism
	 * through which it was requested. The actual state of the element is represented by EnabledState. This property is provided to compare the last
	 * requested and current enabled or disabled states. Note that when EnabledState is set to 5 ("Not Applicable"), then this property has no
	 * meaning. Refer to the EnabledState property description for explanations of the values in the RequestedState enumeration. "Unknown" (0)
	 * indicates the last requested state for the element is unknown. Note that the value "No Change" (5) has been deprecated in lieu of indicating
	 * the last requested state is "Unknown" (0). If the last requested or desired state is unknown, RequestedState should have the value "Unknown"
	 * (0), but may have the value "No Change" (5).Offline (6) indicates that the element has been requested to transition to the Enabled but Offline
	 * EnabledState. It should be noted that there are two new values in RequestedState that build on the statuses of EnabledState. These are "Reboot"
	 * (10) and "Reset" (11). Reboot refers to doing a "Shut Down" and then moving to an "Enabled" state. Reset indicates that the element is first
	 * "Disabled" and then "Enabled". The distinction between requesting "Shut Down" and "Disabled" should also be noted. Shut Down requests an
	 * orderly transition to the Disabled state, and might involve removing power, to completely erase any existing state. The Disabled state requests
	 * an immediate disabling of the element, such that it will not execute or accept any commands or processing requests. This property is set as the
	 * result of a method invocation (such as Start or StopService on CIM_Service), or can be overridden and defined as WRITEable in a subclass. The
	 * method approach is considered superior to a WRITEable property, because it allows an explicit invocation of the operation and the return of a
	 * result code. If knowledge of the last RequestedState is not supported for the EnabledLogicalElement, the property shall be NULL or have the
	 * value 12 "Not Applicable".
	 * 
	 * @return int current requestedState property value
	 * @exception Exception
	 */
	public RequestedState getRequestedState() {

		return this.requestedState;
	} // getRequestedState

	/**
	 * This method sets the EnabledLogicalElement.requestedState property value. This property is described as follows:
	 * 
	 * RequestedState is an integer enumeration that indicates the last requested or desired state for the element, irrespective of the mechanism
	 * through which it was requested. The actual state of the element is represented by EnabledState. This property is provided to compare the last
	 * requested and current enabled or disabled states. Note that when EnabledState is set to 5 ("Not Applicable"), then this property has no
	 * meaning. Refer to the EnabledState property description for explanations of the values in the RequestedState enumeration. "Unknown" (0)
	 * indicates the last requested state for the element is unknown. Note that the value "No Change" (5) has been deprecated in lieu of indicating
	 * the last requested state is "Unknown" (0). If the last requested or desired state is unknown, RequestedState should have the value "Unknown"
	 * (0), but may have the value "No Change" (5).Offline (6) indicates that the element has been requested to transition to the Enabled but Offline
	 * EnabledState. It should be noted that there are two new values in RequestedState that build on the statuses of EnabledState. These are "Reboot"
	 * (10) and "Reset" (11). Reboot refers to doing a "Shut Down" and then moving to an "Enabled" state. Reset indicates that the element is first
	 * "Disabled" and then "Enabled". The distinction between requesting "Shut Down" and "Disabled" should also be noted. Shut Down requests an
	 * orderly transition to the Disabled state, and might involve removing power, to completely erase any existing state. The Disabled state requests
	 * an immediate disabling of the element, such that it will not execute or accept any commands or processing requests. This property is set as the
	 * result of a method invocation (such as Start or StopService on CIM_Service), or can be overridden and defined as WRITEable in a subclass. The
	 * method approach is considered superior to a WRITEable property, because it allows an explicit invocation of the operation and the return of a
	 * result code. If knowledge of the last RequestedState is not supported for the EnabledLogicalElement, the property shall be NULL or have the
	 * value 12 "Not Applicable".
	 * 
	 * @param int new requestedState property value
	 * @exception Exception
	 */
	public void setRequestedState(RequestedState requestedState) {

		this.requestedState = requestedState;
	} // setRequestedState

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property EnabledDefault.
	 */

	public enum EnabledDefault {
		ENABLED,
		DISABLED,
		NOT_APPLICABLE,
		ENABLED_BUT_OFFLINE,
		NO_DEFAULT,
		QUIESCE,
		DMTF_RESERVED,
		VENDOR_RESERVED
	}

	private EnabledDefault	enabledDefault;

	/**
	 * This method returns the EnabledLogicalElement.enabledDefault property value. This property is described as follows:
	 * 
	 * An enumerated value indicating an administrator's default or startup configuration for the Enabled State of an element. By default, the element
	 * is "Enabled" (value=2).
	 * 
	 * @return int current enabledDefault property value
	 * @exception Exception
	 */
	public EnabledDefault getEnabledDefault() {

		return this.enabledDefault;
	} // getEnabledDefault

	/**
	 * This method sets the EnabledLogicalElement.enabledDefault property value. This property is described as follows:
	 * 
	 * An enumerated value indicating an administrator's default or startup configuration for the Enabled State of an element. By default, the element
	 * is "Enabled" (value=2).
	 * 
	 * @param int new enabledDefault property value
	 * @exception Exception
	 */
	public void setEnabledDefault(EnabledDefault enabledDefault) {

		this.enabledDefault = enabledDefault;
	} // setEnabledDefault

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property timeOfLastStateChange.
	 */
	private Date	timeOfLastStateChange;

	/**
	 * This method returns the EnabledLogicalElement.timeOfLastStateChange property value. This property is described as follows:
	 * 
	 * The date or time when the EnabledState of the element last changed. If the state of the element has not changed and this property is populated,
	 * then it must be set to a 0 interval value. If a state change was requested, but rejected or not yet processed, the property must not be
	 * updated.
	 * 
	 * @return Date current timeOfLastStateChange property value
	 * @exception Exception
	 */
	public Date getTimeOfLastStateChange() {

		return this.timeOfLastStateChange;
	} // getTimeOfLastStateChange

	/**
	 * This method sets the EnabledLogicalElement.timeOfLastStateChange property value. This property is described as follows:
	 * 
	 * The date or time when the EnabledState of the element last changed. If the state of the element has not changed and this property is populated,
	 * then it must be set to a 0 interval value. If a state change was requested, but rejected or not yet processed, the property must not be
	 * updated.
	 * 
	 * @param Date
	 *            new timeOfLastStateChange property value
	 * @exception Exception
	 */
	public void setTimeOfLastStateChange(Date timeOfLastStateChange) {

		this.timeOfLastStateChange = timeOfLastStateChange;
	} // setTimeOfLastStateChange

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property AvailableRequestedStates.
	 */

	public enum AvailableRequestedStates {
		ENABLED,
		DISABLED,
		SHUT_DOWN,
		OFFLINE,
		TEST,
		DEFER,
		QUIESCE,
		REBOOT,
		RESET,
		DMTF_RESERVED
	}

	private AvailableRequestedStates	availableRequestedStates;

	/**
	 * This method returns the EnabledLogicalElement.availableRequestedStates property value. This property is described as follows:
	 * 
	 * AvailableRequestedStates indicates the possible values for the RequestedState parameter of the method RequestStateChange, used to initiate a
	 * state change. The values listed shall be a subset of the values contained in the RequestedStatesSupported property of the associated instance
	 * of CIM_EnabledLogicalElementCapabilities where the values selected are a function of the current state of the CIM_EnabledLogicalElement. This
	 * property may be non-null if an implementation is able to advertise the set of possible values as a function of the current state. This property
	 * shall be null if an implementation is unable to determine the set of possible values as a function of the current state.
	 * 
	 * @return int current availableRequestedStates property value
	 * @exception Exception
	 */
	public AvailableRequestedStates getAvailableRequestedStates() {

		return this.availableRequestedStates;
	} // getAvailableRequestedStates

	/**
	 * This method sets the EnabledLogicalElement.availableRequestedStates property value. This property is described as follows:
	 * 
	 * AvailableRequestedStates indicates the possible values for the RequestedState parameter of the method RequestStateChange, used to initiate a
	 * state change. The values listed shall be a subset of the values contained in the RequestedStatesSupported property of the associated instance
	 * of CIM_EnabledLogicalElementCapabilities where the values selected are a function of the current state of the CIM_EnabledLogicalElement. This
	 * property may be non-null if an implementation is able to advertise the set of possible values as a function of the current state. This property
	 * shall be null if an implementation is unable to determine the set of possible values as a function of the current state.
	 * 
	 * @param int new availableRequestedStates property value
	 * @exception Exception
	 */
	public void setAvailableRequestedStates(AvailableRequestedStates
			availableRequestedStates) {

		this.availableRequestedStates = availableRequestedStates;
	} // setAvailableRequestedStates

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property TransitioningToState.
	 */

	public enum TransitioningToState {
		UNKNOWN,
		ENABLED,
		DISABLED,
		SHUT_DOWN,
		NO_CHANGE,
		OFFLINE,
		TEST,
		DEFER,
		QUIESCE,
		REBOOT,
		RESET,
		NOT_APPLICABLE,
		DMTF_RESERVED
	}

	private TransitioningToState	transitioningToState;

	/**
	 * This method returns the EnabledLogicalElement.transitioningToState property value. This property is described as follows:
	 * 
	 * TransitioningToState indicates the target state to which the instance is transitioning. A value of 5 "No Change" shall indicate that no
	 * transition is in progress.A value of 12 "Not Applicable" shall indicate the implementation does not support representing ongoing transitions. A
	 * value other than 5 or 12 shall identify the state to which the element is in the process of transitioning.
	 * 
	 * @return int current transitioningToState property value
	 * @exception Exception
	 */
	public TransitioningToState getTransitioningToState() {

		return this.transitioningToState;
	} // getTransitioningToState

	/**
	 * This method sets the EnabledLogicalElement.transitioningToState property value. This property is described as follows:
	 * 
	 * TransitioningToState indicates the target state to which the instance is transitioning. A value of 5 "No Change" shall indicate that no
	 * transition is in progress.A value of 12 "Not Applicable" shall indicate the implementation does not support representing ongoing transitions. A
	 * value other than 5 or 12 shall identify the state to which the element is in the process of transitioning.
	 * 
	 * @param int new transitioningToState property value
	 * @exception Exception
	 */
	public void setTransitioningToState(TransitioningToState
			transitioningToState) {

		this.transitioningToState = transitioningToState;
	} // setTransitioningToState

} // Class EnabledLogicalElement
