/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class Profile as well as methods comparable to the
 * invokeMethods defined for this class. This Class implements the ProfileBean Interface. The CIM class Profile is described as follows:
 * 
 * Note: The use of CIM_Profile is deprecated in favor of aggregating instances of Setting or SettingData into "higher-level" Settings or SettingData
 * objects using the ConcreteComponent association. This use simplifies the use of Settings or SettingData. With Profiles subclassing from Collection,
 * separate associations were needed between an element and either its Profiles or Settings or SettingData. This class introduced unnecessary
 * complexity and redundancy into the model. Deprecated description: Profile specifies a general collection of Settings or SettingData objects that
 * are logically grouped together. Note: The CIM_Profile class uses simplified naming or identity algorithms and collection algorithms, as compared to
 * CIM_Configuration. The settings are "collected" into the Profile using the MemberOfCollection association. Note that a Profile obtains its setting
 * data and other necessary information from collected Setting and SettingData instances and by the definition of additional properties in subclasses.
 * One example of a Profile is to define the collection of settings for a particular person. Another is to define the collection of settings that are
 * appropriate when initializing a system. Profile is tied to a ManagedElement using the ElementProfile association. The ManagedElement provides the
 * context for the Profile, and the settings collected by Profile should be settings of the associated ManagedElement. Note that a ManagedElement
 * cannot exist when the Profile is instantiated. This situation is important to remember when the Profile is used in the creation of the real-world
 * entity that is represented by (and then instantiated in) the ManagedElement.
 */
@Deprecated
public class Profile extends Collection implements Serializable {

	/**
	 * This constructor creates a ProfileBeanImpl Class which implements the ProfileBean Interface, and encapsulates the CIM class Profile in a Java
	 * Bean. The CIM class Profile is described as follows:
	 * 
	 * Note: The use of CIM_Profile is deprecated in favor of aggregating instances of Setting or SettingData into "higher-level" Settings or
	 * SettingData objects using the ConcreteComponent association. This use simplifies the use of Settings or SettingData. With Profiles subclassing
	 * from Collection, separate associations were needed between an element and either its Profiles or Settings or SettingData. This class introduced
	 * unnecessary complexity and redundancy into the model. Deprecated description: Profile specifies a general collection of Settings or SettingData
	 * objects that are logically grouped together. Note: The CIM_Profile class uses simplified naming or identity algorithms and collection
	 * algorithms, as compared to CIM_Configuration. The settings are "collected" into the Profile using the MemberOfCollection association. Note that
	 * a Profile obtains its setting data and other necessary information from collected Setting and SettingData instances and by the definition of
	 * additional properties in subclasses. One example of a Profile is to define the collection of settings for a particular person. Another is to
	 * define the collection of settings that are appropriate when initializing a system. Profile is tied to a ManagedElement using the ElementProfile
	 * association. The ManagedElement provides the context for the Profile, and the settings collected by Profile should be settings of the
	 * associated ManagedElement. Note that a ManagedElement cannot exist when the Profile is instantiated. This situation is important to remember
	 * when the Profile is used in the creation of the real-world entity that is represented by (and then instantiated in) the ManagedElement.
	 */
	public Profile() {
	};

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property instanceID.
	 */
	@Deprecated
	private String	instanceID;

	/**
	 * This method returns the Profile.instanceID property value. This property is described as follows:
	 * 
	 * Note: The use of this element is deprecated. Deprecated description: Within the scope of the instantiating Namespace, InstanceID opaquely and
	 * uniquely identifies an instance of this class. To ensure uniqueness within the NameSpace, the value of InstanceID should be constructed using
	 * the following "preferred" algorithm: <OrgID>:<LocalID> Where <OrgID> and <LocalID> are separated by a colon (:), and where <OrgID> must include
	 * a copyrighted, trademarked, or otherwise unique name that is owned by the business entity that is creating or defining the InstanceID or that
	 * is a registered ID assigned to the business entity by a recognized global authority. (This requirement is similar to the <Schema Name>_<Class
	 * Name> structure of Schema class names.) In addition, to ensure uniqueness, <OrgID> must not contain a colon (:). When using this algorithm, the
	 * first colon to appear in InstanceID must appear between <OrgID> and <LocalID>. <LocalID> is chosen by the business entity and should not be
	 * reused to identify different underlying (real-world) elements. If the above "preferred" algorithm is not used, the defining entity must assure
	 * that the resulting InstanceID is not reused across any InstanceIDs that are produced by this or other providers for the NameSpace of this
	 * instance. For DMTF-defined instances, the preferred algorithm must be used with the <OrgID> set to CIM.
	 * 
	 * @return String current instanceID property value
	 * @exception Exception
	 */
	@Override
	@Deprecated
	public String getInstanceID() {

		return this.instanceID;
	} // getInstanceID

	/**
	 * This method sets the Profile.instanceID property value. This property is described as follows:
	 * 
	 * Note: The use of this element is deprecated. Deprecated description: Within the scope of the instantiating Namespace, InstanceID opaquely and
	 * uniquely identifies an instance of this class. To ensure uniqueness within the NameSpace, the value of InstanceID should be constructed using
	 * the following "preferred" algorithm: <OrgID>:<LocalID> Where <OrgID> and <LocalID> are separated by a colon (:), and where <OrgID> must include
	 * a copyrighted, trademarked, or otherwise unique name that is owned by the business entity that is creating or defining the InstanceID or that
	 * is a registered ID assigned to the business entity by a recognized global authority. (This requirement is similar to the <Schema Name>_<Class
	 * Name> structure of Schema class names.) In addition, to ensure uniqueness, <OrgID> must not contain a colon (:). When using this algorithm, the
	 * first colon to appear in InstanceID must appear between <OrgID> and <LocalID>. <LocalID> is chosen by the business entity and should not be
	 * reused to identify different underlying (real-world) elements. If the above "preferred" algorithm is not used, the defining entity must assure
	 * that the resulting InstanceID is not reused across any InstanceIDs that are produced by this or other providers for the NameSpace of this
	 * instance. For DMTF-defined instances, the preferred algorithm must be used with the <OrgID> set to CIM.
	 * 
	 * @param String
	 *            new instanceID property value
	 * @exception Exception
	 */
	@Override
	@Deprecated
	public void setInstanceID(String instanceID) {

		this.instanceID = instanceID;
	} // setInstanceID

} // Class Profile
