/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class MethodParameters as well as methods comparable to the
 * invokeMethods defined for this class. This Class implements the MethodParametersBean Interface. The CIM class MethodParameters is described as
 * follows:
 * 
 * CIM_MethodParameters represents a set of values to be used as the parameters of a method. These parameters can be passed to the method, directly
 * used by the method in its invocation, or accessed by the method when it is called. The properties of a concrete subclass of MethodParameters are
 * mapped to the parameters of a method by the method itself or by the method caller. This mapping is an implementation detail that is independent of
 * the definition of the class. For ease of use, property names should match parameter names. Property values should be set before the method is
 * invoked. The ModelCorrespondence qualifier can be used to indicate if the property value should come from the property of another class. The
 * instances that the property values should be gleaned from should be associated with MethodParameters using the Parameter ValueSources association.
 * If the property is declared as an array, then the same property value (identified by the Model Correspondence) will be retrieved from all
 * appropriate ParameterValueSources instances and stored in the array. If the property is declared as an array and the Model Correspondence is to an
 * array property, then only one instance of the array will be copied from one ParameterValueSource. If the property is not declared as an array and
 * there are multiple instances of the class and property associated with it through ModelCorrespondence where the values are not all the same, then
 * an error will occur and the value of the property will not be set. Several MethodParameters instances can be associated with any of the
 * ManagedElement methods. This association allows the maintenance of 'canned' method invocation and reduces the overhead of re-creating all method
 * parameters for every method invocation.
 */
public class MethodParameters extends ManagedElement implements Serializable
{

	/**
	 * This constructor creates a MethodParametersBeanImpl Class which implements the MethodParametersBean Interface, and encapsulates the CIM class
	 * MethodParameters in a Java Bean. The CIM class MethodParameters is described as follows:
	 * 
	 * CIM_MethodParameters represents a set of values to be used as the parameters of a method. These parameters can be passed to the method,
	 * directly used by the method in its invocation, or accessed by the method when it is called. The properties of a concrete subclass of
	 * MethodParameters are mapped to the parameters of a method by the method itself or by the method caller. This mapping is an implementation
	 * detail that is independent of the definition of the class. For ease of use, property names should match parameter names. Property values should
	 * be set before the method is invoked. The ModelCorrespondence qualifier can be used to indicate if the property value should come from the
	 * property of another class. The instances that the property values should be gleaned from should be associated with MethodParameters using the
	 * Parameter ValueSources association. If the property is declared as an array, then the same property value (identified by the Model
	 * Correspondence) will be retrieved from all appropriate ParameterValueSources instances and stored in the array. If the property is declared as
	 * an array and the Model Correspondence is to an array property, then only one instance of the array will be copied from one
	 * ParameterValueSource. If the property is not declared as an array and there are multiple instances of the class and property associated with it
	 * through ModelCorrespondence where the values are not all the same, then an error will occur and the value of the property will not be set.
	 * Several MethodParameters instances can be associated with any of the ManagedElement methods. This association allows the maintenance of
	 * 'canned' method invocation and reduces the overhead of re-creating all method parameters for every method invocation.
	 */
	protected MethodParameters() {
	};

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property methodParametersId.
	 */
	private String	methodParametersId;

	/**
	 * This method returns the MethodParameters.methodParametersId property value. This property is described as follows:
	 * 
	 * The identifier by which the MethodParameters object is known.
	 * 
	 * @return String current methodParametersId property value
	 * @exception Exception
	 */
	public String getMethodParametersId() {

		return this.methodParametersId;
	} // getMethodParametersId

	/**
	 * This method sets the MethodParameters.methodParametersId property value. This property is described as follows:
	 * 
	 * The identifier by which the MethodParameters object is known.
	 * 
	 * @param String
	 *            new methodParametersId property value
	 * @exception Exception
	 */
	public void setMethodParametersId(String methodParametersId) {

		this.methodParametersId = methodParametersId;
	} // setMethodParametersId

} // Class MethodParameters
