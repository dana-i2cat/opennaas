/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class ISCSIConnection as well as methods comparable to the
 * invokeMethods defined for this class. This Class implements the ISCSIConnectionBean Interface. The CIM class ISCSIConnection is described as
 * follows:
 * 
 * This class contains the attributes of and negotiated values for, an iSCSI Connection which is modeled as a subclass of NetworkPipe. The original
 * settings that are a starting point for negotiation are found in the class iSCSIConnectionSettings.
 */
public class ISCSIConnection extends NetworkPipe implements Serializable {

	/**
	 * This constructor creates a ISCSIConnectionBeanImpl Class which implements the ISCSIConnectionBean Interface, and encapsulates the CIM class
	 * ISCSIConnection in a Java Bean. The CIM class ISCSIConnection is described as follows:
	 * 
	 * This class contains the attributes of and negotiated values for, an iSCSI Connection which is modeled as a subclass of NetworkPipe. The
	 * original settings that are a starting point for negotiation are found in the class iSCSIConnectionSettings.
	 */
	public ISCSIConnection() {
	};

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property connectionID.
	 */
	private long	connectionID;

	/**
	 * This method returns the iSCSIConnection.connectionID property value. This property is described as follows:
	 * 
	 * The iSCSI Connection ID for this connection.
	 * 
	 * @return long current connectionID property value
	 * @exception Exception
	 */
	public long getConnectionID() {

		return this.connectionID;
	} // getConnectionID

	/**
	 * This method sets the iSCSIConnection.connectionID property value. This property is described as follows:
	 * 
	 * The iSCSI Connection ID for this connection.
	 * 
	 * @param long new connectionID property value
	 * @exception Exception
	 */
	public void setConnectionID(long connectionID) {

		this.connectionID = connectionID;
	} // setConnectionID

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property maxReceiveDataSegmentLength.
	 */
	private long	maxReceiveDataSegmentLength;

	/**
	 * This method returns the iSCSIConnection.maxReceiveDataSegmentLength property value. This property is described as follows:
	 * 
	 * The maximum data payload size supported for command or data PDUs able to be received on this connection.
	 * 
	 * @return long current maxReceiveDataSegmentLength property value
	 * @exception Exception
	 */
	public long getMaxReceiveDataSegmentLength() {

		return this.maxReceiveDataSegmentLength;
	} // getMaxReceiveDataSegmentLength

	/**
	 * This method sets the iSCSIConnection.maxReceiveDataSegmentLength property value. This property is described as follows:
	 * 
	 * The maximum data payload size supported for command or data PDUs able to be received on this connection.
	 * 
	 * @param long new maxReceiveDataSegmentLength property value
	 * @exception Exception
	 */
	public void setMaxReceiveDataSegmentLength(long
			maxReceiveDataSegmentLength) {

		this.maxReceiveDataSegmentLength = maxReceiveDataSegmentLength;
	} // setMaxReceiveDataSegmentLength

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property maxTransmitDataSegmentLength.
	 */
	private long	maxTransmitDataSegmentLength;

	/**
	 * This method returns the iSCSIConnection.maxTransmitDataSegmentLength property value. This property is described as follows:
	 * 
	 * The maximum data payload size supported for command or data PDUs to be sent on this connection.
	 * 
	 * @return long current maxTransmitDataSegmentLength property value
	 * @exception Exception
	 */
	public long getMaxTransmitDataSegmentLength() {

		return this.maxTransmitDataSegmentLength;
	} // getMaxTransmitDataSegmentLength

	/**
	 * This method sets the iSCSIConnection.maxTransmitDataSegmentLength property value. This property is described as follows:
	 * 
	 * The maximum data payload size supported for command or data PDUs to be sent on this connection.
	 * 
	 * @param long new maxTransmitDataSegmentLength property value
	 * @exception Exception
	 */
	public void setMaxTransmitDataSegmentLength(long
			maxTransmitDataSegmentLength) {

		this.maxTransmitDataSegmentLength = maxTransmitDataSegmentLength;
	} // setMaxTransmitDataSegmentLength

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property HeaderDigestMethod.
	 */

	public enum HeaderDigestMethod {
		OTHER,
		NO_DIGEST,
		CRC32C
	}

	private HeaderDigestMethod	headerDigestMethod;

	/**
	 * This method returns the iSCSIConnection.headerDigestMethod property value. This property is described as follows:
	 * 
	 * This property identifies the iSCSI header digest scheme in use within this connection.
	 * 
	 * @return int current headerDigestMethod property value
	 * @exception Exception
	 */
	public HeaderDigestMethod getHeaderDigestMethod() {

		return this.headerDigestMethod;
	} // getHeaderDigestMethod

	/**
	 * This method sets the iSCSIConnection.headerDigestMethod property value. This property is described as follows:
	 * 
	 * This property identifies the iSCSI header digest scheme in use within this connection.
	 * 
	 * @param int new headerDigestMethod property value
	 * @exception Exception
	 */
	public void setHeaderDigestMethod(HeaderDigestMethod
			headerDigestMethod) {

		this.headerDigestMethod = headerDigestMethod;
	} // setHeaderDigestMethod

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property otherHeaderDigestMethod.
	 */
	private String	otherHeaderDigestMethod;

	/**
	 * This method returns the iSCSIConnection.otherHeaderDigestMethod property value. This property is described as follows:
	 * 
	 * A string describing the Header Digest scheme in use when HeaderDigestMethod is equal to the value 1, "Other".
	 * 
	 * @return String current otherHeaderDigestMethod property value
	 * @exception Exception
	 */
	public String getOtherHeaderDigestMethod() {

		return this.otherHeaderDigestMethod;
	} // getOtherHeaderDigestMethod

	/**
	 * This method sets the iSCSIConnection.otherHeaderDigestMethod property value. This property is described as follows:
	 * 
	 * A string describing the Header Digest scheme in use when HeaderDigestMethod is equal to the value 1, "Other".
	 * 
	 * @param String
	 *            new otherHeaderDigestMethod property value
	 * @exception Exception
	 */
	public void setOtherHeaderDigestMethod(String otherHeaderDigestMethod) {

		this.otherHeaderDigestMethod = otherHeaderDigestMethod;
	} // setOtherHeaderDigestMethod

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property DataDigestMethod.
	 */

	public enum DataDigestMethod {
		OTHER,
		NO_DIGEST,
		CRC32C
	}

	private DataDigestMethod	dataDigestMethod;

	/**
	 * This method returns the iSCSIConnection.dataDigestMethod property value. This property is described as follows:
	 * 
	 * This property identifies the iSCSI data digest scheme in use within this connection.
	 * 
	 * @return int current dataDigestMethod property value
	 * @exception Exception
	 */
	public DataDigestMethod getDataDigestMethod() {

		return this.dataDigestMethod;
	} // getDataDigestMethod

	/**
	 * This method sets the iSCSIConnection.dataDigestMethod property value. This property is described as follows:
	 * 
	 * This property identifies the iSCSI data digest scheme in use within this connection.
	 * 
	 * @param int new dataDigestMethod property value
	 * @exception Exception
	 */
	public void setDataDigestMethod(DataDigestMethod dataDigestMethod) {

		this.dataDigestMethod = dataDigestMethod;
	} // setDataDigestMethod

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property otherDataDigestMethod.
	 */
	private String	otherDataDigestMethod;

	/**
	 * This method returns the iSCSIConnection.otherDataDigestMethod property value. This property is described as follows:
	 * 
	 * A string describing the Data Digest scheme in use when DataDigestMethod is equal to the value 1, "Other".
	 * 
	 * @return String current otherDataDigestMethod property value
	 * @exception Exception
	 */
	public String getOtherDataDigestMethod() {

		return this.otherDataDigestMethod;
	} // getOtherDataDigestMethod

	/**
	 * This method sets the iSCSIConnection.otherDataDigestMethod property value. This property is described as follows:
	 * 
	 * A string describing the Data Digest scheme in use when DataDigestMethod is equal to the value 1, "Other".
	 * 
	 * @param String
	 *            new otherDataDigestMethod property value
	 * @exception Exception
	 */
	public void setOtherDataDigestMethod(String otherDataDigestMethod) {

		this.otherDataDigestMethod = otherDataDigestMethod;
	} // setOtherDataDigestMethod

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property receivingMarkers.
	 */
	private boolean	receivingMarkers;

	/**
	 * This method returns the iSCSIConnection.receivingMarkers property value. This property is described as follows:
	 * 
	 * This property indicates whether or not this connection is receiving markers in in its incoming data stream.
	 * 
	 * @return boolean current receivingMarkers property value
	 * @exception Exception
	 */
	public boolean isReceivingMarkers() {

		return this.receivingMarkers;
	} // getReceivingMarkers

	/**
	 * This method sets the iSCSIConnection.receivingMarkers property value. This property is described as follows:
	 * 
	 * This property indicates whether or not this connection is receiving markers in in its incoming data stream.
	 * 
	 * @param boolean new receivingMarkers property value
	 * @exception Exception
	 */
	public void setReceivingMarkers(boolean receivingMarkers) {

		this.receivingMarkers = receivingMarkers;
	} // setReceivingMarkers

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property sendingMarkers.
	 */
	private boolean	sendingMarkers;

	/**
	 * This method returns the iSCSIConnection.sendingMarkers property value. This property is described as follows:
	 * 
	 * This property indicates whether or not this connection is inserting markers in in its outgoing data stream.
	 * 
	 * @return boolean current sendingMarkers property value
	 * @exception Exception
	 */
	public boolean isSendingMarkers() {

		return this.sendingMarkers;
	} // getSendingMarkers

	/**
	 * This method sets the iSCSIConnection.sendingMarkers property value. This property is described as follows:
	 * 
	 * This property indicates whether or not this connection is inserting markers in in its outgoing data stream.
	 * 
	 * @param boolean new sendingMarkers property value
	 * @exception Exception
	 */
	public void setSendingMarkers(boolean sendingMarkers) {

		this.sendingMarkers = sendingMarkers;
	} // setSendingMarkers

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property activeiSCSIVersion.
	 */
	private boolean	activeiSCSIVersion;

	/**
	 * This method returns the iSCSIConnection.activeiSCSIVersion property value. This property is described as follows:
	 * 
	 * Active version number of the iSCSI specification negotiated on this connection.
	 * 
	 * @return boolean current activeiSCSIVersion property value
	 * @exception Exception
	 */
	public boolean isActiveiSCSIVersion() {

		return this.activeiSCSIVersion;
	} // getActiveiSCSIVersion

	/**
	 * This method sets the iSCSIConnection.activeiSCSIVersion property value. This property is described as follows:
	 * 
	 * Active version number of the iSCSI specification negotiated on this connection.
	 * 
	 * @param boolean new activeiSCSIVersion property value
	 * @exception Exception
	 */
	public void setActiveiSCSIVersion(boolean activeiSCSIVersion) {

		this.activeiSCSIVersion = activeiSCSIVersion;
	} // setActiveiSCSIVersion

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property AuthenticationMethodUsed.
	 */

	public enum AuthenticationMethodUsed {
		NO_AUTHENTICATION,
		SRP,
		CHAP,
		KERBEROS
	}

	private AuthenticationMethodUsed	authenticationMethodUsed;

	/**
	 * This method returns the iSCSIConnection.authenticationMethodUsed property value. This property is described as follows:
	 * 
	 * The authentication method being used on this connection, as communicated during the login phase.
	 * 
	 * @return int current authenticationMethodUsed property value
	 * @exception Exception
	 */
	public AuthenticationMethodUsed getAuthenticationMethodUsed() {

		return this.authenticationMethodUsed;
	} // getAuthenticationMethodUsed

	/**
	 * This method sets the iSCSIConnection.authenticationMethodUsed property value. This property is described as follows:
	 * 
	 * The authentication method being used on this connection, as communicated during the login phase.
	 * 
	 * @param int new authenticationMethodUsed property value
	 * @exception Exception
	 */
	public void setAuthenticationMethodUsed(AuthenticationMethodUsed
			authenticationMethodUsed) {

		this.authenticationMethodUsed = authenticationMethodUsed;
	} // setAuthenticationMethodUsed

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property mutualAuthentication.
	 */
	private boolean	mutualAuthentication;

	/**
	 * This method returns the iSCSIConnection.mutualAuthentication property value. This property is described as follows:
	 * 
	 * This property when true, indicates that the Target was required to authenticate itself to the Initiator, in addition to the Initiator
	 * authenticating itself to the Target. When false, and AuthenticationMethod is other than 'No Authentication', only the Initatior authenticated
	 * itself to the Target. When AuthenticationMethodUsed is 'No Authentication', this property must be false.
	 * 
	 * @return boolean current mutualAuthentication property value
	 * @exception Exception
	 */
	public boolean isMutualAuthentication() {

		return this.mutualAuthentication;
	} // getMutualAuthentication

	/**
	 * This method sets the iSCSIConnection.mutualAuthentication property value. This property is described as follows:
	 * 
	 * This property when true, indicates that the Target was required to authenticate itself to the Initiator, in addition to the Initiator
	 * authenticating itself to the Target. When false, and AuthenticationMethod is other than 'No Authentication', only the Initatior authenticated
	 * itself to the Target. When AuthenticationMethodUsed is 'No Authentication', this property must be false.
	 * 
	 * @param boolean new mutualAuthentication property value
	 * @exception Exception
	 */
	public void setMutualAuthentication(boolean mutualAuthentication) {

		this.mutualAuthentication = mutualAuthentication;
	} // setMutualAuthentication

} // Class ISCSIConnection
