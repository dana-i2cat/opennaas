/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.Serializable;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class NextHopRouting as well as methods comparable to the
 * invokeMethods defined for this class. This Class implements the NextHopRoutingBean Interface. The CIM class NextHopRouting is described as follows:
 * 
 * NextHopRouting relates a destination address to the address or interface through which the remote address may be reached. An instance of this class
 * can represent either static or dynamic routing, and may represent a routing table entry (but it is not required that all NextHopRoutes be in a
 * routing table). Static routes are distinguished by setting the IsStatic boolean property to TRUE. Subclasses of NextHopRouting provide specific
 * protocol and Key information. NextHopRoutes are dependent on at least one ForwardingService to execute them. This is conveyed by the
 * CIM_NextHopForwardedByService association. NextHopRouting is deprecated in lieu of the more general, concrete NextHopRoute class. NextHopRoute
 * allows the definition of BOTH a next hop address and an interface for transmission of the traffic. Also, it does not mandate the instantiation of a
 * ForwardingService class. The latter is not needed if the sole purpose of the instance is to specify a 'desired/configured' route. This is simply a
 * specification of the next hop.
 */
@Deprecated
public class NextHopRouting extends LogicalElement implements Serializable {

	/**
	 * This constructor creates a NextHopRoutingBeanImpl Class which implements the NextHopRoutingBean Interface, and encapsulates the CIM class
	 * NextHopRouting in a Java Bean. The CIM class NextHopRouting is described as follows:
	 * 
	 * NextHopRouting relates a destination address to the address or interface through which the remote address may be reached. An instance of this
	 * class can represent either static or dynamic routing, and may represent a routing table entry (but it is not required that all NextHopRoutes be
	 * in a routing table). Static routes are distinguished by setting the IsStatic boolean property to TRUE. Subclasses of NextHopRouting provide
	 * specific protocol and Key information. NextHopRoutes are dependent on at least one ForwardingService to execute them. This is conveyed by the
	 * CIM_NextHopForwardedByService association. NextHopRouting is deprecated in lieu of the more general, concrete NextHopRoute class. NextHopRoute
	 * allows the definition of BOTH a next hop address and an interface for transmission of the traffic. Also, it does not mandate the instantiation
	 * of a ForwardingService class. The latter is not needed if the sole purpose of the instance is to specify a 'desired/configured' route. This is
	 * simply a specification of the next hop.
	 */
	protected NextHopRouting() {
	};

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property destinationAddress.
	 */
	@Deprecated
	private String	destinationAddress;

	/**
	 * This method returns the NextHopRouting.destinationAddress property value. This property is described as follows:
	 * 
	 * The address which serves as the destination to be reached.
	 * 
	 * @return String current destinationAddress property value
	 * @exception Exception
	 */
	@Deprecated
	public String getDestinationAddress() {

		return this.destinationAddress;
	} // getDestinationAddress

	/**
	 * This method sets the NextHopRouting.destinationAddress property value. This property is described as follows:
	 * 
	 * The address which serves as the destination to be reached.
	 * 
	 * @param String
	 *            new destinationAddress property value
	 * @exception Exception
	 */
	@Deprecated
	public void setDestinationAddress(String destinationAddress) {

		this.destinationAddress = destinationAddress;
	} // setDestinationAddress

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property destinationMask.
	 */
	@Deprecated
	private String	destinationMask;

	/**
	 * This method returns the NextHopRouting.destinationMask property value. This property is described as follows:
	 * 
	 * The mask for the DestinationAddress.
	 * 
	 * @return String current destinationMask property value
	 * @exception Exception
	 */
	@Deprecated
	public String getDestinationMask() {

		return this.destinationMask;
	} // getDestinationMask

	/**
	 * This method sets the NextHopRouting.destinationMask property value. This property is described as follows:
	 * 
	 * The mask for the DestinationAddress.
	 * 
	 * @param String
	 *            new destinationMask property value
	 * @exception Exception
	 */
	@Deprecated
	public void setDestinationMask(String destinationMask) {

		this.destinationMask = destinationMask;
	} // setDestinationMask

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property nextHop.
	 */
	@Deprecated
	private String	nextHop;

	/**
	 * This method returns the NextHopRouting.nextHop property value. This property is described as follows:
	 * 
	 * This contains either the address of the next-hop router, or the interface used to reach the destination.
	 * 
	 * @return String current nextHop property value
	 * @exception Exception
	 */
	@Deprecated
	public String getNextHop() {

		return this.nextHop;
	} // getNextHop

	/**
	 * This method sets the NextHopRouting.nextHop property value. This property is described as follows:
	 * 
	 * This contains either the address of the next-hop router, or the interface used to reach the destination.
	 * 
	 * @param String
	 *            new nextHop property value
	 * @exception Exception
	 */
	@Deprecated
	public void setNextHop(String nextHop) {

		this.nextHop = nextHop;
	} // setNextHop

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property isStatic.
	 */
	@Deprecated
	private boolean	isStatic;

	/**
	 * This method returns the NextHopRouting.isStatic property value. This property is described as follows:
	 * 
	 * TRUE indicates that this is a static route, and FALSE indicates a dynamically-learned route.
	 * 
	 * @return boolean current isStatic property value
	 * @exception Exception
	 */
	@Deprecated
	public boolean isIsStatic() {

		return this.isStatic;
	} // getIsStatic

	/**
	 * This method sets the NextHopRouting.isStatic property value. This property is described as follows:
	 * 
	 * TRUE indicates that this is a static route, and FALSE indicates a dynamically-learned route.
	 * 
	 * @param boolean new isStatic property value
	 * @exception Exception
	 */
	@Deprecated
	public void setIsStatic(boolean isStatic) {

		this.isStatic = isStatic;
	} // setIsStatic

} // Class NextHopRouting
