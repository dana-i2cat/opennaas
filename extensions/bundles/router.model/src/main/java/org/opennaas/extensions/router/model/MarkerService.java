/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.*;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class MarkerService as well as methods comparable to the
 * invokeMethods defined for this class. This Class implements the MarkerServiceBean Interface. The CIM class MarkerService is described as follows:
 * 
 * MarkerService represents the general process of marking a selected field in a network packet with a specified value. Packets are marked in order to
 * control the conditioning that they will subsequently receive. Subclasses of MarkerService identify the specific fields to be marked, and introduce
 * properties to represent the values used in marking these fields. Markers are usually invoked as a result of a preceding classifier match.
 * MarkerService is a concrete class because its superclass (ConditioningService) is concrete. While this class can be instantiated, an instance of it
 * does not accomplish anything, because both the field to be marked and the value used to mark it are defined in subclasses. MarkerService is modeled
 * as a ConditioningService so that it can be aggregated into a QoSService (using the QoSConditioningSubService association). This association
 * indicates that the MarkerService's functionality underlies the QoSService. MarkerService also participates in the NextService association to
 * identify the subsequent ConditioningService(s) that act on packets after they have been marked.
 */
public class MarkerService extends ConditioningService implements Serializable
{

	/**
	 * This constructor creates a MarkerServiceBeanImpl Class which implements the MarkerServiceBean Interface, and encapsulates the CIM class
	 * MarkerService in a Java Bean. The CIM class MarkerService is described as follows:
	 * 
	 * MarkerService represents the general process of marking a selected field in a network packet with a specified value. Packets are marked in
	 * order to control the conditioning that they will subsequently receive. Subclasses of MarkerService identify the specific fields to be marked,
	 * and introduce properties to represent the values used in marking these fields. Markers are usually invoked as a result of a preceding
	 * classifier match. MarkerService is a concrete class because its superclass (ConditioningService) is concrete. While this class can be
	 * instantiated, an instance of it does not accomplish anything, because both the field to be marked and the value used to mark it are defined in
	 * subclasses. MarkerService is modeled as a ConditioningService so that it can be aggregated into a QoSService (using the
	 * QoSConditioningSubService association). This association indicates that the MarkerService's functionality underlies the QoSService.
	 * MarkerService also participates in the NextService association to identify the subsequent ConditioningService(s) that act on packets after they
	 * have been marked.
	 */
	public MarkerService() {
	};
} // Class MarkerService
