/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.Serializable;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class IPHeadersFilter as well as methods comparable to the
 * invokeMethods defined for this class. This Class implements the IPHeadersFilterBean Interface. The CIM class IPHeadersFilter is described as
 * follows:
 * 
 * IPHeadersFilter contains the most commonly required properties for performing filtering on IP, TCP or UDP headers. Properties not present in an
 * instance of the IPHeadersFilter are treated as 'all values'.
 */
public class IPHeadersFilter extends FilterEntryBase implements Serializable
{

	/**
	 * 
	 */
	private static final long	serialVersionUID	= 7039637990382056571L;

	/**
	 * This constructor creates a IPHeadersFilterBeanImpl Class which implements the IPHeadersFilterBean Interface, and encapsulates the CIM class
	 * IPHeadersFilter in a Java Bean. The CIM class IPHeadersFilter is described as follows:
	 * 
	 * IPHeadersFilter contains the most commonly required properties for performing filtering on IP, TCP or UDP headers. Properties not present in an
	 * instance of the IPHeadersFilter are treated as 'all values'.
	 */
	public IPHeadersFilter() {
	};

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property HdrIPVersion.
	 */

	public enum HdrIPVersion {
		IPV4,
		IPV6
	}

	private HdrIPVersion	hdrIPVersion;

	/**
	 * This method returns the IPHeadersFilter.hdrIPVersion property value. This property is described as follows:
	 * 
	 * HdrIPVersion identifies the version of the IP addresses for IP header filters. It is also used to determine the sizes of the OctetStrings in
	 * the six properties HdrSrcAddress, HdrSrcAddressEndOfRange, HdrSrcMask, HdrDestAddress, HdrDestAddressEndOfRange and HdrDestMask, as follows:
	 * ipv4(4): OctetString(SIZE (4)) ipv6(6): OctetString(SIZE (16|20)), depending on whether a scope identifier is present. If a value for this
	 * property is not provided, then the filter does not consider IP version in selecting matching packets, i.e., IP version matches for all values.
	 * In this case, the HdrSrcAddress, HdrSrcAddressEndOfRange, HdrSrcMask, HdrDestAddress, HdrDestAddressEndOfRange and HdrDestMask must also be not
	 * present.
	 * 
	 * @return short current hdrIPVersion property value
	 * @exception Exception
	 */
	public HdrIPVersion getHdrIPVersion() {

		return this.hdrIPVersion;
	} // getHdrIPVersion

	/**
	 * This method sets the IPHeadersFilter.hdrIPVersion property value. This property is described as follows:
	 * 
	 * HdrIPVersion identifies the version of the IP addresses for IP header filters. It is also used to determine the sizes of the OctetStrings in
	 * the six properties HdrSrcAddress, HdrSrcAddressEndOfRange, HdrSrcMask, HdrDestAddress, HdrDestAddressEndOfRange and HdrDestMask, as follows:
	 * ipv4(4): OctetString(SIZE (4)) ipv6(6): OctetString(SIZE (16|20)), depending on whether a scope identifier is present. If a value for this
	 * property is not provided, then the filter does not consider IP version in selecting matching packets, i.e., IP version matches for all values.
	 * In this case, the HdrSrcAddress, HdrSrcAddressEndOfRange, HdrSrcMask, HdrDestAddress, HdrDestAddressEndOfRange and HdrDestMask must also be not
	 * present.
	 * 
	 * @param short new hdrIPVersion property value
	 * @exception Exception
	 */
	public void setHdrIPVersion(HdrIPVersion hdrIPVersion) {

		this.hdrIPVersion = hdrIPVersion;
	} // setHdrIPVersion

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property hdrSrcAddress.
	 */
	private short[]	hdrSrcAddress;

	/**
	 * This method returns the IPHeadersFilter.hdrSrcAddress property value. This property is described as follows:
	 * 
	 * HdrSrcAddress is an OctetString, of a size determined by the value of the HdrIPVersion property, representing a source IP address. When there
	 * is no HdrSrcAddressEndOfRange value, this value is compared to the source address in the IP header, subject to the mask represented in the
	 * HdrSrcMask property. (Note that the mask is ANDed with the address.) When there is a HdrSrcAddressEndOfRange value, this value is the start of
	 * the specified range (i.e., the HdrSrcAddress is lower than the HdrSrcAddressEndOfRange) that is compared to the source address in the IP header
	 * and matches on any value in the range. If a value for this property is not provided, then the filter does not consider HdrSrcAddress in
	 * selecting matching packets, i.e., HdrSrcAddress matches for all values.
	 * 
	 * @return short[] current hdrSrcAddress property value
	 * @exception Exception
	 */
	public short[] getHdrSrcAddress() {

		return this.hdrSrcAddress;
	} // getHdrSrcAddress

	/**
	 * This method sets the IPHeadersFilter.hdrSrcAddress property value. This property is described as follows:
	 * 
	 * HdrSrcAddress is an OctetString, of a size determined by the value of the HdrIPVersion property, representing a source IP address. When there
	 * is no HdrSrcAddressEndOfRange value, this value is compared to the source address in the IP header, subject to the mask represented in the
	 * HdrSrcMask property. (Note that the mask is ANDed with the address.) When there is a HdrSrcAddressEndOfRange value, this value is the start of
	 * the specified range (i.e., the HdrSrcAddress is lower than the HdrSrcAddressEndOfRange) that is compared to the source address in the IP header
	 * and matches on any value in the range. If a value for this property is not provided, then the filter does not consider HdrSrcAddress in
	 * selecting matching packets, i.e., HdrSrcAddress matches for all values.
	 * 
	 * @param short[] new hdrSrcAddress property value
	 * @exception Exception
	 */
	public void setHdrSrcAddress(short[] hdrSrcAddress) {

		this.hdrSrcAddress = hdrSrcAddress;
	} // setHdrSrcAddress

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property hdrSrcAddressEndOfRange.
	 */
	private short[]	hdrSrcAddressEndOfRange;

	/**
	 * This method returns the IPHeadersFilter.hdrSrcAddressEndOfRange property value. This property is described as follows:
	 * 
	 * HdrSrcAddressEndOfRange is an OctetString, of a size determined by the value of the HdrIPVersion property, representing the end of a range of
	 * source IP addresses (inclusive), where the start of the range is the HdrSrcAddress property value. If a value for HdrSrcAddress is not
	 * provided, then this property also MUST NOT be provided. If a value for this property is provided, then HdrSrcMask MUST NOT be provided.
	 * 
	 * @return short[] current hdrSrcAddressEndOfRange property value
	 * @exception Exception
	 */
	public short[] getHdrSrcAddressEndOfRange() {

		return this.hdrSrcAddressEndOfRange;
	} // getHdrSrcAddressEndOfRange

	/**
	 * This method sets the IPHeadersFilter.hdrSrcAddressEndOfRange property value. This property is described as follows:
	 * 
	 * HdrSrcAddressEndOfRange is an OctetString, of a size determined by the value of the HdrIPVersion property, representing the end of a range of
	 * source IP addresses (inclusive), where the start of the range is the HdrSrcAddress property value. If a value for HdrSrcAddress is not
	 * provided, then this property also MUST NOT be provided. If a value for this property is provided, then HdrSrcMask MUST NOT be provided.
	 * 
	 * @param short[] new hdrSrcAddressEndOfRange property value
	 * @exception Exception
	 */
	public void setHdrSrcAddressEndOfRange(short[] hdrSrcAddressEndOfRange)
	{

		this.hdrSrcAddressEndOfRange = hdrSrcAddressEndOfRange;
	} // setHdrSrcAddressEndOfRange

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property hdrSrcMask.
	 */
	private short[]	hdrSrcMask;

	/**
	 * This method returns the IPHeadersFilter.hdrSrcMask property value. This property is described as follows:
	 * 
	 * HdrSrcMask is an OctetString, of a size determined by the value of the HdrIPVersion property, representing a mask to be used in comparing the
	 * source address in the IP header with the value represented in the HdrSrcAddress property. If a value for this property is not provided, then
	 * the filter does not consider HdrSrcMask in selecting matching packets, i.e., the value of the HdrSrcAddress or the source address range must
	 * match the source address in the packet exactly. If a value for this property is provided, then HdrSrcAddressEndOfRange MUST NOT be provided.
	 * 
	 * @return short[] current hdrSrcMask property value
	 * @exception Exception
	 */
	public short[] getHdrSrcMask() {

		return this.hdrSrcMask;
	} // getHdrSrcMask

	/**
	 * This method sets the IPHeadersFilter.hdrSrcMask property value. This property is described as follows:
	 * 
	 * HdrSrcMask is an OctetString, of a size determined by the value of the HdrIPVersion property, representing a mask to be used in comparing the
	 * source address in the IP header with the value represented in the HdrSrcAddress property. If a value for this property is not provided, then
	 * the filter does not consider HdrSrcMask in selecting matching packets, i.e., the value of the HdrSrcAddress or the source address range must
	 * match the source address in the packet exactly. If a value for this property is provided, then HdrSrcAddressEndOfRange MUST NOT be provided.
	 * 
	 * @param short[] new hdrSrcMask property value
	 * @exception Exception
	 */
	public void setHdrSrcMask(short[] hdrSrcMask) {

		this.hdrSrcMask = hdrSrcMask;
	} // setHdrSrcMask

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property hdrDestAddress.
	 */
	private short[]	hdrDestAddress;

	/**
	 * This method returns the IPHeadersFilter.hdrDestAddress property value. This property is described as follows:
	 * 
	 * HdrDestAddress is an OctetString, of a size determined by the value of the HdrIPVersion property, representing a destination IP address. When
	 * there is no HdrDestAddressEndOfRange value, this value is compared to the destination address in the IP header, subject to the mask represented
	 * in the HdrDestMask property. (Note that the mask is ANDed with the address.) When there is a HdrDestAddressEndOfRange value, this value is the
	 * start of the specified range (i.e., the HdrDestAddress is lower than the HdrDestAddressEndOfRange) that is compared to the source address in
	 * the IP header and matches on any value in the range. If a value for this property is not provided, then the filter does not consider
	 * HdrDestAddress in selecting matching packets, i.e., HdrDestAddress matches for all values.
	 * 
	 * @return short[] current hdrDestAddress property value
	 * @exception Exception
	 */
	public short[] getHdrDestAddress() {

		return this.hdrDestAddress;
	} // getHdrDestAddress

	/**
	 * This method sets the IPHeadersFilter.hdrDestAddress property value. This property is described as follows:
	 * 
	 * HdrDestAddress is an OctetString, of a size determined by the value of the HdrIPVersion property, representing a destination IP address. When
	 * there is no HdrDestAddressEndOfRange value, this value is compared to the destination address in the IP header, subject to the mask represented
	 * in the HdrDestMask property. (Note that the mask is ANDed with the address.) When there is a HdrDestAddressEndOfRange value, this value is the
	 * start of the specified range (i.e., the HdrDestAddress is lower than the HdrDestAddressEndOfRange) that is compared to the source address in
	 * the IP header and matches on any value in the range. If a value for this property is not provided, then the filter does not consider
	 * HdrDestAddress in selecting matching packets, i.e., HdrDestAddress matches for all values.
	 * 
	 * @param short[] new hdrDestAddress property value
	 * @exception Exception
	 */
	public void setHdrDestAddress(short[] hdrDestAddress) {

		this.hdrDestAddress = hdrDestAddress;
	} // setHdrDestAddress

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property hdrDestAddressEndOfRange.
	 */
	private short[]	hdrDestAddressEndOfRange;

	/**
	 * This method returns the IPHeadersFilter.hdrDestAddressEndOfRange property value. This property is described as follows:
	 * 
	 * HdrDestAddressEndOfRange is an OctetString, of a size determined by the value of the HdrIPVersion property, representing the end of a range of
	 * destination IP addresses (inclusive), where the start of the range is the HdrDestAddress property value. If a value for HdrDestAddress is not
	 * provided, then this property also MUST NOT be provided. If a value for this property is provided, then HdrDestMask MUST NOT be provided.
	 * 
	 * @return short[] current hdrDestAddressEndOfRange property value
	 * @exception Exception
	 */
	public short[] getHdrDestAddressEndOfRange() {

		return this.hdrDestAddressEndOfRange;
	} // getHdrDestAddressEndOfRange

	/**
	 * This method sets the IPHeadersFilter.hdrDestAddressEndOfRange property value. This property is described as follows:
	 * 
	 * HdrDestAddressEndOfRange is an OctetString, of a size determined by the value of the HdrIPVersion property, representing the end of a range of
	 * destination IP addresses (inclusive), where the start of the range is the HdrDestAddress property value. If a value for HdrDestAddress is not
	 * provided, then this property also MUST NOT be provided. If a value for this property is provided, then HdrDestMask MUST NOT be provided.
	 * 
	 * @param short[] new hdrDestAddressEndOfRange property value
	 * @exception Exception
	 */
	public void setHdrDestAddressEndOfRange(short[] hdrDestAddressEndOfRange)
	{

		this.hdrDestAddressEndOfRange = hdrDestAddressEndOfRange;
	} // setHdrDestAddressEndOfRange

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property hdrDestMask.
	 */
	private short[]	hdrDestMask;

	/**
	 * This method returns the IPHeadersFilter.hdrDestMask property value. This property is described as follows:
	 * 
	 * HdrDestMask is an OctetString, of a size determined by the value of the HdrIPVersion property, representing a mask to be used in comparing the
	 * destination address in the IP header with the value represented in the HdrDestAddress property. If a value for this property is not provided,
	 * then the filter does not consider HdrDestMask in selecting matching packets, i.e., the value of the HdrDestAddress or the destination address
	 * range must match the destination address in the packet exactly. If a value for this property is provided, then HdrDestAddressEndOfRange MUST
	 * NOT be provided.
	 * 
	 * @return short[] current hdrDestMask property value
	 * @exception Exception
	 */
	public short[] getHdrDestMask() {

		return this.hdrDestMask;
	} // getHdrDestMask

	/**
	 * This method sets the IPHeadersFilter.hdrDestMask property value. This property is described as follows:
	 * 
	 * HdrDestMask is an OctetString, of a size determined by the value of the HdrIPVersion property, representing a mask to be used in comparing the
	 * destination address in the IP header with the value represented in the HdrDestAddress property. If a value for this property is not provided,
	 * then the filter does not consider HdrDestMask in selecting matching packets, i.e., the value of the HdrDestAddress or the destination address
	 * range must match the destination address in the packet exactly. If a value for this property is provided, then HdrDestAddressEndOfRange MUST
	 * NOT be provided.
	 * 
	 * @param short[] new hdrDestMask property value
	 * @exception Exception
	 */
	public void setHdrDestMask(short[] hdrDestMask) {

		this.hdrDestMask = hdrDestMask;
	} // setHdrDestMask

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property hdrProtocolID.
	 */
	private short	hdrProtocolID;

	/**
	 * This method returns the IPHeadersFilter.hdrProtocolID property value. This property is described as follows:
	 * 
	 * HdrProtocolID is an 8-bit unsigned integer, representing an IP protocol type. This value is compared to the Protocol field in the IP header. If
	 * a value for this property is not provided, then the filter does not consider HdrProtocolID in selecting matching packets, i.e., HdrProtocolID
	 * matches for all values.
	 * 
	 * @return short current hdrProtocolID property value
	 * @exception Exception
	 */
	public short getHdrProtocolID() {

		return this.hdrProtocolID;
	} // getHdrProtocolID

	/**
	 * This method sets the IPHeadersFilter.hdrProtocolID property value. This property is described as follows:
	 * 
	 * HdrProtocolID is an 8-bit unsigned integer, representing an IP protocol type. This value is compared to the Protocol field in the IP header. If
	 * a value for this property is not provided, then the filter does not consider HdrProtocolID in selecting matching packets, i.e., HdrProtocolID
	 * matches for all values.
	 * 
	 * @param short new hdrProtocolID property value
	 * @exception Exception
	 */
	public void setHdrProtocolID(short hdrProtocolID) {

		this.hdrProtocolID = hdrProtocolID;
	} // setHdrProtocolID

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property hdrSrcPortStart.
	 */
	private int	hdrSrcPortStart;

	/**
	 * This method returns the IPHeadersFilter.hdrSrcPortStart property value. This property is described as follows:
	 * 
	 * HdrSrcPortStart represents the lower end of a range of UDP or TCP source ports. The upper end of the range is represented by the HdrSrcPortEnd
	 * property. The value of HdrSrcPortStart MUST be no greater than the value of HdrSrcPortEnd. A source port filter is evaluated by testing whether
	 * the source port identified in the IP header falls within the range of values between HdrSrcPortStart and HdrSrcPortEnd, INCLUDING these two end
	 * points. If a value for this property is not provided, then the filter does not consider HdrSrcPortStart in selecting matching packets, i.e.,
	 * there is no lower bound in matching source port values.
	 * 
	 * @return int current hdrSrcPortStart property value
	 * @exception Exception
	 */
	public int getHdrSrcPortStart() {

		return this.hdrSrcPortStart;
	} // getHdrSrcPortStart

	/**
	 * This method sets the IPHeadersFilter.hdrSrcPortStart property value. This property is described as follows:
	 * 
	 * HdrSrcPortStart represents the lower end of a range of UDP or TCP source ports. The upper end of the range is represented by the HdrSrcPortEnd
	 * property. The value of HdrSrcPortStart MUST be no greater than the value of HdrSrcPortEnd. A source port filter is evaluated by testing whether
	 * the source port identified in the IP header falls within the range of values between HdrSrcPortStart and HdrSrcPortEnd, INCLUDING these two end
	 * points. If a value for this property is not provided, then the filter does not consider HdrSrcPortStart in selecting matching packets, i.e.,
	 * there is no lower bound in matching source port values.
	 * 
	 * @param int new hdrSrcPortStart property value
	 * @exception Exception
	 */
	public void setHdrSrcPortStart(int hdrSrcPortStart) {

		this.hdrSrcPortStart = hdrSrcPortStart;
	} // setHdrSrcPortStart

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property hdrSrcPortEnd.
	 */
	private int	hdrSrcPortEnd;

	/**
	 * This method returns the IPHeadersFilter.hdrSrcPortEnd property value. This property is described as follows:
	 * 
	 * HdrSrcPortEnd represents the upper end of a range of UDP or TCP source ports. The lower end of the range is represented by the HdrSrcPortStart
	 * property. The value of HdrSrcPortEnd MUST be no less than the value of HdrSrcPortStart. A single port is indicated by equal values for
	 * HdrSrcPortStart and HdrSrcPortEnd. A source port filter is evaluated by testing whether the source port identified in the IP header falls
	 * within the range of values between HdrSrcPortStart and HdrSrcPortEnd, INCLUDING these two end points. If a value for this property is not
	 * provided, then the filter does not consider HdrSrcPortEnd in selecting matching packets, i.e., there is no upper bound in matching source port
	 * values.
	 * 
	 * @return int current hdrSrcPortEnd property value
	 * @exception Exception
	 */
	public int getHdrSrcPortEnd() {

		return this.hdrSrcPortEnd;
	} // getHdrSrcPortEnd

	/**
	 * This method sets the IPHeadersFilter.hdrSrcPortEnd property value. This property is described as follows:
	 * 
	 * HdrSrcPortEnd represents the upper end of a range of UDP or TCP source ports. The lower end of the range is represented by the HdrSrcPortStart
	 * property. The value of HdrSrcPortEnd MUST be no less than the value of HdrSrcPortStart. A single port is indicated by equal values for
	 * HdrSrcPortStart and HdrSrcPortEnd. A source port filter is evaluated by testing whether the source port identified in the IP header falls
	 * within the range of values between HdrSrcPortStart and HdrSrcPortEnd, INCLUDING these two end points. If a value for this property is not
	 * provided, then the filter does not consider HdrSrcPortEnd in selecting matching packets, i.e., there is no upper bound in matching source port
	 * values.
	 * 
	 * @param int new hdrSrcPortEnd property value
	 * @exception Exception
	 */
	public void setHdrSrcPortEnd(int hdrSrcPortEnd) {

		this.hdrSrcPortEnd = hdrSrcPortEnd;
	} // setHdrSrcPortEnd

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property hdrDestPortStart.
	 */
	private int	hdrDestPortStart;

	/**
	 * This method returns the IPHeadersFilter.hdrDestPortStart property value. This property is described as follows:
	 * 
	 * HdrDestPortStart represents the lower end of a range of UDP or TCP destination ports. The upper end of the range is represented by the
	 * HdrDestPortEnd property. The value of HdrDestPortStart MUST be no greater than the value of HdrDestPortEnd. A single port is indicated by equal
	 * values for HdrDestPortStart and HdrDestPortEnd. A destination port filter is evaluated by testing whether the destination port identified in
	 * the IP header falls within the range of values between HdrDestPortStart and HdrDestPortEnd, INCLUDING these two end points. If a value for this
	 * property is not provided, then the filter does not consider HdrDestPortStart in selecting matching packets, i.e., there is no lower bound in
	 * matching destination port values.
	 * 
	 * @return int current hdrDestPortStart property value
	 * @exception Exception
	 */
	public int getHdrDestPortStart() {

		return this.hdrDestPortStart;
	} // getHdrDestPortStart

	/**
	 * This method sets the IPHeadersFilter.hdrDestPortStart property value. This property is described as follows:
	 * 
	 * HdrDestPortStart represents the lower end of a range of UDP or TCP destination ports. The upper end of the range is represented by the
	 * HdrDestPortEnd property. The value of HdrDestPortStart MUST be no greater than the value of HdrDestPortEnd. A single port is indicated by equal
	 * values for HdrDestPortStart and HdrDestPortEnd. A destination port filter is evaluated by testing whether the destination port identified in
	 * the IP header falls within the range of values between HdrDestPortStart and HdrDestPortEnd, INCLUDING these two end points. If a value for this
	 * property is not provided, then the filter does not consider HdrDestPortStart in selecting matching packets, i.e., there is no lower bound in
	 * matching destination port values.
	 * 
	 * @param int new hdrDestPortStart property value
	 * @exception Exception
	 */
	public void setHdrDestPortStart(int hdrDestPortStart) {

		this.hdrDestPortStart = hdrDestPortStart;
	} // setHdrDestPortStart

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property hdrDestPortEnd.
	 */
	private int	hdrDestPortEnd;

	/**
	 * This method returns the IPHeadersFilter.hdrDestPortEnd property value. This property is described as follows:
	 * 
	 * HdrDestPortEnd represents the upper end of a range of UDP or TCP destination ports. The lower end of the range is represented by the
	 * HdrDestPortStart property. The value of HdrDestPortEnd MUST be no less than the value of HdrDestPortStart. A single port is indicated by equal
	 * values for HdrDestPortStart and HdrDestPortEnd. A destination port filter is evaluated by testing whether the destination port identified in
	 * the IP header falls within the range of values between HdrDestPortStart and HdrDestPortEnd, INCLUDING these two end points. If a value for this
	 * property is not provided, then the filter does not consider HdrDestPortEnd in selecting matching packets, i.e., there is no upper bound in
	 * matching destination port values.
	 * 
	 * @return int current hdrDestPortEnd property value
	 * @exception Exception
	 */
	public int getHdrDestPortEnd() {

		return this.hdrDestPortEnd;
	} // getHdrDestPortEnd

	/**
	 * This method sets the IPHeadersFilter.hdrDestPortEnd property value. This property is described as follows:
	 * 
	 * HdrDestPortEnd represents the upper end of a range of UDP or TCP destination ports. The lower end of the range is represented by the
	 * HdrDestPortStart property. The value of HdrDestPortEnd MUST be no less than the value of HdrDestPortStart. A single port is indicated by equal
	 * values for HdrDestPortStart and HdrDestPortEnd. A destination port filter is evaluated by testing whether the destination port identified in
	 * the IP header falls within the range of values between HdrDestPortStart and HdrDestPortEnd, INCLUDING these two end points. If a value for this
	 * property is not provided, then the filter does not consider HdrDestPortEnd in selecting matching packets, i.e., there is no upper bound in
	 * matching destination port values.
	 * 
	 * @param int new hdrDestPortEnd property value
	 * @exception Exception
	 */
	public void setHdrDestPortEnd(int hdrDestPortEnd) {

		this.hdrDestPortEnd = hdrDestPortEnd;
	} // setHdrDestPortEnd

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property hdrDSCP.
	 */
	private short[]	hdrDSCP;

	/**
	 * This method returns the IPHeadersFilter.hdrDSCP property value. This property is described as follows:
	 * 
	 * HdrDSCP is defined as a set of discrete DiffServ code points, with no inherent structure. There is no semantically significant relationship
	 * between different HdrDSCPs. Consequently, there is no provision for specifying a range of HdrDSCPs. Since, in IPv4, the HdrDSCP field may
	 * contain bits to be interpreted as the TOS IP Precedence, this property is also used to filter on IP Precedence. Similarly, the IPv6 Traffic
	 * Class field is also filtered using the value(s) in this property. HdrDSCP is defined as an array, to provide the ability to specify several
	 * discrete DSCPs in a single instance of IPHeadersFilter, that would be OR'ed together to define the filter criteria. If a value for this
	 * property is not provided, then the filter does not consider HdrDSCP in selecting matching packets, i.e., HdrDSCP matches for all values.
	 * 
	 * @return short[] current hdrDSCP property value
	 * @exception Exception
	 */
	public short[] getHdrDSCP() {

		return this.hdrDSCP;
	} // getHdrDSCP

	/**
	 * This method sets the IPHeadersFilter.hdrDSCP property value. This property is described as follows:
	 * 
	 * HdrDSCP is defined as a set of discrete DiffServ code points, with no inherent structure. There is no semantically significant relationship
	 * between different HdrDSCPs. Consequently, there is no provision for specifying a range of HdrDSCPs. Since, in IPv4, the HdrDSCP field may
	 * contain bits to be interpreted as the TOS IP Precedence, this property is also used to filter on IP Precedence. Similarly, the IPv6 Traffic
	 * Class field is also filtered using the value(s) in this property. HdrDSCP is defined as an array, to provide the ability to specify several
	 * discrete DSCPs in a single instance of IPHeadersFilter, that would be OR'ed together to define the filter criteria. If a value for this
	 * property is not provided, then the filter does not consider HdrDSCP in selecting matching packets, i.e., HdrDSCP matches for all values.
	 * 
	 * @param short[] new hdrDSCP property value
	 * @exception Exception
	 */
	public void setHdrDSCP(short[] hdrDSCP) {

		this.hdrDSCP = hdrDSCP;
	} // setHdrDSCP

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property hdrFlowLabel.
	 */
	private short[]	hdrFlowLabel;

	/**
	 * This method returns the IPHeadersFilter.hdrFlowLabel property value. This property is described as follows:
	 * 
	 * The 20-bit Flow Label field in the IPv6 header may be used by a source to label sequences of packets for which it requests special handling by
	 * the IPv6 devices, such as non-default quality of service or 'real-time' service. In the filter, this 20-bit string is encoded in a 24-bit
	 * octetstring by right-adjusting the value and padding on the left with b'0000'. If a value for this property is not provided, then the filter
	 * does not consider HdrFlowLabel in selecting matching packets, i.e., HdrFlowLabel matches for all values.
	 * 
	 * @return short[] current hdrFlowLabel property value
	 * @exception Exception
	 */
	public short[] getHdrFlowLabel() {

		return this.hdrFlowLabel;
	} // getHdrFlowLabel

	/**
	 * This method sets the IPHeadersFilter.hdrFlowLabel property value. This property is described as follows:
	 * 
	 * The 20-bit Flow Label field in the IPv6 header may be used by a source to label sequences of packets for which it requests special handling by
	 * the IPv6 devices, such as non-default quality of service or 'real-time' service. In the filter, this 20-bit string is encoded in a 24-bit
	 * octetstring by right-adjusting the value and padding on the left with b'0000'. If a value for this property is not provided, then the filter
	 * does not consider HdrFlowLabel in selecting matching packets, i.e., HdrFlowLabel matches for all values.
	 * 
	 * @param short[] new hdrFlowLabel property value
	 * @exception Exception
	 */
	public void setHdrFlowLabel(short[] hdrFlowLabel) {

		this.hdrFlowLabel = hdrFlowLabel;
	} // setHdrFlowLabel

} // Class IPHeadersFilter
