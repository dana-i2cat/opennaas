/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class ConditioningService as well as methods comparable to
 * the invokeMethods defined for this class. This Class implements the ConditioningServiceBean Interface. The CIM class ConditioningService is
 * described as follows:
 * 
 * ConditioningService represents the ability to define how traffic is conditioned in the data-forwarding path of a device. The subclasses of
 * ConditioningService define the particular types of conditioning that are done. These are the services performed by a classifier, a meter, a marker,
 * a dropper, a queue, and a scheduler. Other, more sophisticated types of conditioning may be defined in the future. ConditioningService is a
 * concrete class because its superclass (ForwardingService) is concrete. While this class can be instantiated, an instance of it does not accomplish
 * anything, because the nature of the conditioning, and the parameters that control it, are specified only in the subclasses of ConditioningService.
 * Two associations in which ConditioningService participates are critical to its usage in QoS - QoSConditioningSubService and NextService.
 * QoSConditioningSubService aggregates ConditioningServices into a particular QoS service (such as AF), to describe the specific conditioning
 * functionality that underlies that QoSService in a particular device. NextService indicates the subsequent conditioning service(s) for different
 * traffic streams.
 */
public class ConditioningService extends Service implements Serializable {

	/**
	 * This constructor creates a ConditioningServiceBeanImpl Class which implements the ConditioningServiceBean Interface, and encapsulates the CIM
	 * class ConditioningService in a Java Bean. The CIM class ConditioningService is described as follows:
	 * 
	 * ConditioningService represents the ability to define how traffic is conditioned in the data-forwarding path of a device. The subclasses of
	 * ConditioningService define the particular types of conditioning that are done. These are the services performed by a classifier, a meter, a
	 * marker, a dropper, a queue, and a scheduler. Other, more sophisticated types of conditioning may be defined in the future. ConditioningService
	 * is a concrete class because its superclass (ForwardingService) is concrete. While this class can be instantiated, an instance of it does not
	 * accomplish anything, because the nature of the conditioning, and the parameters that control it, are specified only in the subclasses of
	 * ConditioningService. Two associations in which ConditioningService participates are critical to its usage in QoS - QoSConditioningSubService
	 * and NextService. QoSConditioningSubService aggregates ConditioningServices into a particular QoS service (such as AF), to describe the specific
	 * conditioning functionality that underlies that QoSService in a particular device. NextService indicates the subsequent conditioning service(s)
	 * for different traffic streams.
	 */
	public ConditioningService() {
	};

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property enabled.
	 */
	@Deprecated
	private boolean	enabled;

	/**
	 * This method returns the ConditioningService.enabled property value. This property is described as follows:
	 * 
	 * This property is a boolean that, if TRUE, signifies that one or more conditioning functions can be performed on traffic encountered by this
	 * ConditioningService. This allows one or more ConditioningServices to be enabled or disabled to provide different types of conditioning for
	 * traffic. Enabled is deprecated in lieu of a similar (but more generally and completely defined) property which is inherited.
	 * 
	 * @return boolean current enabled property value
	 * @exception Exception
	 */
	@Deprecated
	public boolean isEnabled() {

		return this.enabled;
	} // getEnabled

	/**
	 * This method sets the ConditioningService.enabled property value. This property is described as follows:
	 * 
	 * This property is a boolean that, if TRUE, signifies that one or more conditioning functions can be performed on traffic encountered by this
	 * ConditioningService. This allows one or more ConditioningServices to be enabled or disabled to provide different types of conditioning for
	 * traffic. Enabled is deprecated in lieu of a similar (but more generally and completely defined) property which is inherited.
	 * 
	 * @param boolean new enabled property value
	 * @exception Exception
	 */
	@Deprecated
	public void setEnabled(boolean enabled) {

		this.enabled = enabled;
	} // setEnabled

} // Class ConditioningService
