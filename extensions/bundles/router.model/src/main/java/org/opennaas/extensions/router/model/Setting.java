/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class Setting as well as methods comparable to the
 * invokeMethods defined for this class. This Class implements the SettingBean Interface. The CIM class Setting is described as follows:
 * 
 * The Setting class represents configuration-related and operational parameters for one or more ManagedSystemElements. An Element can have multiple
 * Setting objects associated with it. The current operational values for the parameters of an Element are reflected by properties in the Element
 * itself or by properties in its associations. These properties do not have to be the same values present in the Setting object. For example, a modem
 * might have a Setting baud rate of 56Kb/sec but be operating at 19.2Kb/sec. Note: The CIM_SettingData class is very similar to CIM_Setting, yet both
 * classes are present in the model because many implementations have successfully used CIM_Setting. However, issues have arisen that could not be
 * resolved without defining a new class. Therefore, until a new major release occurs, both classes will exist in the model. Refer to the Core White
 * Paper for additional information. Setting instances can be aggregated together into higher-level Setting objects using ConcreteComponent
 * associations.
 */
public class Setting extends ManagedElement implements Serializable {

	/**
	 * This constructor creates a SettingBeanImpl Class which implements the SettingBean Interface, and encapsulates the CIM class Setting in a Java
	 * Bean. The CIM class Setting is described as follows:
	 * 
	 * The Setting class represents configuration-related and operational parameters for one or more ManagedSystemElements. An Element can have
	 * multiple Setting objects associated with it. The current operational values for the parameters of an Element are reflected by properties in the
	 * Element itself or by properties in its associations. These properties do not have to be the same values present in the Setting object. For
	 * example, a modem might have a Setting baud rate of 56Kb/sec but be operating at 19.2Kb/sec. Note: The CIM_SettingData class is very similar to
	 * CIM_Setting, yet both classes are present in the model because many implementations have successfully used CIM_Setting. However, issues have
	 * arisen that could not be resolved without defining a new class. Therefore, until a new major release occurs, both classes will exist in the
	 * model. Refer to the Core White Paper for additional information. Setting instances can be aggregated together into higher-level Setting objects
	 * using ConcreteComponent associations.
	 */
	protected Setting() {
	};

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property settingID.
	 */
	private String	settingID;

	/**
	 * This method returns the Setting.settingID property value. This property is described as follows:
	 * 
	 * The identifier by which the Setting object is known.
	 * 
	 * @return String current settingID property value
	 * @exception Exception
	 */
	public String getSettingID() {

		return this.settingID;
	} // getSettingID

	/**
	 * This method sets the Setting.settingID property value. This property is described as follows:
	 * 
	 * The identifier by which the Setting object is known.
	 * 
	 * @param String
	 *            new settingID property value
	 * @exception Exception
	 */
	public void setSettingID(String settingID) {

		this.settingID = settingID;
	} // setSettingID

} // Class Setting
