/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.*;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class HeadTailDropQueueBinding as well as methods comparable
 * to the invokeMethods defined for this class. This Class implements the HeadTailDropQueueBindingBean Interface. The CIM class
 * HeadTailDropQueueBinding is described as follows:
 * 
 * This association describes the relationship between a head or tail dropper and the queue that it monitors to determine when to drop traffic. The
 * referenced queue's depth is compared against the Dropper's threshold property. Although the dropper drops from only one queue, the drop decision
 * may be influenced by the state of several queues. The rule for combining the multiple inputs is simple addition: if the sum of the lengths of the
 * monitored queues exceeds the dropper's QueueThreshold value, then packets are dropped. Note that this rule for combining inputs may be overridden.
 */
public class HeadTailDropQueueBinding extends Dependency implements
		Serializable {

	/**
	 * This constructor creates a HeadTailDropQueueBindingBeanImpl Class which implements the HeadTailDropQueueBindingBean Interface, and encapsulates
	 * the CIM class HeadTailDropQueueBinding in a Java Bean. The CIM class HeadTailDropQueueBinding is described as follows:
	 * 
	 * This association describes the relationship between a head or tail dropper and the queue that it monitors to determine when to drop traffic.
	 * The referenced queue's depth is compared against the Dropper's threshold property. Although the dropper drops from only one queue, the drop
	 * decision may be influenced by the state of several queues. The rule for combining the multiple inputs is simple addition: if the sum of the
	 * lengths of the monitored queues exceeds the dropper's QueueThreshold value, then packets are dropped. Note that this rule for combining inputs
	 * may be overridden.
	 */
	public HeadTailDropQueueBinding() {
	};

	/**
	 * This method create an Association of the type HeadTailDropQueueBinding between one QueuingService object and HeadTailDropper object
	 */
	public static HeadTailDropQueueBinding link(QueuingService
			antecedent, HeadTailDropper dependent) {

		return (HeadTailDropQueueBinding) Association.link(HeadTailDropQueueBinding.class, antecedent, dependent);
	}// link

} // Class HeadTailDropQueueBinding
