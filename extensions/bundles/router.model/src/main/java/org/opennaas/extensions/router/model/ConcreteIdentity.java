/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.*;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class ConcreteIdentity as well as methods comparable to the
 * invokeMethods defined for this class. This Class implements the ConcreteIdentityBean Interface. The CIM class ConcreteIdentity is described as
 * follows:
 * 
 * CIM_ConcreteIdentity associates two elements that represent different aspects of the same underlying entity. It is defined as a concrete subclass
 * of the abstract CIM_LogicalIdentity class, to be used in place of many specific subclasses of LogicalIdentity that add no semantics, that is,
 * subclasses that do not clarify the type of identity, update cardinalities, or add or remove qualifiers. Note that when you define additional
 * semantics for LogicalIdentity, this class should not be subclassed. Specific semantics continue to be defined as subclasses of the abstract
 * CIM_LogicalIdentity. ConcreteIdentity is limited in its use as a concrete form of a general identity relationship. It was deemed more prudent to
 * create this concrete subclass than to change LogicalIdentity from an abstract to a concrete class. LogicalIdentity already had multiple abstract
 * subclasses in the CIM Schema, and wider industry usage and impact could not be anticipated.
 */
public class ConcreteIdentity extends LogicalIdentity implements Serializable
{

	/**
	 * This constructor creates a ConcreteIdentityBeanImpl Class which implements the ConcreteIdentityBean Interface, and encapsulates the CIM class
	 * ConcreteIdentity in a Java Bean. The CIM class ConcreteIdentity is described as follows:
	 * 
	 * CIM_ConcreteIdentity associates two elements that represent different aspects of the same underlying entity. It is defined as a concrete
	 * subclass of the abstract CIM_LogicalIdentity class, to be used in place of many specific subclasses of LogicalIdentity that add no semantics,
	 * that is, subclasses that do not clarify the type of identity, update cardinalities, or add or remove qualifiers. Note that when you define
	 * additional semantics for LogicalIdentity, this class should not be subclassed. Specific semantics continue to be defined as subclasses of the
	 * abstract CIM_LogicalIdentity. ConcreteIdentity is limited in its use as a concrete form of a general identity relationship. It was deemed more
	 * prudent to create this concrete subclass than to change LogicalIdentity from an abstract to a concrete class. LogicalIdentity already had
	 * multiple abstract subclasses in the CIM Schema, and wider industry usage and impact could not be anticipated.
	 */
	public ConcreteIdentity() {
	};

	/**
	 * This method create an Association of the type ConcreteIdentity between one ManagedElement object and ManagedElement object
	 */
	public static ConcreteIdentity link(ManagedElement
			systemElement, ManagedElement sameElement) {

		return (ConcreteIdentity) Association.link(ConcreteIdentity.class, systemElement, sameElement);
	}// link

} // Class ConcreteIdentity
