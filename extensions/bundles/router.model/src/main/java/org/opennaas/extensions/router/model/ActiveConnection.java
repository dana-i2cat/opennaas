/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class ActiveConnection as well as methods comparable to the
 * invokeMethods defined for this class. This Class implements the ActiveConnectionBean Interface. The CIM class ActiveConnection is described as
 * follows:
 * 
 * This association defines a connection that is currently communicating, or is configured to communicate, between two ServiceAccessPoints. It is used
 * when the connection is not treated as a ManagedElement itself (that is, with Status, statistics, and so on), but its existence is known. The SAPs
 * that are connected are typically at the same networking or application layer.
 */
public class ActiveConnection extends SAPSAPDependency implements Serializable
{

	/**
	 * This constructor creates a ActiveConnectionBeanImpl Class which implements the ActiveConnectionBean Interface, and encapsulates the CIM class
	 * ActiveConnection in a Java Bean. The CIM class ActiveConnection is described as follows:
	 * 
	 * This association defines a connection that is currently communicating, or is configured to communicate, between two ServiceAccessPoints. It is
	 * used when the connection is not treated as a ManagedElement itself (that is, with Status, statistics, and so on), but its existence is known.
	 * The SAPs that are connected are typically at the same networking or application layer.
	 */
	public ActiveConnection() {
	};

	/**
	 * This method create an Association of the type ActiveConnection between one ServiceAccessPoint object and ServiceAccessPoint object
	 */
	public static ActiveConnection link(ServiceAccessPoint
			antecedent, ServiceAccessPoint dependent) {

		return (ActiveConnection) Association.link(ActiveConnection.class, antecedent, dependent);
	}// link

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property TrafficType.
	 */
	@Deprecated
	public enum TrafficType {
		UNKNOWN,
		OTHER,
		UNICAST,
		BROADCAST,
		MULTICAST,
		ANYCAST
	}

	@Deprecated
	private TrafficType	trafficType;

	/**
	 * This method returns the ActiveConnection.trafficType property value. This property is described as follows:
	 * 
	 * Note: The use of this element is deprecated because it is incorrectly placed on the association. Unicast, broadcast, or other traffic types are
	 * not a function of the connection between the referenced endpoints, but rather are a function of the addressing, protocol and basic
	 * functionality of the endpoints. Deprecated description: The type of traffic that is carried over this connection.
	 * 
	 * @return int current trafficType property value
	 * @exception Exception
	 */
	@Deprecated
	public TrafficType getTrafficType() {

		return this.trafficType;
	} // getTrafficType

	/**
	 * This method sets the ActiveConnection.trafficType property value. This property is described as follows:
	 * 
	 * Note: The use of this element is deprecated because it is incorrectly placed on the association. Unicast, broadcast, or other traffic types are
	 * not a function of the connection between the referenced endpoints, but rather are a function of the addressing, protocol and basic
	 * functionality of the endpoints. Deprecated description: The type of traffic that is carried over this connection.
	 * 
	 * @param int new trafficType property value
	 * @exception Exception
	 */
	@Deprecated
	public void setTrafficType(TrafficType trafficType) {

		this.trafficType = trafficType;
	} // setTrafficType

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property otherTrafficDescription.
	 */
	@Deprecated
	private String	otherTrafficDescription;

	/**
	 * This method returns the ActiveConnection.otherTrafficDescription property value. This property is described as follows:
	 * 
	 * Note: The use of this element is deprecated because it is incorrectly placed on the association. Unicast, broadcast, or other traffic types are
	 * not a function of the connection between the referenced endpoints, but rather are a function of the addressing, protocol and basic
	 * functionality of the endpoints. Deprecated description: A string that describes the type of traffic that is being carried over this instance
	 * when its Type property is set, for example, to 1 (Other).
	 * 
	 * @return String current otherTrafficDescription property value
	 * @exception Exception
	 */
	@Deprecated
	public String getOtherTrafficDescription() {

		return this.otherTrafficDescription;
	} // getOtherTrafficDescription

	/**
	 * This method sets the ActiveConnection.otherTrafficDescription property value. This property is described as follows:
	 * 
	 * Note: The use of this element is deprecated because it is incorrectly placed on the association. Unicast, broadcast, or other traffic types are
	 * not a function of the connection between the referenced endpoints, but rather are a function of the addressing, protocol and basic
	 * functionality of the endpoints. Deprecated description: A string that describes the type of traffic that is being carried over this instance
	 * when its Type property is set, for example, to 1 (Other).
	 * 
	 * @param String
	 *            new otherTrafficDescription property value
	 * @exception Exception
	 */
	@Deprecated
	public void setOtherTrafficDescription(String otherTrafficDescription) {

		this.otherTrafficDescription = otherTrafficDescription;
	} // setOtherTrafficDescription

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property isUnidirectional.
	 */
	private boolean	isUnidirectional;

	/**
	 * This method returns the ActiveConnection.isUnidirectional property value. This property is described as follows:
	 * 
	 * TRUE means that this connection is unidirectional; FALSE means that this connection is bidirectional. When the connection is unidirectional,
	 * the "speaker" should be defined as the Antecedent reference. In a bidirectional connection, the selection of which AccessPoint is the
	 * Antecedent or Dependent is immaterial.
	 * 
	 * @return boolean current isUnidirectional property value
	 * @exception Exception
	 */
	public boolean isIsUnidirectional() {

		return this.isUnidirectional;
	} // getIsUnidirectional

	/**
	 * This method sets the ActiveConnection.isUnidirectional property value. This property is described as follows:
	 * 
	 * TRUE means that this connection is unidirectional; FALSE means that this connection is bidirectional. When the connection is unidirectional,
	 * the "speaker" should be defined as the Antecedent reference. In a bidirectional connection, the selection of which AccessPoint is the
	 * Antecedent or Dependent is immaterial.
	 * 
	 * @param boolean new isUnidirectional property value
	 * @exception Exception
	 */
	public void setIsUnidirectional(boolean isUnidirectional) {

		this.isUnidirectional = isUnidirectional;
	} // setIsUnidirectional

} // Class ActiveConnection
