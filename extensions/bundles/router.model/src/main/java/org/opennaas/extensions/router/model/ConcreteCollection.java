/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class ConcreteCollection as well as methods comparable to
 * the invokeMethods defined for this class. This Class implements the ConcreteCollectionBean Interface. The CIM class ConcreteCollection is described
 * as follows:
 * 
 * A concrete version of Collection. This class represents a generic and instantiable collection, such as a group of ComputerSystems (for example, a
 * pool of hosts available for executing jobs). It is defined as a concrete subclass of the abstract CIM_Collection class, to be used in place of many
 * specific subclasses that add no semantics. Note that when defining additional semantics for Collection, this class must not be subclassed. Specific
 * semantics continue to be defined as subclasses of the abstract CIM_Collection. ConcreteCollection is limited in its use as a concrete form of a
 * general collection or bag. It was deemed more prudent to create this concrete subclass than to change Collection from an abstract to a concrete
 * class.
 */
public class ConcreteCollection extends Collection implements Serializable {

	/**
	 * This constructor creates a ConcreteCollectionBeanImpl Class which implements the ConcreteCollectionBean Interface, and encapsulates the CIM
	 * class ConcreteCollection in a Java Bean. The CIM class ConcreteCollection is described as follows:
	 * 
	 * A concrete version of Collection. This class represents a generic and instantiable collection, such as a group of ComputerSystems (for example,
	 * a pool of hosts available for executing jobs). It is defined as a concrete subclass of the abstract CIM_Collection class, to be used in place
	 * of many specific subclasses that add no semantics. Note that when defining additional semantics for Collection, this class must not be
	 * subclassed. Specific semantics continue to be defined as subclasses of the abstract CIM_Collection. ConcreteCollection is limited in its use as
	 * a concrete form of a general collection or bag. It was deemed more prudent to create this concrete subclass than to change Collection from an
	 * abstract to a concrete class.
	 */
	public ConcreteCollection() {
	};

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property instanceID.
	 */
	private String	instanceID;

	/**
	 * This method returns the ConcreteCollection.instanceID property value. This property is described as follows:
	 * 
	 * Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. To ensure uniqueness
	 * within the NameSpace, the value of InstanceID should be constructed using the following 'preferred' algorithm: <OrgID>:<LocalID> Where <OrgID>
	 * and <LocalID> are separated by a colon ':', and where <OrgID> must include a unique name. It can be a copyrighted, trademarked, or otherwise
	 * unique name that is owned by the business entity that is creating or defining the InstanceID. Or, it could be a registered ID that is assigned
	 * to the business entity by a recognized global authority.(This requirement is similar to the <Schema Name>_<Class Name> structure of Schema
	 * class names.) In addition, to ensure uniqueness <OrgID> must not contain a colon (':'). When using this algorithm, the first colon to appear in
	 * InstanceID must appear between <OrgID> and <LocalID>. <LocalID> is chosen by the business entity and should not be re-used to identify
	 * different underlying (real-world) elements. If the above 'preferred' algorithm is not used, the defining entity must ensure that the resulting
	 * InstanceID is not re-used as any of the InstanceIDs produced by this or other providers for the NameSpace of this instance.
	 * 
	 * @return String current instanceID property value
	 * @exception Exception
	 */
	@Override
	public String getInstanceID() {

		return this.instanceID;
	} // getInstanceID

	/**
	 * This method sets the ConcreteCollection.instanceID property value. This property is described as follows:
	 * 
	 * Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. To ensure uniqueness
	 * within the NameSpace, the value of InstanceID should be constructed using the following 'preferred' algorithm: <OrgID>:<LocalID> Where <OrgID>
	 * and <LocalID> are separated by a colon ':', and where <OrgID> must include a unique name. It can be a copyrighted, trademarked, or otherwise
	 * unique name that is owned by the business entity that is creating or defining the InstanceID. Or, it could be a registered ID that is assigned
	 * to the business entity by a recognized global authority.(This requirement is similar to the <Schema Name>_<Class Name> structure of Schema
	 * class names.) In addition, to ensure uniqueness <OrgID> must not contain a colon (':'). When using this algorithm, the first colon to appear in
	 * InstanceID must appear between <OrgID> and <LocalID>. <LocalID> is chosen by the business entity and should not be re-used to identify
	 * different underlying (real-world) elements. If the above 'preferred' algorithm is not used, the defining entity must ensure that the resulting
	 * InstanceID is not re-used as any of the InstanceIDs produced by this or other providers for the NameSpace of this instance.
	 * 
	 * @param String
	 *            new instanceID property value
	 * @exception Exception
	 */
	@Override
	public void setInstanceID(String instanceID) {

		this.instanceID = instanceID;
	} // setInstanceID

} // Class ConcreteCollection
