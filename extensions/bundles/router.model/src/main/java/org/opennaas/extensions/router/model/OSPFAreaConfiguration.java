/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.Serializable;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class OSPFAreaConfiguration as well as methods comparable to
 * the invokeMethods defined for this class. This Class implements the OSPFAreaConfigurationBean Interface. The CIM class OSPFAreaConfiguration is
 * described as follows:
 * 
 * Each OSPF router has an association to one or more OSPF areas. Into these areas, a router advertises summaries filtered by specific address ranges.
 * This would natively be modeled as a ternary association (router/OSPFService to OSPFArea to RangeOfIPAddresses), which is problematic in some
 * implementations. To get around this issue, the OSPFAreaConfiguration class is defined to act as a focal point to bring together the router
 * (indicated as a ComputerSystem with an instance of OSPFService, associated to the AreaConfiguration using OSPFServiceConfiguration), the area
 * (indicated as an OSPFArea, associated to the AreaConfiguration using AreaOfConfiguration) and the address ranges for advertising (indicated as
 * instances of RangeOfIPAddresses, associated to the AreaConfiguration using RangesOfConfiguration). There would be an instance of
 * OSPFAreaConfiguration for each connected area of a router/OSPFService. When network administrators want to control the advertisements of OSPF
 * routers by filters, they first define the relevant ranges. In order for a router to handle a range, an instance of RangeOfIPAddresses MUST be
 * associated to the relevant OSPFAreaConfiguration (using the relationship, RangesOf Configuration). The association between the range and area
 * configuration contains a property defining the handling (EnableAdvertise) to allow or disallow advertisements in the range. Notes: - Because
 * RangeOfIPAddresses is scoped by a System (via the HostedCollection association), an instance of RangeOfIPAddresses would be associated to an
 * OSPFArea, satisfying this semantic. - This class is inherited from LogicalElement, because a suitable subclass 'lower' in the inheritance hiearchy
 * does not exist.
 */
public class OSPFAreaConfiguration extends LogicalElement implements
		Serializable {

	/* OSPFServiceConfiguration */
	/**
	 * 
	 * @return OSPFService associated with this OSPFAreaConfiguration through OSPFServiceConfiguration dependency.
	 */
	public OSPFService getOSPFService() {
		return (OSPFService) this.getFirstFromAssociatedElementByType(OSPFServiceConfiguration.class);
	}

	/**
	 * Associates service this OSPFAreaConfiguration through OSPFServiceConfiguration dependency.
	 * 
	 * @param service
	 */
	public void setOSPFService(OSPFService service) {
		if (service != null)
			OSPFServiceConfiguration.link(service, this);
	}

	/* AreaOfConfiguration */
	/**
	 * 
	 * @return OSPFArea assigned to this OSPFAreaConfiguration through AreaOfConfiguration dependency.
	 */
	public OSPFArea getOSPFArea() {
		return (OSPFArea) this.getFirstFromAssociatedElementByType(AreaOfConfiguration.class);
	}

	/**
	 * Assigns ospfArea to this OSPFAreaConfiguration through AreaOfConfiguration dependency.
	 * 
	 * @param ospfArea
	 */
	public void setOSPFArea(OSPFArea ospfArea) {
		if (ospfArea != null)
			AreaOfConfiguration.link(ospfArea, this);
	}

	/**
	 * This constructor creates a OSPFAreaConfigurationBeanImpl Class which implements the OSPFAreaConfigurationBean Interface, and encapsulates the
	 * CIM class OSPFAreaConfiguration in a Java Bean. The CIM class OSPFAreaConfiguration is described as follows:
	 * 
	 * Each OSPF router has an association to one or more OSPF areas. Into these areas, a router advertises summaries filtered by specific address
	 * ranges. This would natively be modeled as a ternary association (router/OSPFService to OSPFArea to RangeOfIPAddresses), which is problematic in
	 * some implementations. To get around this issue, the OSPFAreaConfiguration class is defined to act as a focal point to bring together the router
	 * (indicated as a ComputerSystem with an instance of OSPFService, associated to the AreaConfiguration using OSPFServiceConfiguration), the area
	 * (indicated as an OSPFArea, associated to the AreaConfiguration using AreaOfConfiguration) and the address ranges for advertising (indicated as
	 * instances of RangeOfIPAddresses, associated to the AreaConfiguration using RangesOfConfiguration). There would be an instance of
	 * OSPFAreaConfiguration for each connected area of a router/OSPFService. When network administrators want to control the advertisements of OSPF
	 * routers by filters, they first define the relevant ranges. In order for a router to handle a range, an instance of RangeOfIPAddresses MUST be
	 * associated to the relevant OSPFAreaConfiguration (using the relationship, RangesOf Configuration). The association between the range and area
	 * configuration contains a property defining the handling (EnableAdvertise) to allow or disallow advertisements in the range. Notes: - Because
	 * RangeOfIPAddresses is scoped by a System (via the HostedCollection association), an instance of RangeOfIPAddresses would be associated to an
	 * OSPFArea, satisfying this semantic. - This class is inherited from LogicalElement, because a suitable subclass 'lower' in the inheritance
	 * hiearchy does not exist.
	 */
	public OSPFAreaConfiguration() {
	};

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property instanceID.
	 */
	private String	instanceID;

	/**
	 * This method returns the OSPFAreaConfiguration.instanceID property value. This property is described as follows:
	 * 
	 * Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. In order to ensure
	 * uniqueness within the NameSpace, the value of InstanceID SHOULD be constructed using the following 'preferred' algorithm: <OrgID>:<OSPFService
	 * ID><Area Configuration ID> where: <OrgID> and the remainder of the InstanceID are separated by a colon ':', and where <OrgID> MUST include a
	 * copyrighted, trademarked or otherwise unique name that is owned by the business entity creating/defining the InstanceID, or is a registered ID
	 * that is assigned to the business entity by a recognized global authority. (This is similar to the <Schema Name>_<Class Name> structure of
	 * Schema class names.) In addition, to ensure uniqueness <OrgID> MUST NOT contain a colon (':'). When using this algorithm, the first colon to
	 * appear in InstanceID MUST appear between <OrgID> and the <OSPFService ID>. For DMTF defined instances, the 'preferred' algorithm MUST be used,
	 * and the <OrgID> set to 'CIM'. <OSPFService ID> and <Area Configuration ID> MUST specify vendor-unique identifiers for the OSPFService and
	 * AreaConfiguration.
	 * 
	 * @return String current instanceID property value
	 * @exception Exception
	 */
	@Override
	public String getInstanceID() {

		return this.instanceID;
	} // getInstanceID

	/**
	 * This method sets the OSPFAreaConfiguration.instanceID property value. This property is described as follows:
	 * 
	 * Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. In order to ensure
	 * uniqueness within the NameSpace, the value of InstanceID SHOULD be constructed using the following 'preferred' algorithm: <OrgID>:<OSPFService
	 * ID><Area Configuration ID> where: <OrgID> and the remainder of the InstanceID are separated by a colon ':', and where <OrgID> MUST include a
	 * copyrighted, trademarked or otherwise unique name that is owned by the business entity creating/defining the InstanceID, or is a registered ID
	 * that is assigned to the business entity by a recognized global authority. (This is similar to the <Schema Name>_<Class Name> structure of
	 * Schema class names.) In addition, to ensure uniqueness <OrgID> MUST NOT contain a colon (':'). When using this algorithm, the first colon to
	 * appear in InstanceID MUST appear between <OrgID> and the <OSPFService ID>. For DMTF defined instances, the 'preferred' algorithm MUST be used,
	 * and the <OrgID> set to 'CIM'. <OSPFService ID> and <Area Configuration ID> MUST specify vendor-unique identifiers for the OSPFService and
	 * AreaConfiguration.
	 * 
	 * @param String
	 *            new instanceID property value
	 * @exception Exception
	 */
	@Override
	public void setInstanceID(String instanceID) {

		this.instanceID = instanceID;
	} // setInstanceID

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property stubDefaultCost.
	 */
	private long	stubDefaultCost;

	/**
	 * This method returns the OSPFAreaConfiguration.stubDefaultCost property value. This property is described as follows:
	 * 
	 * This attribute contains the value of the default route that this router advertises into a stub area, see C.2 RFC 2328.
	 * 
	 * @return long current stubDefaultCost property value
	 * @exception Exception
	 */
	public long getStubDefaultCost() {

		return this.stubDefaultCost;
	} // getStubDefaultCost

	/**
	 * This method sets the OSPFAreaConfiguration.stubDefaultCost property value. This property is described as follows:
	 * 
	 * This attribute contains the value of the default route that this router advertises into a stub area, see C.2 RFC 2328.
	 * 
	 * @param long new stubDefaultCost property value
	 * @exception Exception
	 */
	public void setStubDefaultCost(long stubDefaultCost) {

		this.stubDefaultCost = stubDefaultCost;
	} // setStubDefaultCost

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property StubMetricType.
	 */

	public enum StubMetricType {
		OSPF_METRIC,
		COMPARABLE_COST,
		NONCOMPARABLE
	}

	private StubMetricType	stubMetricType;

	/**
	 * This method returns the OSPFAreaConfiguration.stubMetricType property value. This property is described as follows:
	 * 
	 * This attribute contains the type of metric advertised as a default route into a stub area, see 3. in RFC 1850.
	 * 
	 * @return int current stubMetricType property value
	 * @exception Exception
	 */
	public StubMetricType getStubMetricType() {

		return this.stubMetricType;
	} // getStubMetricType

	/**
	 * This method sets the OSPFAreaConfiguration.stubMetricType property value. This property is described as follows:
	 * 
	 * This attribute contains the type of metric advertised as a default route into a stub area, see 3. in RFC 1850.
	 * 
	 * @param int new stubMetricType property value
	 * @exception Exception
	 */
	public void setStubMetricType(StubMetricType stubMetricType) {

		this.stubMetricType = stubMetricType;
	} // setStubMetricType

} // Class OSPFAreaConfiguration
