/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class WiFiEndpointSettings as well as methods comparable to
 * the invokeMethods defined for this class. This Class implements the WiFiEndpointSettingsBean Interface. The CIM class WiFiEndpointSettings is
 * described as follows:
 * 
 * CIM_WiFiEndpointSettings describes setting data that can be applied to an instance of CIM_WiFiEndpoint to enable it to associate to a particular
 * Wi-Fi network.
 */
public class WiFiEndpointSettings extends SettingData implements Serializable
{

	/**
	 * This constructor creates a WiFiEndpointSettingsBeanImpl Class which implements the WiFiEndpointSettingsBean Interface, and encapsulates the CIM
	 * class WiFiEndpointSettings in a Java Bean. The CIM class WiFiEndpointSettings is described as follows:
	 * 
	 * CIM_WiFiEndpointSettings describes setting data that can be applied to an instance of CIM_WiFiEndpoint to enable it to associate to a
	 * particular Wi-Fi network.
	 */
	public WiFiEndpointSettings() {
	};

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property priority.
	 */
	private short	priority;

	/**
	 * This method returns the WiFiEndpointSettings.priority property value. This property is described as follows:
	 * 
	 * Priority shall indicate the priority of the instance among all WiFiEndpointSettings instances.
	 * 
	 * @return short current priority property value
	 * @exception Exception
	 */
	public short getPriority() {

		return this.priority;
	} // getPriority

	/**
	 * This method sets the WiFiEndpointSettings.priority property value. This property is described as follows:
	 * 
	 * Priority shall indicate the priority of the instance among all WiFiEndpointSettings instances.
	 * 
	 * @param short new priority property value
	 * @exception Exception
	 */
	public void setPriority(short priority) {

		this.priority = priority;
	} // setPriority

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property sSID.
	 */
	private String	sSID;

	/**
	 * This method returns the WiFiEndpointSettings.sSID property value. This property is described as follows:
	 * 
	 * SSID shall indicate the Service Set Identifier (SSID) that shall be used when the settings are applied to a WiFiEndpoint. An SSID identifies a
	 * wireless network.
	 * 
	 * @return String current sSID property value
	 * @exception Exception
	 */
	public String getSSID() {

		return this.sSID;
	} // getSSID

	/**
	 * This method sets the WiFiEndpointSettings.sSID property value. This property is described as follows:
	 * 
	 * SSID shall indicate the Service Set Identifier (SSID) that shall be used when the settings are applied to a WiFiEndpoint. An SSID identifies a
	 * wireless network.
	 * 
	 * @param String
	 *            new sSID property value
	 * @exception Exception
	 */
	public void setSSID(String sSID) {

		this.sSID = sSID;
	} // setSSID

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property BSSType.
	 */

	public enum BSSType {
		UNKNOWN,
		INDEPENDENT,
		INFRASTRUCTURE,
		DMTF_RESERVED
	}

	private BSSType	bSSType;

	/**
	 * This method returns the WiFiEndpointSettings.bSSType property value. This property is described as follows:
	 * 
	 * BSSType shall indicate the Basic Service Set (BSS) Type that shall be used when the settings are applied. A Basic Service Set is a set of
	 * stations controlled by a single coordination function. * Independent: the WiFiEndpoint is associated directly to another client station. *
	 * Infrastructure: the WiFiEndpoint is associated to a network via an access point.
	 * 
	 * @return int current bSSType property value
	 * @exception Exception
	 */
	public BSSType getBSSType() {

		return this.bSSType;
	} // getBSSType

	/**
	 * This method sets the WiFiEndpointSettings.bSSType property value. This property is described as follows:
	 * 
	 * BSSType shall indicate the Basic Service Set (BSS) Type that shall be used when the settings are applied. A Basic Service Set is a set of
	 * stations controlled by a single coordination function. * Independent: the WiFiEndpoint is associated directly to another client station. *
	 * Infrastructure: the WiFiEndpoint is associated to a network via an access point.
	 * 
	 * @param int new bSSType property value
	 * @exception Exception
	 */
	public void setBSSType(BSSType bSSType) {

		this.bSSType = bSSType;
	} // setBSSType

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property EncryptionMethod.
	 */

	public enum EncryptionMethod {
		OTHER,
		WEP,
		TKIP,
		CCMP,
		NONE,
		DMTF_RESERVED
	}

	private EncryptionMethod	encryptionMethod;

	/**
	 * This method returns the WiFiEndpointSettings.encryptionMethod property value. This property is described as follows:
	 * 
	 * EncryptionMethod shall specify the 802.11 encryption method used when the settings are applied. * Other (1): shall indicate that the desired
	 * encryption method is not specified in the list below. If this value is used, OtherEncryptionMethod should not be NULL and should not be empty.
	 * * WEP (2): shall indicate that the desired encryption method is Wired Equivalency Privacy (WEP). This value should be used only if
	 * AuthenticationMethod contains 2 ("Open System") or 3 ("Shared Key"). * TKIP (3): shall indicate that the desired encryption method is Temporal
	 * Key Integrity Protocol (TKIP). This value should be used only if AuthenticationMethod contains 4 ("WPA PSK"), 5 ("WPA IEEE 802.1x"), 6
	 * ("WPA2 PSK"), or 7 ("WPA2 IEEE 802.1x"). * CCMP (4): shall indicate that the desired encryption method is Counter Mode with Cipher Block
	 * Chaining Message Authentication Code Protocol (CCMP). This value should be used only if AuthenticationMethod contains 4 ("WPA PSK"), 5
	 * ("WPA IEEE 802.1x"), 6 ("WPA2 PSK"), or 7 ("WPA2 IEEE 802.1x"). * None (5): shall indicate that no encryption is desired. This value should be
	 * used only if AuthenticationMethod contains 2 ("Open System") or 3 ("Shared Key").
	 * 
	 * @return int current encryptionMethod property value
	 * @exception Exception
	 */
	public EncryptionMethod getEncryptionMethod() {

		return this.encryptionMethod;
	} // getEncryptionMethod

	/**
	 * This method sets the WiFiEndpointSettings.encryptionMethod property value. This property is described as follows:
	 * 
	 * EncryptionMethod shall specify the 802.11 encryption method used when the settings are applied. * Other (1): shall indicate that the desired
	 * encryption method is not specified in the list below. If this value is used, OtherEncryptionMethod should not be NULL and should not be empty.
	 * * WEP (2): shall indicate that the desired encryption method is Wired Equivalency Privacy (WEP). This value should be used only if
	 * AuthenticationMethod contains 2 ("Open System") or 3 ("Shared Key"). * TKIP (3): shall indicate that the desired encryption method is Temporal
	 * Key Integrity Protocol (TKIP). This value should be used only if AuthenticationMethod contains 4 ("WPA PSK"), 5 ("WPA IEEE 802.1x"), 6
	 * ("WPA2 PSK"), or 7 ("WPA2 IEEE 802.1x"). * CCMP (4): shall indicate that the desired encryption method is Counter Mode with Cipher Block
	 * Chaining Message Authentication Code Protocol (CCMP). This value should be used only if AuthenticationMethod contains 4 ("WPA PSK"), 5
	 * ("WPA IEEE 802.1x"), 6 ("WPA2 PSK"), or 7 ("WPA2 IEEE 802.1x"). * None (5): shall indicate that no encryption is desired. This value should be
	 * used only if AuthenticationMethod contains 2 ("Open System") or 3 ("Shared Key").
	 * 
	 * @param int new encryptionMethod property value
	 * @exception Exception
	 */
	public void setEncryptionMethod(EncryptionMethod encryptionMethod) {

		this.encryptionMethod = encryptionMethod;
	} // setEncryptionMethod

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property otherEncryptionMethod.
	 */
	private String	otherEncryptionMethod;

	/**
	 * This method returns the WiFiEndpointSettings.otherEncryptionMethod property value. This property is described as follows:
	 * 
	 * OtherEncryptionMethod shall specify the 802.11 encryption method used when the settings are applied if and only if EncryptionMethod contains
	 * "Other". The format of this string shall be vendor-specific.
	 * 
	 * @return String current otherEncryptionMethod property value
	 * @exception Exception
	 */
	public String getOtherEncryptionMethod() {

		return this.otherEncryptionMethod;
	} // getOtherEncryptionMethod

	/**
	 * This method sets the WiFiEndpointSettings.otherEncryptionMethod property value. This property is described as follows:
	 * 
	 * OtherEncryptionMethod shall specify the 802.11 encryption method used when the settings are applied if and only if EncryptionMethod contains
	 * "Other". The format of this string shall be vendor-specific.
	 * 
	 * @param String
	 *            new otherEncryptionMethod property value
	 * @exception Exception
	 */
	public void setOtherEncryptionMethod(String otherEncryptionMethod) {

		this.otherEncryptionMethod = otherEncryptionMethod;
	} // setOtherEncryptionMethod

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property AuthenticationMethod.
	 */

	public enum AuthenticationMethod {
		OTHER,
		OPEN_SYSTEM,
		SHARED_KEY,
		WPA_PSK,
		WPA_IEEE_802_1X,
		WPA2_PSK,
		WPA2_IEEE_802_1X,
		DMTF_RESERVED
	}

	private AuthenticationMethod	authenticationMethod;

	/**
	 * This method returns the WiFiEndpointSettings.authenticationMethod property value. This property is described as follows:
	 * 
	 * AuthenticationMethod shall specify the 802.11 authentication method used when the settings are applied. * Other (1): shall indicate that the
	 * desired authentication method is not specified in the list below. If AuthenticationMethod contains 1, OtherAuthenticationMethod should not be
	 * NULL and should not be empty. * Open System (2): shall indicate that the desired authentication method is Open System. AuthenticationMethod
	 * should contain 2 only if EncryptionMethod contains 2 ("WEP") or 5 ("None"). * Shared Key (3): shall indicate that the desired authentication
	 * method is Shared Key. AuthenticationMethod should contain 3 only if EncryptionMethod contains 2 ("WEP") or 5 ("None"). * WPA PSK (4): shall
	 * indicate that the desired authentication method is WPA (Wi-Fi Protected Access) PSK (Pre-Shared Key). AuthenticationMethod should contain 4
	 * only if EncryptionMethod contains 3 ("TKIP") or 4 ("CCMP"). * WPA IEEE 802.1x (5): shall indicate that the desired authentication method is WPA
	 * (Wi-Fi Protected Access) IEEE 802.1x. AuthenticationMethod should contain 5 only if EncryptionMethod contains 3 ("TKIP") or 4 ("CCMP"). * WPA2
	 * PSK (6): shall indicate that the desired authentication method is WPA2 (Wi-Fi Protected Access Version 2) PSK (Pre-Shared Key).
	 * AuthenticationMethod should containt 6 only if EncryptionMethod contains 3 ("TKIP") or 4 ("CCMP"). * WPA2 IEEE 802.1x (7): shall indicated that
	 * the desired authentication method is WPA2 (Wi-Fi Protected Access Version 2) IEEE 802.1x. AuthenticationMethod should contain 7 only if
	 * EncryptionMethod contains 3 ("TKIP") or 4 ("CCMP").
	 * 
	 * @return int current authenticationMethod property value
	 * @exception Exception
	 */
	public AuthenticationMethod getAuthenticationMethod() {

		return this.authenticationMethod;
	} // getAuthenticationMethod

	/**
	 * This method sets the WiFiEndpointSettings.authenticationMethod property value. This property is described as follows:
	 * 
	 * AuthenticationMethod shall specify the 802.11 authentication method used when the settings are applied. * Other (1): shall indicate that the
	 * desired authentication method is not specified in the list below. If AuthenticationMethod contains 1, OtherAuthenticationMethod should not be
	 * NULL and should not be empty. * Open System (2): shall indicate that the desired authentication method is Open System. AuthenticationMethod
	 * should contain 2 only if EncryptionMethod contains 2 ("WEP") or 5 ("None"). * Shared Key (3): shall indicate that the desired authentication
	 * method is Shared Key. AuthenticationMethod should contain 3 only if EncryptionMethod contains 2 ("WEP") or 5 ("None"). * WPA PSK (4): shall
	 * indicate that the desired authentication method is WPA (Wi-Fi Protected Access) PSK (Pre-Shared Key). AuthenticationMethod should contain 4
	 * only if EncryptionMethod contains 3 ("TKIP") or 4 ("CCMP"). * WPA IEEE 802.1x (5): shall indicate that the desired authentication method is WPA
	 * (Wi-Fi Protected Access) IEEE 802.1x. AuthenticationMethod should contain 5 only if EncryptionMethod contains 3 ("TKIP") or 4 ("CCMP"). * WPA2
	 * PSK (6): shall indicate that the desired authentication method is WPA2 (Wi-Fi Protected Access Version 2) PSK (Pre-Shared Key).
	 * AuthenticationMethod should containt 6 only if EncryptionMethod contains 3 ("TKIP") or 4 ("CCMP"). * WPA2 IEEE 802.1x (7): shall indicated that
	 * the desired authentication method is WPA2 (Wi-Fi Protected Access Version 2) IEEE 802.1x. AuthenticationMethod should contain 7 only if
	 * EncryptionMethod contains 3 ("TKIP") or 4 ("CCMP").
	 * 
	 * @param int new authenticationMethod property value
	 * @exception Exception
	 */
	public void setAuthenticationMethod(AuthenticationMethod
			authenticationMethod) {

		this.authenticationMethod = authenticationMethod;
	} // setAuthenticationMethod

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property otherAuthenticationMethod.
	 */
	private String	otherAuthenticationMethod;

	/**
	 * This method returns the WiFiEndpointSettings.otherAuthenticationMethod property value. This property is described as follows:
	 * 
	 * OtherAuthenticationMethod shall specify the 802.11 authentication method used when the settings are applied if and only if AuthenticationMethod
	 * contains "Other". The format of this string shall be vendor-specific.
	 * 
	 * @return String current otherAuthenticationMethod property value
	 * @exception Exception
	 */
	public String getOtherAuthenticationMethod() {

		return this.otherAuthenticationMethod;
	} // getOtherAuthenticationMethod

	/**
	 * This method sets the WiFiEndpointSettings.otherAuthenticationMethod property value. This property is described as follows:
	 * 
	 * OtherAuthenticationMethod shall specify the 802.11 authentication method used when the settings are applied if and only if AuthenticationMethod
	 * contains "Other". The format of this string shall be vendor-specific.
	 * 
	 * @param String
	 *            new otherAuthenticationMethod property value
	 * @exception Exception
	 */
	public void setOtherAuthenticationMethod(String otherAuthenticationMethod)
	{

		this.otherAuthenticationMethod = otherAuthenticationMethod;
	} // setOtherAuthenticationMethod

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property keys.
	 */
	private String[]	keys;

	/**
	 * This method returns the WiFiEndpointSettings.keys property value. This property is described as follows:
	 * 
	 * Keys shall contain the default WEP encryption keys. Keys should be non-NULL if and only if EncryptionMethod contains 2 ("WEP").
	 * 
	 * @return String[] current keys property value
	 * @exception Exception
	 */
	public String[] getKeys() {

		return this.keys;
	} // getKeys

	/**
	 * This method sets the WiFiEndpointSettings.keys property value. This property is described as follows:
	 * 
	 * Keys shall contain the default WEP encryption keys. Keys should be non-NULL if and only if EncryptionMethod contains 2 ("WEP").
	 * 
	 * @param String
	 *            [] new keys property value
	 * @exception Exception
	 */
	public void setKeys(String[] keys) {

		this.keys = keys;
	} // setKeys

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property keyIndex.
	 */
	private short	keyIndex;

	/**
	 * This method returns the WiFiEndpointSettings.keyIndex property value. This property is described as follows:
	 * 
	 * KeyIndex shall contain the index of the active key in the Keys array property. KeyIndex should be non-NULL if and only Keys is non-NULL.
	 * 
	 * @return short current keyIndex property value
	 * @exception Exception
	 */
	public short getKeyIndex() {

		return this.keyIndex;
	} // getKeyIndex

	/**
	 * This method sets the WiFiEndpointSettings.keyIndex property value. This property is described as follows:
	 * 
	 * KeyIndex shall contain the index of the active key in the Keys array property. KeyIndex should be non-NULL if and only Keys is non-NULL.
	 * 
	 * @param short new keyIndex property value
	 * @exception Exception
	 */
	public void setKeyIndex(short keyIndex) {

		this.keyIndex = keyIndex;
	} // setKeyIndex

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property pSKValue.
	 */
	private short[]	pSKValue;

	/**
	 * This method returns the WiFiEndpointSettings.pSKValue property value. This property is described as follows:
	 * 
	 * The actual binary value of a PSK (pre-shared key). PSKValue and PSKPassPhrase should not both be non-NULL. PSKValue should be NULL if
	 * AuthenticationMethod does not contain 4 ("WPA PSK") or 6 ("WPA2 PSK").
	 * 
	 * @return short[] current pSKValue property value
	 * @exception Exception
	 */
	public short[] getPSKValue() {

		return this.pSKValue;
	} // getPSKValue

	/**
	 * This method sets the WiFiEndpointSettings.pSKValue property value. This property is described as follows:
	 * 
	 * The actual binary value of a PSK (pre-shared key). PSKValue and PSKPassPhrase should not both be non-NULL. PSKValue should be NULL if
	 * AuthenticationMethod does not contain 4 ("WPA PSK") or 6 ("WPA2 PSK").
	 * 
	 * @param short[] new pSKValue property value
	 * @exception Exception
	 */
	public void setPSKValue(short[] pSKValue) {

		this.pSKValue = pSKValue;
	} // setPSKValue

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property pSKPassPhrase.
	 */
	private String	pSKPassPhrase;

	/**
	 * This method returns the WiFiEndpointSettings.pSKPassPhrase property value. This property is described as follows:
	 * 
	 * An ASCII alphanumeric string used to generate a PSK (pre-shared key). PSKPassPhrase and PSKValue should not both be non-NULL. PSKPassPhrase
	 * should be NULL if AuthenticationMethod does not contain 4 ("WPA PSK") or 6 ("WPA2 PSK").
	 * 
	 * @return String current pSKPassPhrase property value
	 * @exception Exception
	 */
	public String getPSKPassPhrase() {

		return this.pSKPassPhrase;
	} // getPSKPassPhrase

	/**
	 * This method sets the WiFiEndpointSettings.pSKPassPhrase property value. This property is described as follows:
	 * 
	 * An ASCII alphanumeric string used to generate a PSK (pre-shared key). PSKPassPhrase and PSKValue should not both be non-NULL. PSKPassPhrase
	 * should be NULL if AuthenticationMethod does not contain 4 ("WPA PSK") or 6 ("WPA2 PSK").
	 * 
	 * @param String
	 *            new pSKPassPhrase property value
	 * @exception Exception
	 */
	public void setPSKPassPhrase(String pSKPassPhrase) {

		this.pSKPassPhrase = pSKPassPhrase;
	} // setPSKPassPhrase

} // Class WiFiEndpointSettings
