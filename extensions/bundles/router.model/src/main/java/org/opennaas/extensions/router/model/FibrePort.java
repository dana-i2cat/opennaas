/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class FibrePort as well as methods comparable to the
 * invokeMethods defined for this class. This Class implements the FibrePortBean Interface. The CIM class FibrePort is described as follows:
 * 
 * Note: The use of the FibrePort class is deprecated because FibreChannel Adapter has been deprecated in lieu of FCPort and this class overlaps with
 * FCPort. The new FCPort class should be used in lieu of both FibreChannelAdapter and FibrePort. Deprecated description: FibrePort describes the
 * capabilities and management aspects of a Fibre Channel Port Device.
 */
@Deprecated
public class FibrePort extends LogicalPort implements Serializable {

	/**
	 * This constructor creates a FibrePortBeanImpl Class which implements the FibrePortBean Interface, and encapsulates the CIM class FibrePort in a
	 * Java Bean. The CIM class FibrePort is described as follows:
	 * 
	 * Note: The use of the FibrePort class is deprecated because FibreChannel Adapter has been deprecated in lieu of FCPort and this class overlaps
	 * with FCPort. The new FCPort class should be used in lieu of both FibreChannelAdapter and FibrePort. Deprecated description: FibrePort describes
	 * the capabilities and management aspects of a Fibre Channel Port Device.
	 */
	public FibrePort() {
	};

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property addressIdentifier.
	 */
	@Deprecated
	private long	addressIdentifier;

	/**
	 * This method returns the FibrePort.addressIdentifier property value. This property is described as follows:
	 * 
	 * Note: The use of this method has been deprecated. Deprecated description: An address value that is used to identify the source (S_ID) or
	 * destination (D_ID) of a frame. The FC-SW standard includes a table of special address identifier values and their meanings. Consult the FC-SW
	 * documentation for additional information.
	 * 
	 * @return long current addressIdentifier property value
	 * @exception Exception
	 */
	@Deprecated
	public long getAddressIdentifier() {

		return this.addressIdentifier;
	} // getAddressIdentifier

	/**
	 * This method sets the FibrePort.addressIdentifier property value. This property is described as follows:
	 * 
	 * Note: The use of this method has been deprecated. Deprecated description: An address value that is used to identify the source (S_ID) or
	 * destination (D_ID) of a frame. The FC-SW standard includes a table of special address identifier values and their meanings. Consult the FC-SW
	 * documentation for additional information.
	 * 
	 * @param long new addressIdentifier property value
	 * @exception Exception
	 */
	@Deprecated
	public void setAddressIdentifier(long addressIdentifier) {

		this.addressIdentifier = addressIdentifier;
	} // setAddressIdentifier

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property SupportedPortTypes.
	 */
	@Deprecated
	public enum SupportedPortTypes {
		UNKNOWN,
		N,
		NL_PRIVATE,
		NL_PUBLIC,
		E,
		F,
		FL,
		B
	}

	@Deprecated
	private SupportedPortTypes	supportedPortTypes;

	/**
	 * This method returns the FibrePort.supportedPortTypes property value. This property is described as follows:
	 * 
	 * Note: The use of this method has been deprecated. Deprecated description: An array that indicates the modes in which the Port can operate.
	 * PortType values describe the role and behavior of the Fibre Channel entity: "N" = Node Port, "NL" = Node Port supporting FC arbitrated loop,
	 * "E" = Expansion Port connecting fabric elements (for example, FC switches), "F"=Fabric (element) Port, "FL"=Fabric (element) Port supporting FC
	 * arbitrated loop, and "B"=Bridge Port. PortTypes are defined in the ANSI X3 standards. A particular mode can be listed multiple times in the
	 * SupportedPortTypes array in order to define that multiple, unique version levels are supported. Version information is defined in the
	 * PortTypeVersions property. Note, each entry of the SupportedPortTypes array is related to the entry in PortTypeVersions that is located at the
	 * same index.
	 * 
	 * @return int current supportedPortTypes property value
	 * @exception Exception
	 */
	@Deprecated
	public SupportedPortTypes getSupportedPortTypes() {

		return this.supportedPortTypes;
	} // getSupportedPortTypes

	/**
	 * This method sets the FibrePort.supportedPortTypes property value. This property is described as follows:
	 * 
	 * Note: The use of this method has been deprecated. Deprecated description: An array that indicates the modes in which the Port can operate.
	 * PortType values describe the role and behavior of the Fibre Channel entity: "N" = Node Port, "NL" = Node Port supporting FC arbitrated loop,
	 * "E" = Expansion Port connecting fabric elements (for example, FC switches), "F"=Fabric (element) Port, "FL"=Fabric (element) Port supporting FC
	 * arbitrated loop, and "B"=Bridge Port. PortTypes are defined in the ANSI X3 standards. A particular mode can be listed multiple times in the
	 * SupportedPortTypes array in order to define that multiple, unique version levels are supported. Version information is defined in the
	 * PortTypeVersions property. Note, each entry of the SupportedPortTypes array is related to the entry in PortTypeVersions that is located at the
	 * same index.
	 * 
	 * @param int new supportedPortTypes property value
	 * @exception Exception
	 */
	@Deprecated
	public void setSupportedPortTypes(SupportedPortTypes
			supportedPortTypes) {

		this.supportedPortTypes = supportedPortTypes;
	} // setSupportedPortTypes

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property portTypeVersions.
	 */
	@Deprecated
	private String[]	portTypeVersions;

	/**
	 * This method returns the FibrePort.portTypeVersions property value. This property is described as follows:
	 * 
	 * Note: The use of this method has been deprecated. Deprecated description: Version information for each of the SupportedPortTypes. A particular
	 * PortType (mode) can be listed multiple times in the SupportedPortTypes array in order to define multiple, unique version levels. Note, each
	 * entry of this array is related to the entry in SupportedPortTypes that is located at the same index.
	 * 
	 * @return String[] current portTypeVersions property value
	 * @exception Exception
	 */
	@Deprecated
	public String[] getPortTypeVersions() {

		return this.portTypeVersions;
	} // getPortTypeVersions

	/**
	 * This method sets the FibrePort.portTypeVersions property value. This property is described as follows:
	 * 
	 * Note: The use of this method has been deprecated. Deprecated description: Version information for each of the SupportedPortTypes. A particular
	 * PortType (mode) can be listed multiple times in the SupportedPortTypes array in order to define multiple, unique version levels. Note, each
	 * entry of this array is related to the entry in SupportedPortTypes that is located at the same index.
	 * 
	 * @param String
	 *            [] new portTypeVersions property value
	 * @exception Exception
	 */
	@Deprecated
	public void setPortTypeVersions(String[] portTypeVersions) {

		this.portTypeVersions = portTypeVersions;
	} // setPortTypeVersions

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property EnabledPortTypes.
	 */
	@Deprecated
	public enum EnabledPortTypes {
		UNKNOWN,
		N,
		NL_PRIVATE,
		NL_PUBLIC,
		E,
		F,
		FL,
		B
	}

	@Deprecated
	private EnabledPortTypes	enabledPortTypes;

	/**
	 * This method returns the FibrePort.enabledPortTypes property value. This property is described as follows:
	 * 
	 * Note: The use of this method has been deprecated. Deprecated description: The specific modes currently enabled for the Port. The values are
	 * equal to, or a subset of the values in the Supported PortTypes array.
	 * 
	 * @return int current enabledPortTypes property value
	 * @exception Exception
	 */
	@Deprecated
	public EnabledPortTypes getEnabledPortTypes() {

		return this.enabledPortTypes;
	} // getEnabledPortTypes

	/**
	 * This method sets the FibrePort.enabledPortTypes property value. This property is described as follows:
	 * 
	 * Note: The use of this method has been deprecated. Deprecated description: The specific modes currently enabled for the Port. The values are
	 * equal to, or a subset of the values in the Supported PortTypes array.
	 * 
	 * @param int new enabledPortTypes property value
	 * @exception Exception
	 */
	@Deprecated
	public void setEnabledPortTypes(EnabledPortTypes enabledPortTypes) {

		this.enabledPortTypes = enabledPortTypes;
	} // setEnabledPortTypes

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property enabledVersions.
	 */
	@Deprecated
	private String[]	enabledVersions;

	/**
	 * This method returns the FibrePort.enabledVersions property value. This property is described as follows:
	 * 
	 * Note: The use of this method has been deprecated. Deprecated description: Version information for each of the EnabledPortTypes. A particular
	 * PortType (mode) might be listed multiple times in the EnabledPortTypes array in order to define multiple, unique version levels. Note, each
	 * entry of this array is related to the entry in EnabledPortTypes that is located at the same index.
	 * 
	 * @return String[] current enabledVersions property value
	 * @exception Exception
	 */
	@Deprecated
	public String[] getEnabledVersions() {

		return this.enabledVersions;
	} // getEnabledVersions

	/**
	 * This method sets the FibrePort.enabledVersions property value. This property is described as follows:
	 * 
	 * Note: The use of this method has been deprecated. Deprecated description: Version information for each of the EnabledPortTypes. A particular
	 * PortType (mode) might be listed multiple times in the EnabledPortTypes array in order to define multiple, unique version levels. Note, each
	 * entry of this array is related to the entry in EnabledPortTypes that is located at the same index.
	 * 
	 * @param String
	 *            [] new enabledVersions property value
	 * @exception Exception
	 */
	@Deprecated
	public void setEnabledVersions(String[] enabledVersions) {

		this.enabledVersions = enabledVersions;
	} // setEnabledVersions

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property CurrentPortType.
	 */
	@Deprecated
	public enum CurrentPortType {
		UNKNOWN,
		N,
		NL_PRIVATE,
		NL_PUBLIC,
		E,
		F,
		FL,
		B
	}

	@Deprecated
	private CurrentPortType	currentPortType;

	/**
	 * This method returns the FibrePort.currentPortType property value. This property is described as follows:
	 * 
	 * Note: The use of this method has been deprecated. Deprecated description: The specific mode in which the Port is currently running. The value
	 * is one of the entries in the EnabledPortTypes array. The current port type or mode is dependent on the fibre technology. For example, in a
	 * public loop network, you might indicate a port type of "FL" (value=6) or "NL" (value=2).
	 * 
	 * @return int current currentPortType property value
	 * @exception Exception
	 */
	@Deprecated
	public CurrentPortType getCurrentPortType() {

		return this.currentPortType;
	} // getCurrentPortType

	/**
	 * This method sets the FibrePort.currentPortType property value. This property is described as follows:
	 * 
	 * Note: The use of this method has been deprecated. Deprecated description: The specific mode in which the Port is currently running. The value
	 * is one of the entries in the EnabledPortTypes array. The current port type or mode is dependent on the fibre technology. For example, in a
	 * public loop network, you might indicate a port type of "FL" (value=6) or "NL" (value=2).
	 * 
	 * @param int new currentPortType property value
	 * @exception Exception
	 */
	@Deprecated
	public void setCurrentPortType(CurrentPortType currentPortType) {

		this.currentPortType = currentPortType;
	} // setCurrentPortType

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property currentVersion.
	 */
	@Deprecated
	private String	currentVersion;

	/**
	 * This method returns the FibrePort.currentVersion property value. This property is described as follows:
	 * 
	 * Note: The use of this method has been deprecated. Deprecated description: Version information for the CurrentPortType that is active.
	 * 
	 * @return String current currentVersion property value
	 * @exception Exception
	 */
	@Deprecated
	public String getCurrentVersion() {

		return this.currentVersion;
	} // getCurrentVersion

	/**
	 * This method sets the FibrePort.currentVersion property value. This property is described as follows:
	 * 
	 * Note: The use of this method has been deprecated. Deprecated description: Version information for the CurrentPortType that is active.
	 * 
	 * @param String
	 *            new currentVersion property value
	 * @exception Exception
	 */
	@Deprecated
	public void setCurrentVersion(String currentVersion) {

		this.currentVersion = currentVersion;
	} // setCurrentVersion

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property aliasAddresses.
	 */
	@Deprecated
	private long[]	aliasAddresses;

	/**
	 * This method returns the FibrePort.aliasAddresses property value. This property is described as follows:
	 * 
	 * Note: The use of this method has been deprecated. Deprecated description: One or more address identifiers that can be recognized by the Port,
	 * in addition to its port-specific identifier. Multicast or hunt group addresses that are recognized by the Port would be identified in this
	 * array.
	 * 
	 * @return long[] current aliasAddresses property value
	 * @exception Exception
	 */
	@Deprecated
	public long[] getAliasAddresses() {

		return this.aliasAddresses;
	} // getAliasAddresses

	/**
	 * This method sets the FibrePort.aliasAddresses property value. This property is described as follows:
	 * 
	 * Note: The use of this method has been deprecated. Deprecated description: One or more address identifiers that can be recognized by the Port,
	 * in addition to its port-specific identifier. Multicast or hunt group addresses that are recognized by the Port would be identified in this
	 * array.
	 * 
	 * @param long[] new aliasAddresses property value
	 * @exception Exception
	 */
	@Deprecated
	public void setAliasAddresses(long[] aliasAddresses) {

		this.aliasAddresses = aliasAddresses;
	} // setAliasAddresses

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property lossOfSignalCounter.
	 */
	@Deprecated
	private long	lossOfSignalCounter;

	/**
	 * This method returns the FibrePort.lossOfSignalCounter property value. This property is described as follows:
	 * 
	 * Note: The use of this method has been deprecated. Deprecated description: Number of times that the signal has been lost on the Port since the
	 * last reset of the Device.
	 * 
	 * @return long current lossOfSignalCounter property value
	 * @exception Exception
	 */
	@Deprecated
	public long getLossOfSignalCounter() {

		return this.lossOfSignalCounter;
	} // getLossOfSignalCounter

	/**
	 * This method sets the FibrePort.lossOfSignalCounter property value. This property is described as follows:
	 * 
	 * Note: The use of this method has been deprecated. Deprecated description: Number of times that the signal has been lost on the Port since the
	 * last reset of the Device.
	 * 
	 * @param long new lossOfSignalCounter property value
	 * @exception Exception
	 */
	@Deprecated
	public void setLossOfSignalCounter(long lossOfSignalCounter) {

		this.lossOfSignalCounter = lossOfSignalCounter;
	} // setLossOfSignalCounter

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property lossOfSyncCounter.
	 */
	@Deprecated
	private long	lossOfSyncCounter;

	/**
	 * This method returns the FibrePort.lossOfSyncCounter property value. This property is described as follows:
	 * 
	 * Note: The use of this method has been deprecated. Deprecated description: Number of times that synchronization has been lost on the Port since
	 * the last reset of the Device. Synchronization is assumed lost after a timeout period that is identified by the Receiver TransmitterTimeout
	 * property.
	 * 
	 * @return long current lossOfSyncCounter property value
	 * @exception Exception
	 */
	@Deprecated
	public long getLossOfSyncCounter() {

		return this.lossOfSyncCounter;
	} // getLossOfSyncCounter

	/**
	 * This method sets the FibrePort.lossOfSyncCounter property value. This property is described as follows:
	 * 
	 * Note: The use of this method has been deprecated. Deprecated description: Number of times that synchronization has been lost on the Port since
	 * the last reset of the Device. Synchronization is assumed lost after a timeout period that is identified by the Receiver TransmitterTimeout
	 * property.
	 * 
	 * @param long new lossOfSyncCounter property value
	 * @exception Exception
	 */
	@Deprecated
	public void setLossOfSyncCounter(long lossOfSyncCounter) {

		this.lossOfSyncCounter = lossOfSyncCounter;
	} // setLossOfSyncCounter

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property cRCErrors.
	 */
	@Deprecated
	private long	cRCErrors;

	/**
	 * This method returns the FibrePort.cRCErrors property value. This property is described as follows:
	 * 
	 * Note: The use of this method has been deprecated. Deprecated description: Number of times that the CRC in a frame does not match the CRC
	 * computed by the receiver.
	 * 
	 * @return long current cRCErrors property value
	 * @exception Exception
	 */
	@Deprecated
	public long getCRCErrors() {

		return this.cRCErrors;
	} // getCRCErrors

	/**
	 * This method sets the FibrePort.cRCErrors property value. This property is described as follows:
	 * 
	 * Note: The use of this method has been deprecated. Deprecated description: Number of times that the CRC in a frame does not match the CRC
	 * computed by the receiver.
	 * 
	 * @param long new cRCErrors property value
	 * @exception Exception
	 */
	@Deprecated
	public void setCRCErrors(long cRCErrors) {

		this.cRCErrors = cRCErrors;
	} // setCRCErrors

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property invalidTransmissionWords.
	 */
	@Deprecated
	private long	invalidTransmissionWords;

	/**
	 * This method returns the FibrePort.invalidTransmissionWords property value. This property is described as follows:
	 * 
	 * Note: The use of this method has been deprecated. Deprecated description: The number of transmission words that had an 8b10b code violation in
	 * one or more of its characters, had a K28.5 in its second, third, or fourth character positions, or was an ordered set that had an incorrect
	 * Beginning Running Disparity.
	 * 
	 * @return long current invalidTransmissionWords property value
	 * @exception Exception
	 */
	@Deprecated
	public long getInvalidTransmissionWords() {

		return this.invalidTransmissionWords;
	} // getInvalidTransmissionWords

	/**
	 * This method sets the FibrePort.invalidTransmissionWords property value. This property is described as follows:
	 * 
	 * Note: The use of this method has been deprecated. Deprecated description: The number of transmission words that had an 8b10b code violation in
	 * one or more of its characters, had a K28.5 in its second, third, or fourth character positions, or was an ordered set that had an incorrect
	 * Beginning Running Disparity.
	 * 
	 * @param long new invalidTransmissionWords property value
	 * @exception Exception
	 */
	@Deprecated
	public void setInvalidTransmissionWords(long invalidTransmissionWords) {

		this.invalidTransmissionWords = invalidTransmissionWords;
	} // setInvalidTransmissionWords

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property framesTooShort.
	 */
	@Deprecated
	private long	framesTooShort;

	/**
	 * This method returns the FibrePort.framesTooShort property value. This property is described as follows:
	 * 
	 * Note: The use of this method has been deprecated. Deprecated description: The number of frames that were received that were shorter than 28
	 * octets. The value of 28 is calculated based on an assumption of 24 header bytes plus 4 CRC bytes. The count does not include SOF/EOF bytes that
	 * are not data.
	 * 
	 * @return long current framesTooShort property value
	 * @exception Exception
	 */
	@Deprecated
	public long getFramesTooShort() {

		return this.framesTooShort;
	} // getFramesTooShort

	/**
	 * This method sets the FibrePort.framesTooShort property value. This property is described as follows:
	 * 
	 * Note: The use of this method has been deprecated. Deprecated description: The number of frames that were received that were shorter than 28
	 * octets. The value of 28 is calculated based on an assumption of 24 header bytes plus 4 CRC bytes. The count does not include SOF/EOF bytes that
	 * are not data.
	 * 
	 * @param long new framesTooShort property value
	 * @exception Exception
	 */
	@Deprecated
	public void setFramesTooShort(long framesTooShort) {

		this.framesTooShort = framesTooShort;
	} // setFramesTooShort

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property framesTooLong.
	 */
	@Deprecated
	private long	framesTooLong;

	/**
	 * This method returns the FibrePort.framesTooLong property value. This property is described as follows:
	 * 
	 * Note: The use of this method has been deprecated. Deprecated description: The number of frames that were received that were longer than 2140
	 * octets. The value of 2140 is calculated based on an assumption of 24 header bytes plus 4 CRC bytes and 2112 bytes of payload.
	 * 
	 * @return long current framesTooLong property value
	 * @exception Exception
	 */
	@Deprecated
	public long getFramesTooLong() {

		return this.framesTooLong;
	} // getFramesTooLong

	/**
	 * This method sets the FibrePort.framesTooLong property value. This property is described as follows:
	 * 
	 * Note: The use of this method has been deprecated. Deprecated description: The number of frames that were received that were longer than 2140
	 * octets. The value of 2140 is calculated based on an assumption of 24 header bytes plus 4 CRC bytes and 2112 bytes of payload.
	 * 
	 * @param long new framesTooLong property value
	 * @exception Exception
	 */
	@Deprecated
	public void setFramesTooLong(long framesTooLong) {

		this.framesTooLong = framesTooLong;
	} // setFramesTooLong

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property elasticityBufferUnderruns.
	 */
	@Deprecated
	private long	elasticityBufferUnderruns;

	/**
	 * This method returns the FibrePort.elasticityBufferUnderruns property value. This property is described as follows:
	 * 
	 * Note: The use of this method has been deprecated. Deprecated description: The number of times that a fill word could not be inserted, when
	 * required. The Elasticity Buffer is defined in FC-AL. This event might cause data corruption and might indicate a configuration error or that a
	 * device is out of spec.
	 * 
	 * @return long current elasticityBufferUnderruns property value
	 * @exception Exception
	 */
	@Deprecated
	public long getElasticityBufferUnderruns() {

		return this.elasticityBufferUnderruns;
	} // getElasticityBufferUnderruns

	/**
	 * This method sets the FibrePort.elasticityBufferUnderruns property value. This property is described as follows:
	 * 
	 * Note: The use of this method has been deprecated. Deprecated description: The number of times that a fill word could not be inserted, when
	 * required. The Elasticity Buffer is defined in FC-AL. This event might cause data corruption and might indicate a configuration error or that a
	 * device is out of spec.
	 * 
	 * @param long new elasticityBufferUnderruns property value
	 * @exception Exception
	 */
	@Deprecated
	public void setElasticityBufferUnderruns(long elasticityBufferUnderruns)
	{

		this.elasticityBufferUnderruns = elasticityBufferUnderruns;
	} // setElasticityBufferUnderruns

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property elasticityBufferOverruns.
	 */
	@Deprecated
	private long	elasticityBufferOverruns;

	/**
	 * This method returns the FibrePort.elasticityBufferOverruns property value. This property is described as follows:
	 * 
	 * Note: The use of this method has been deprecated. Deprecated description: The number of times that a fill word could not be deleted, when
	 * required. The Elasticity Buffer is defined in FC-AL. This event might cause data corruption and might indicate a configuration error or a
	 * device out of spec.
	 * 
	 * @return long current elasticityBufferOverruns property value
	 * @exception Exception
	 */
	@Deprecated
	public long getElasticityBufferOverruns() {

		return this.elasticityBufferOverruns;
	} // getElasticityBufferOverruns

	/**
	 * This method sets the FibrePort.elasticityBufferOverruns property value. This property is described as follows:
	 * 
	 * Note: The use of this method has been deprecated. Deprecated description: The number of times that a fill word could not be deleted, when
	 * required. The Elasticity Buffer is defined in FC-AL. This event might cause data corruption and might indicate a configuration error or a
	 * device out of spec.
	 * 
	 * @param long new elasticityBufferOverruns property value
	 * @exception Exception
	 */
	@Deprecated
	public void setElasticityBufferOverruns(long elasticityBufferOverruns) {

		this.elasticityBufferOverruns = elasticityBufferOverruns;
	} // setElasticityBufferOverruns

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property receiverTransmitterTimeout.
	 */
	@Deprecated
	private long	receiverTransmitterTimeout;

	/**
	 * This method returns the FibrePort.receiverTransmitterTimeout property value. This property is described as follows:
	 * 
	 * Note: The use of this method has been deprecated. Deprecated description: Timeout value in milliseconds that is used to determine when loss of
	 * synchronization has occurred. The typical default is 100 msec.
	 * 
	 * @return long current receiverTransmitterTimeout property value
	 * @exception Exception
	 */
	@Deprecated
	public long getReceiverTransmitterTimeout() {

		return this.receiverTransmitterTimeout;
	} // getReceiverTransmitterTimeout

	/**
	 * This method sets the FibrePort.receiverTransmitterTimeout property value. This property is described as follows:
	 * 
	 * Note: The use of this method has been deprecated. Deprecated description: Timeout value in milliseconds that is used to determine when loss of
	 * synchronization has occurred. The typical default is 100 msec.
	 * 
	 * @param long new receiverTransmitterTimeout property value
	 * @exception Exception
	 */
	@Deprecated
	public void setReceiverTransmitterTimeout(long receiverTransmitterTimeout)
	{

		this.receiverTransmitterTimeout = receiverTransmitterTimeout;
	} // setReceiverTransmitterTimeout

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property BypassedState.
	 */
	@Deprecated
	public enum BypassedState {
		UNKNOWN,
		NOT_BYPASSED,
		BYPASSED,
		FORCED_INSERT
	}

	@Deprecated
	private BypassedState	bypassedState;

	/**
	 * This method returns the FibrePort.bypassedState property value. This property is described as follows:
	 * 
	 * Note: The use of this method has been deprecated. Deprecated description: Indication of whether the Port is currently bypassed (value=2) or not
	 * (value=1). A value of 3 ("Forced Insert") describes that the Port is forced active, when it would otherwise be "Bypassed".
	 * 
	 * @return int current bypassedState property value
	 * @exception Exception
	 */
	@Deprecated
	public BypassedState getBypassedState() {

		return this.bypassedState;
	} // getBypassedState

	/**
	 * This method sets the FibrePort.bypassedState property value. This property is described as follows:
	 * 
	 * Note: The use of this method has been deprecated. Deprecated description: Indication of whether the Port is currently bypassed (value=2) or not
	 * (value=1). A value of 3 ("Forced Insert") describes that the Port is forced active, when it would otherwise be "Bypassed".
	 * 
	 * @param int new bypassedState property value
	 * @exception Exception
	 */
	@Deprecated
	public void setBypassedState(BypassedState bypassedState) {

		this.bypassedState = bypassedState;
	} // setBypassedState

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property ConnectedMedia.
	 */
	@Deprecated
	public enum ConnectedMedia {
		UNKNOWN,
		OTHER,
		NO_MEDIA,
		COPPER_TWINAXIAL,
		FIBER_OPTIC,
		FIBER_SINGLE_MODE,
		FIBER_MULTIMODE
	}

	@Deprecated
	private ConnectedMedia	connectedMedia;

	/**
	 * This method returns the FibrePort.connectedMedia property value. This property is described as follows:
	 * 
	 * Note: The use of this method has been deprecated. Deprecated description: The type of cabling as sensed by the Port. Not all Fibre Ports are
	 * capable of providing this information. In this case, a value of 0, "Unknown", will be returned. Also, when single or multi-mode fiber cabling
	 * cannot be distinguished, the more general value 4, "Fiber-optic" can be specified.
	 * 
	 * @return int current connectedMedia property value
	 * @exception Exception
	 */
	@Deprecated
	public ConnectedMedia getConnectedMedia() {

		return this.connectedMedia;
	} // getConnectedMedia

	/**
	 * This method sets the FibrePort.connectedMedia property value. This property is described as follows:
	 * 
	 * Note: The use of this method has been deprecated. Deprecated description: The type of cabling as sensed by the Port. Not all Fibre Ports are
	 * capable of providing this information. In this case, a value of 0, "Unknown", will be returned. Also, when single or multi-mode fiber cabling
	 * cannot be distinguished, the more general value 4, "Fiber-optic" can be specified.
	 * 
	 * @param int new connectedMedia property value
	 * @exception Exception
	 */
	@Deprecated
	public void setConnectedMedia(ConnectedMedia connectedMedia) {

		this.connectedMedia = connectedMedia;
	} // setConnectedMedia

} // Class FibrePort
