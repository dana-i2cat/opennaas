/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class ElementSettingData as well as methods comparable to
 * the invokeMethods defined for this class. This Class implements the ElementSettingDataBean Interface. The CIM class ElementSettingData is described
 * as follows:
 * 
 * ElementSettingData represents the association between ManagedElements and applicable setting data. This association also describes whether this is
 * a default or current setting.
 */
public class ElementSettingData extends Association implements Serializable
{

	/**
	 * This constructor creates a ElementSettingDataBeanImpl Class which implements the ElementSettingDataBean Interface, and encapsulates the CIM
	 * class ElementSettingData in a Java Bean. The CIM class ElementSettingData is described as follows:
	 * 
	 * ElementSettingData represents the association between ManagedElements and applicable setting data. This association also describes whether this
	 * is a default or current setting.
	 */
	public ElementSettingData() {
	};

	/**
	 * This method create an Association of the type ElementSettingData between one ManagedElement object and SettingData object
	 */
	public static ElementSettingData link(ManagedElement
			managedElement, SettingData settingData) {

		return (ElementSettingData) Association.link(ElementSettingData.class, managedElement, settingData);
	}// link

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property IsDefault.
	 */

	public enum IsDefault {
		UNKNOWN,
		IS_DEFAULT,
		IS_NOT_DEFAULT
	}

	private IsDefault	isDefault;

	/**
	 * This method returns the ElementSettingData.isDefault property value. This property is described as follows:
	 * 
	 * An enumerated integer indicating that the referenced setting is a default setting for the element, or that this information is unknown.
	 * 
	 * @return int current isDefault property value
	 * @exception Exception
	 */
	public IsDefault getIsDefault() {

		return this.isDefault;
	} // getIsDefault

	/**
	 * This method sets the ElementSettingData.isDefault property value. This property is described as follows:
	 * 
	 * An enumerated integer indicating that the referenced setting is a default setting for the element, or that this information is unknown.
	 * 
	 * @param int new isDefault property value
	 * @exception Exception
	 */
	public void setIsDefault(IsDefault isDefault) {

		this.isDefault = isDefault;
	} // setIsDefault

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property IsCurrent.
	 */

	public enum IsCurrent {
		UNKNOWN,
		IS_CURRENT,
		IS_NOT_CURRENT
	}

	private IsCurrent	isCurrent;

	/**
	 * This method returns the ElementSettingData.isCurrent property value. This property is described as follows:
	 * 
	 * An enumerated integer indicating that the referenced setting is currently being used in the operation of the element, or that this information
	 * is unknown.
	 * 
	 * @return int current isCurrent property value
	 * @exception Exception
	 */
	public IsCurrent getIsCurrent() {

		return this.isCurrent;
	} // getIsCurrent

	/**
	 * This method sets the ElementSettingData.isCurrent property value. This property is described as follows:
	 * 
	 * An enumerated integer indicating that the referenced setting is currently being used in the operation of the element, or that this information
	 * is unknown.
	 * 
	 * @param int new isCurrent property value
	 * @exception Exception
	 */
	public void setIsCurrent(IsCurrent isCurrent) {

		this.isCurrent = isCurrent;
	} // setIsCurrent

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property IsNext.
	 */

	public enum IsNext {
		UNKNOWN,
		IS_NEXT,
		IS_NOT_NEXT,
		IS_NEXT_FOR_SINGLE_USE
	}

	private IsNext	isNext;

	/**
	 * This method returns the ElementSettingData.isNext property value. This property is described as follows:
	 * 
	 * An enumerated integer indicating whether or not the referenced setting is the next setting to be applied. For example, the application could
	 * take place on a re-initialization, reset, reconfiguration request. This could be a permanent setting, or a setting used only one time, as
	 * indicated by the flag. If it is a permanent setting then the setting is applied every time the managed element reinitializes, until this flag
	 * is manually reset. However, if it is single use, then the flag is automatically cleared after the settings are applied. Also note that if this
	 * flag is specified (i.e. set to value other than "Unknown"), then this takes precedence over any SettingData that may have been specified as
	 * Default. For example: If the managed element is a computer system, and the value of this flag is "Is Next", then the setting will be effective
	 * next time the system resets. And, unless this flag is changed, it will persist for subsequent system resets. However, if this flag is set to
	 * "Is Next For Single Use", then this setting will only be used once and the flag would be reset after that to "Is Not Next". So, in the above
	 * example, if the system reboots in a quick succession, the setting will not be used at the second reboot.
	 * 
	 * @return int current isNext property value
	 * @exception Exception
	 */
	public IsNext getIsNext() {

		return this.isNext;
	} // getIsNext

	/**
	 * This method sets the ElementSettingData.isNext property value. This property is described as follows:
	 * 
	 * An enumerated integer indicating whether or not the referenced setting is the next setting to be applied. For example, the application could
	 * take place on a re-initialization, reset, reconfiguration request. This could be a permanent setting, or a setting used only one time, as
	 * indicated by the flag. If it is a permanent setting then the setting is applied every time the managed element reinitializes, until this flag
	 * is manually reset. However, if it is single use, then the flag is automatically cleared after the settings are applied. Also note that if this
	 * flag is specified (i.e. set to value other than "Unknown"), then this takes precedence over any SettingData that may have been specified as
	 * Default. For example: If the managed element is a computer system, and the value of this flag is "Is Next", then the setting will be effective
	 * next time the system resets. And, unless this flag is changed, it will persist for subsequent system resets. However, if this flag is set to
	 * "Is Next For Single Use", then this setting will only be used once and the flag would be reset after that to "Is Not Next". So, in the above
	 * example, if the system reboots in a quick succession, the setting will not be used at the second reboot.
	 * 
	 * @param int new isNext property value
	 * @exception Exception
	 */
	public void setIsNext(IsNext isNext) {

		this.isNext = isNext;
	} // setIsNext

} // Class ElementSettingData
