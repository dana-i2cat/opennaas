/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class LaunchInContextSAP as well as methods comparable to
 * the invokeMethods defined for this class. This Class implements the LaunchInContextSAPBean Interface. The CIM class LaunchInContextSAP is described
 * as follows:
 * 
 * Each instance provides a flexible representation of a URI stored in the AccessInfo property that is used to launch a management service. This URI
 * may contain dynamic information in the form of parameters that can used to modify the URI for use in a specific context.
 */
public class LaunchInContextSAP extends RemoteServiceAccessPoint implements
		Serializable {

	/**
	 * This constructor creates a LaunchInContextSAPBeanImpl Class which implements the LaunchInContextSAPBean Interface, and encapsulates the CIM
	 * class LaunchInContextSAP in a Java Bean. The CIM class LaunchInContextSAP is described as follows:
	 * 
	 * Each instance provides a flexible representation of a URI stored in the AccessInfo property that is used to launch a management service. This
	 * URI may contain dynamic information in the form of parameters that can used to modify the URI for use in a specific context.
	 */
	public LaunchInContextSAP() {
	};

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property accessInfo.
	 */
	private String	accessInfo;

	/**
	 * This method returns the LaunchInContextSAP.accessInfo property value. This property is described as follows:
	 * 
	 * The URL may contain ${ParameterName} strings. The client is responsible for replacing such strings with the values of the corresponding
	 * parameters. (See the properties Parameter<Name, Description, Type, Constraint, and Derivation> below for various ways for a client to obtain
	 * those values.
	 * 
	 * @return String current accessInfo property value
	 * @exception Exception
	 */
	@Override
	public String getAccessInfo() {

		return this.accessInfo;
	} // getAccessInfo

	/**
	 * This method sets the LaunchInContextSAP.accessInfo property value. This property is described as follows:
	 * 
	 * The URL may contain ${ParameterName} strings. The client is responsible for replacing such strings with the values of the corresponding
	 * parameters. (See the properties Parameter<Name, Description, Type, Constraint, and Derivation> below for various ways for a client to obtain
	 * those values.
	 * 
	 * @param String
	 *            new accessInfo property value
	 * @exception Exception
	 */
	@Override
	public void setAccessInfo(String accessInfo) {

		this.accessInfo = accessInfo;
	} // setAccessInfo

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property parameterName.
	 */
	private String[]	parameterName;

	/**
	 * This method returns the LaunchInContextSAP.parameterName property value. This property is described as follows:
	 * 
	 * Each entry specifies the name of a parameter specified in the URL string stored in the AccessInfo property as ${ParameterName}. Parameter names
	 * should have the format orgName:specName:specVersion:parameterName. In this format: orgName shall be a trademarked, or otherwise owned name of
	 * the defining organization, specName together with specVersion shall name a specification within that organization and parameterName shall be a
	 * name defined by the specification. For DMTF defined parameters: orgName shall be 'DMTF'; specName shall be the DSP name of the specification
	 * defining the parameter; and specVersion shall have the form M.N.E where M is the major version number, N is the minor version number, and E
	 * shall be the errata number. Each number shall not include leading zeros.
	 * 
	 * @return String[] current parameterName property value
	 * @exception Exception
	 */
	public String[] getParameterName() {

		return this.parameterName;
	} // getParameterName

	/**
	 * This method sets the LaunchInContextSAP.parameterName property value. This property is described as follows:
	 * 
	 * Each entry specifies the name of a parameter specified in the URL string stored in the AccessInfo property as ${ParameterName}. Parameter names
	 * should have the format orgName:specName:specVersion:parameterName. In this format: orgName shall be a trademarked, or otherwise owned name of
	 * the defining organization, specName together with specVersion shall name a specification within that organization and parameterName shall be a
	 * name defined by the specification. For DMTF defined parameters: orgName shall be 'DMTF'; specName shall be the DSP name of the specification
	 * defining the parameter; and specVersion shall have the form M.N.E where M is the major version number, N is the minor version number, and E
	 * shall be the errata number. Each number shall not include leading zeros.
	 * 
	 * @param String
	 *            [] new parameterName property value
	 * @exception Exception
	 */
	public void setParameterName(String[] parameterName) {

		this.parameterName = parameterName;
	} // setParameterName

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property parameterDescription.
	 */
	private String[]	parameterDescription;

	/**
	 * This method returns the LaunchInContextSAP.parameterDescription property value. This property is described as follows:
	 * 
	 * Provides information about each parameter to display for each entry.
	 * 
	 * @return String[] current parameterDescription property value
	 * @exception Exception
	 */
	public String[] getParameterDescription() {

		return this.parameterDescription;
	} // getParameterDescription

	/**
	 * This method sets the LaunchInContextSAP.parameterDescription property value. This property is described as follows:
	 * 
	 * Provides information about each parameter to display for each entry.
	 * 
	 * @param String
	 *            [] new parameterDescription property value
	 * @exception Exception
	 */
	public void setParameterDescription(String[] parameterDescription) {

		this.parameterDescription = parameterDescription;
	} // setParameterDescription

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property parameterDerivation.
	 */
	private String[]	parameterDerivation;

	/**
	 * This method returns the LaunchInContextSAP.parameterDerivation property value. This property is described as follows:
	 * 
	 * Each non empty entry shall specify a derivation for the value of the corresponding ParameterName property. Each derivation shall be specified
	 * as an OCL Derive constraint. (See OMG Object Constraint Language, v2.0, http://www.omg.org/technology/documents/spec_catalog.htm) If specified,
	 * the derivation context is an instance of CIM_ManagedElement specified in the GetDerivedParametersForElement method of this class. The
	 * derivation context and the 'derive:' keywords are not explicitly specified here. Example: to return the Caption of the specified element, the
	 * entry would contain the string: "self.Caption". On retrieval, the values returned by the method are used to replace the corresponding
	 * ${ParameterName} string in Accessinfo or LaunchMessage.
	 * 
	 * @return String[] current parameterDerivation property value
	 * @exception Exception
	 */
	public String[] getParameterDerivation() {

		return this.parameterDerivation;
	} // getParameterDerivation

	/**
	 * This method sets the LaunchInContextSAP.parameterDerivation property value. This property is described as follows:
	 * 
	 * Each non empty entry shall specify a derivation for the value of the corresponding ParameterName property. Each derivation shall be specified
	 * as an OCL Derive constraint. (See OMG Object Constraint Language, v2.0, http://www.omg.org/technology/documents/spec_catalog.htm) If specified,
	 * the derivation context is an instance of CIM_ManagedElement specified in the GetDerivedParametersForElement method of this class. The
	 * derivation context and the 'derive:' keywords are not explicitly specified here. Example: to return the Caption of the specified element, the
	 * entry would contain the string: "self.Caption". On retrieval, the values returned by the method are used to replace the corresponding
	 * ${ParameterName} string in Accessinfo or LaunchMessage.
	 * 
	 * @param String
	 *            [] new parameterDerivation property value
	 * @exception Exception
	 */
	public void setParameterDerivation(String[] parameterDerivation) {

		this.parameterDerivation = parameterDerivation;
	} // setParameterDerivation

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property parameterConstraints.
	 */
	private String[]	parameterConstraints;

	/**
	 * This method returns the LaunchInContextSAP.parameterConstraints property value. This property is described as follows:
	 * 
	 * Each non-empty entry specifies additional constraints on the corresponding parameter value beyond those that can be inferred from the
	 * corresponding ParameterType entry. Each entry shall be empty if the corresponding ParameterDerivation value is not empty or null. Otherwise,
	 * this shall be an OCL Invariant constraint that limits the values of the string. The OCL context, and therefore, the 'self' variable shall refer
	 * to the parameter's value. For patterns, the OCL syntax is extended to include the use string function 'Like()' with the regular expression
	 * grammar as defined in DSP0200 Annex C, (http://www.dmtf.org/standards/published_documents/DSP0202_1.0.0.pdf).
	 * 
	 * @return String[] current parameterConstraints property value
	 * @exception Exception
	 */
	public String[] getParameterConstraints() {

		return this.parameterConstraints;
	} // getParameterConstraints

	/**
	 * This method sets the LaunchInContextSAP.parameterConstraints property value. This property is described as follows:
	 * 
	 * Each non-empty entry specifies additional constraints on the corresponding parameter value beyond those that can be inferred from the
	 * corresponding ParameterType entry. Each entry shall be empty if the corresponding ParameterDerivation value is not empty or null. Otherwise,
	 * this shall be an OCL Invariant constraint that limits the values of the string. The OCL context, and therefore, the 'self' variable shall refer
	 * to the parameter's value. For patterns, the OCL syntax is extended to include the use string function 'Like()' with the regular expression
	 * grammar as defined in DSP0200 Annex C, (http://www.dmtf.org/standards/published_documents/DSP0202_1.0.0.pdf).
	 * 
	 * @param String
	 *            [] new parameterConstraints property value
	 * @exception Exception
	 */
	public void setParameterConstraints(String[] parameterConstraints) {

		this.parameterConstraints = parameterConstraints;
	} // setParameterConstraints

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property ParameterType.
	 */

	public enum ParameterType {
		INTEGER,
		STRING,
		BOOLEAN,
		REAL,
		DATETIME,
		DMTF_RESERVED,
		VENDOR_SPECIFIC
	}

	private ParameterType	parameterType;

	/**
	 * This method returns the LaunchInContextSAP.parameterType property value. This property is described as follows:
	 * 
	 * Each entry specifies the type of the corresponding entry in the ParameterName property. If not specified, 3(string) is assumed.Note,
	 * ParameterConstraint entries can be used to specify valid value ranges.
	 * 
	 * @return int current parameterType property value
	 * @exception Exception
	 */
	public ParameterType getParameterType() {

		return this.parameterType;
	} // getParameterType

	/**
	 * This method sets the LaunchInContextSAP.parameterType property value. This property is described as follows:
	 * 
	 * Each entry specifies the type of the corresponding entry in the ParameterName property. If not specified, 3(string) is assumed.Note,
	 * ParameterConstraint entries can be used to specify valid value ranges.
	 * 
	 * @param int new parameterType property value
	 * @exception Exception
	 */
	public void setParameterType(ParameterType parameterType) {

		this.parameterType = parameterType;
	} // setParameterType

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property supportedFeatureName.
	 */
	private String[]	supportedFeatureName;

	/**
	 * This method returns the LaunchInContextSAP.supportedFeatureName property value. This property is described as follows:
	 * 
	 * Each entry names a feature supported by the service addressed by AccessInfo. Feature names shall have the format
	 * orgName:specName:specVersion:featureName,where orgName shall be a trademarked, or otherwise owned name of the defining organization, specName
	 * together with specVersion shall name a specification within that organization and featureName shall be a name defined by the specification. For
	 * DMTF defined features: orgName shall be 'DMTF'; specName shall be the DSP name of a management profile; and specVersion shall have the form
	 * M.N.E where M is the major version number, N is the minor version number, and E shall be the errata number. Each number shall not include
	 * leading zeros.
	 * 
	 * @return String[] current supportedFeatureName property value
	 * @exception Exception
	 */
	public String[] getSupportedFeatureName() {

		return this.supportedFeatureName;
	} // getSupportedFeatureName

	/**
	 * This method sets the LaunchInContextSAP.supportedFeatureName property value. This property is described as follows:
	 * 
	 * Each entry names a feature supported by the service addressed by AccessInfo. Feature names shall have the format
	 * orgName:specName:specVersion:featureName,where orgName shall be a trademarked, or otherwise owned name of the defining organization, specName
	 * together with specVersion shall name a specification within that organization and featureName shall be a name defined by the specification. For
	 * DMTF defined features: orgName shall be 'DMTF'; specName shall be the DSP name of a management profile; and specVersion shall have the form
	 * M.N.E where M is the major version number, N is the minor version number, and E shall be the errata number. Each number shall not include
	 * leading zeros.
	 * 
	 * @param String
	 *            [] new supportedFeatureName property value
	 * @exception Exception
	 */
	public void setSupportedFeatureName(String[] supportedFeatureName) {

		this.supportedFeatureName = supportedFeatureName;
	} // setSupportedFeatureName

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property supportedFeatureDescription.
	 */
	private String[]	supportedFeatureDescription;

	/**
	 * This method returns the LaunchInContextSAP.supportedFeatureDescription property value. This property is described as follows:
	 * 
	 * Each entry describes the corresponding feature named in SupportedFeatureName. Each entry should describe the required parameters and related
	 * information used to select the feature when the service is launched.
	 * 
	 * @return String[] current supportedFeatureDescription property value
	 * @exception Exception
	 */
	public String[] getSupportedFeatureDescription() {

		return this.supportedFeatureDescription;
	} // getSupportedFeatureDescription

	/**
	 * This method sets the LaunchInContextSAP.supportedFeatureDescription property value. This property is described as follows:
	 * 
	 * Each entry describes the corresponding feature named in SupportedFeatureName. Each entry should describe the required parameters and related
	 * information used to select the feature when the service is launched.
	 * 
	 * @param String
	 *            [] new supportedFeatureDescription property value
	 * @exception Exception
	 */
	public void setSupportedFeatureDescription(String[]
			supportedFeatureDescription) {

		this.supportedFeatureDescription = supportedFeatureDescription;
	} // setSupportedFeatureDescription

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property managedClasses.
	 */
	private String[]	managedClasses;

	/**
	 * This method returns the LaunchInContextSAP.managedClasses property value. This property is described as follows:
	 * 
	 * This property, together with ManagementIsRestricted defines the set of instances exposed in the namespace of this instance, that may be managed
	 * by the service addressed by this instance. The entries of this property identify the classes that such instances must be a kind of.
	 * 
	 * @return String[] current managedClasses property value
	 * @exception Exception
	 */
	public String[] getManagedClasses() {

		return this.managedClasses;
	} // getManagedClasses

	/**
	 * This method sets the LaunchInContextSAP.managedClasses property value. This property is described as follows:
	 * 
	 * This property, together with ManagementIsRestricted defines the set of instances exposed in the namespace of this instance, that may be managed
	 * by the service addressed by this instance. The entries of this property identify the classes that such instances must be a kind of.
	 * 
	 * @param String
	 *            [] new managedClasses property value
	 * @exception Exception
	 */
	public void setManagedClasses(String[] managedClasses) {

		this.managedClasses = managedClasses;
	} // setManagedClasses

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property managementIsRestricted.
	 */
	private boolean	managementIsRestricted;

	/**
	 * This method returns the LaunchInContextSAP.managementIsRestricted property value. This property is described as follows:
	 * 
	 * This property, together with ManagementIsRestricted defines the set of instances exposed in the namespace of this instance, that may be managed
	 * by the service addressed by this instance. If the value of this boolean is false, then all instances exposed by the namespace which are kinds
	 * of the classes named in the entries of ManagedClasses may be managed by the addressed service. If true, then only those instances that are
	 * associated via CIM_ManagedSAP may be managed by the addressed service. This value shall be true if such associations exist.
	 * 
	 * @return boolean current managementIsRestricted property value
	 * @exception Exception
	 */
	public boolean isManagementIsRestricted() {

		return this.managementIsRestricted;
	} // getManagementIsRestricted

	/**
	 * This method sets the LaunchInContextSAP.managementIsRestricted property value. This property is described as follows:
	 * 
	 * This property, together with ManagementIsRestricted defines the set of instances exposed in the namespace of this instance, that may be managed
	 * by the service addressed by this instance. If the value of this boolean is false, then all instances exposed by the namespace which are kinds
	 * of the classes named in the entries of ManagedClasses may be managed by the addressed service. If true, then only those instances that are
	 * associated via CIM_ManagedSAP may be managed by the addressed service. This value shall be true if such associations exist.
	 * 
	 * @param boolean new managementIsRestricted property value
	 * @exception Exception
	 */
	public void setManagementIsRestricted(boolean managementIsRestricted) {

		this.managementIsRestricted = managementIsRestricted;
	} // setManagementIsRestricted

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property launchMessage.
	 */
	private String	launchMessage;

	/**
	 * This method returns the LaunchInContextSAP.launchMessage property value. This property is described as follows:
	 * 
	 * LaunchMessage is a template for a message, to be sent to the URL specified in the AccessContext property. Like the AccessInfo property, this
	 * template may contain parameter value placeholders as ${ParameterName}, where ParameterName matches an entry in the ParameterName property. The
	 * format of the template is defined by the protocol specified by the value of the LaunchMessageProtocol. The client that uses this information to
	 * send a request is responsible for understanding the side-effects of passing the message. For instance if the message causes a service to be
	 * invoked, the client is responsible for handling reply messages.
	 * 
	 * @return String current launchMessage property value
	 * @exception Exception
	 */
	public String getLaunchMessage() {

		return this.launchMessage;
	} // getLaunchMessage

	/**
	 * This method sets the LaunchInContextSAP.launchMessage property value. This property is described as follows:
	 * 
	 * LaunchMessage is a template for a message, to be sent to the URL specified in the AccessContext property. Like the AccessInfo property, this
	 * template may contain parameter value placeholders as ${ParameterName}, where ParameterName matches an entry in the ParameterName property. The
	 * format of the template is defined by the protocol specified by the value of the LaunchMessageProtocol. The client that uses this information to
	 * send a request is responsible for understanding the side-effects of passing the message. For instance if the message causes a service to be
	 * invoked, the client is responsible for handling reply messages.
	 * 
	 * @param String
	 *            new launchMessage property value
	 * @exception Exception
	 */
	public void setLaunchMessage(String launchMessage) {

		this.launchMessage = launchMessage;
	} // setLaunchMessage

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property LaunchMessageProtocolOperation.
	 */

	public enum LaunchMessageProtocolOperation {
		IETF_HTTP_1_0_GET,
		IETF_HTTP_1_0_POST,
		IETF_HTTP_1_1_GET,
		IETF_HTTP_1_1_POST,
		DMTF_RESERVED,
		VENDOR_SPECIFIC
	}

	private LaunchMessageProtocolOperation	launchMessageProtocolOperation;

	/**
	 * This method returns the LaunchInContextSAP.launchMessageProtocolOperation property value. This property is described as follows:
	 * 
	 * This enumeration defines the protocol used to send the LaunchMessage. The format shall be
	 * orgName:protocolName:protocolVersion:protocolOperation,where orgName shall be a trademarked, or otherwise owned name of the defining
	 * organization, protocolName together with protocolVersion shall name protocol defined by that organization and protocolOperation shall name an
	 * operation of the protocol.
	 * 
	 * @return int current launchMessageProtocolOperation property value
	 * @exception Exception
	 */
	public LaunchMessageProtocolOperation
			getLaunchMessageProtocolOperation() {

		return this.launchMessageProtocolOperation;
	} // getLaunchMessageProtocolOperation

	/**
	 * This method sets the LaunchInContextSAP.launchMessageProtocolOperation property value. This property is described as follows:
	 * 
	 * This enumeration defines the protocol used to send the LaunchMessage. The format shall be
	 * orgName:protocolName:protocolVersion:protocolOperation,where orgName shall be a trademarked, or otherwise owned name of the defining
	 * organization, protocolName together with protocolVersion shall name protocol defined by that organization and protocolOperation shall name an
	 * operation of the protocol.
	 * 
	 * @param int new launchMessageProtocolOperation property value
	 * @exception Exception
	 */
	public void
			setLaunchMessageProtocolOperation(LaunchMessageProtocolOperation
					launchMessageProtocolOperation) {

		this.launchMessageProtocolOperation = launchMessageProtocolOperation;
	} // setLaunchMessageProtocolOperation

} // Class LaunchInContextSAP
