/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class IEEE8021xSettings as well as methods comparable to the
 * invokeMethods defined for this class. This Class implements the IEEE8021xSettingsBean Interface. The CIM class IEEE8021xSettings is described as
 * follows:
 * 
 * IEEE8021xSettings specifies a set of IEEE 802.1x Port-Based Network Access Control settings that can be applied to a ISO OSI layer 2
 * ProtocolEndpoint.
 */
public class IEEE8021xSettings extends SettingData implements Serializable {

	/**
	 * This constructor creates a IEEE8021xSettingsBeanImpl Class which implements the IEEE8021xSettingsBean Interface, and encapsulates the CIM class
	 * IEEE8021xSettings in a Java Bean. The CIM class IEEE8021xSettings is described as follows:
	 * 
	 * IEEE8021xSettings specifies a set of IEEE 802.1x Port-Based Network Access Control settings that can be applied to a ISO OSI layer 2
	 * ProtocolEndpoint.
	 */
	public IEEE8021xSettings() {
	};

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property AuthenticationProtocol.
	 */

	public enum AuthenticationProtocol {
		EAP_TLS,
		EAP_TTLS_MSCHAPV2,
		PEAPV0_EAP_MSCHAPV2,
		PEAPV1_EAP_GTC,
		EAP_FAST_MSCHAPV2,
		EAP_FAST_GTC,
		EAP_MD5,
		EAP_PSK,
		EAP_SIM,
		EAP_AKA,
		EAP_FAST_TLS,
		DMTF_RESERVED
	}

	private AuthenticationProtocol	authenticationProtocol;

	/**
	 * This method returns the IEEE8021xSettings.authenticationProtocol property value. This property is described as follows:
	 * 
	 * AuthenticationProtocol shall indicate the desired EAP (Extensible Authentication Protocol) type. * EAP-TLS (0): shall indicate that the desired
	 * EAP type is the Transport Layer Security EAP type specified in RFC 2716. If AuthenticationProtocol contains 0, Username should not be null,
	 * ServerCertificateName and ServerCertificateNameComparison may be null or not null, and RoamingIdentity, Password, Domain,
	 * ProtectedAccessCredential, PACPassword, and PSK should be null. * EAP-TTLS/MSCHAPv2 (1): shall indicate that the desired EAP type is the
	 * Tunneled TLS Authentication Protocol EAP type specified in draft-ietf-pppext-eap-ttls, with Microsoft PPP CHAP Extensions, Version 2 (MSCHAPv2)
	 * as the inner authentication method. If AuthenticationProtocol contains 1, Username and Password should not be null, RoamingIdentity,
	 * ServerCertificateName, ServerCertificateNameComparison, and Domain may be null or not null, and ProtectedAccessCredential, PACPassword, and PSK
	 * should be null. * PEAPv0/EAP-MSCHAPv2 (2): shall indicate that the desired EAP type is the Protected Extensible Authentication Protocol (PEAP)
	 * Version 0 EAP type specified in draft-kamath-pppext-peapv0, with Microsoft PPP CHAP Extensions, Version 2 (MSCHAPv2) as the inner
	 * authentication method. If AuthenticationProtocol contains2, Username and Password should not be null, RoamingIdentity, ServerCertificateName,
	 * ServerCertificateNameComparison, and Domain may be null or not null, and ProtectedAccessCredential, PACPassword, and PSK should be null. *
	 * PEAPv1/EAP-GTC (3): shall indicate that the desired EAP type is the Protected Extensible Authentication Protocol (PEAP) Version 1 EAP type
	 * specified in draft-josefsson-pppext-eap-tls-eap, with Generic Token Card (GTC) as the inner authentication method. If AuthenticationProtocol
	 * contains 3, Username and Password should not be null, RoamingIdentity, ServerCertificateName, ServerCertificateNameComparison, and Domain may
	 * be null or not null, and ProtectedAccessCredential, PACPassword, and PSK should be null. * EAP-FAST/MSCHAPv2 (4): shall indicate that the
	 * desired EAP type is the Flexible Authentication Extensible Authentication Protocol EAP type specified in IETF RFC 4851, with Microsoft PPP CHAP
	 * Extensions, Version 2 (MSCHAPv2) as the inner authentication method. If AuthenticationProtocol contains 4, Username and Password should not be
	 * null, RoamingIdentity, ServerCertificateName, ServerCertificateNameComparison, Domain, ProtectedAccessCredential, and PACPassword may be null
	 * or not null, and PSK should be null. * EAP-FAST/GTC (5): shall indicate that the desired EAP type is the Flexible Authentication Extensible
	 * Authentication Protocol EAP type specified in IETF RFC 4851, with Generic Token Card (GTC) as the inner authentication method. If
	 * AuthenticationProtocol contains 5, Username and Password should not be null, RoamingIdentity, ServerCertificateName,
	 * ServerCertificateNameComparison, Domain, ProtectedAccessCredential, and PACPassword may be null or not null, and PSK should be null. * EAP-MD5
	 * (6): shall indicate that the desired EAP type is the EAP MD5 authentication method, specified in RFC 3748. If AuthenticationProtocol contains
	 * 6, Username and Password should not be null, Domain may be null or not null, and RoamingIdentity, ServerCertificateName,
	 * ServerCertificateNameComparison, ProtectedAccessCredential, PACPassword, and PSK should be null. * EAP-PSK (7): shall indicate that the desired
	 * EAP type is the EAP-PSK (Pre-Shared Key) EAP type specified in RFC 4764. If AuthenticationProtocol contains 7, Username and PSK should not be
	 * null, Domain and RoamingIdentity may be null or not null, and Password, ServerCertificateName, ServerCertificateNameComparison,
	 * ProtectedAccessCredential, and PACPassword should be null. * EAP-SIM (8): shall indicate that the desired EAP type is the Extensible
	 * Authentication Protocol Method for Global System for Mobile Communications (GSM) Subscriber Identity Modules (EAP-SIM), specified in RFC 4186.
	 * If AuthenticationProtocol contains 8, Username and PSK should not be null, Domain and RoamingIdentity may be null or not null, and Password,
	 * ServerCertificateName, ServerCertificateNameComparison, ProtectedAccessCredential, and PACPassword should be null. * EAP-AKA (9): shall
	 * indicate that the desired EAP type is the EAP Method for 3rd Generation Authentication and Key Agreement (EAP-AKA), specified in RFC 4187. If
	 * AuthenticationProtocol contains 9, Username and PSK should not be null, Domain and RoamingIdentity may be null or not null, and Password,
	 * ServerCertificateName, ServerCertificateNameComparison, ProtectedAccessCredential, and PACPassword should be null. * EAP-FAST/TLS (10): shall
	 * indicate that the desired EAP type is the Flexible Authentication EAP type specified in IETF RFC 4851, with TLS as the inner authentication
	 * method. If AuthenticationProtocol contains 10, Username and Password should not be null, RoamingIdentity, ServerCertificateName,
	 * ServerCertificateNameComparison, Domain, ProtectedAccessCredential, and PACPassword may be null or not null, and PSK should be null.
	 * 
	 * @return int current authenticationProtocol property value
	 * @exception Exception
	 */
	public AuthenticationProtocol getAuthenticationProtocol() {

		return this.authenticationProtocol;
	} // getAuthenticationProtocol

	/**
	 * This method sets the IEEE8021xSettings.authenticationProtocol property value. This property is described as follows:
	 * 
	 * AuthenticationProtocol shall indicate the desired EAP (Extensible Authentication Protocol) type. * EAP-TLS (0): shall indicate that the desired
	 * EAP type is the Transport Layer Security EAP type specified in RFC 2716. If AuthenticationProtocol contains 0, Username should not be null,
	 * ServerCertificateName and ServerCertificateNameComparison may be null or not null, and RoamingIdentity, Password, Domain,
	 * ProtectedAccessCredential, PACPassword, and PSK should be null. * EAP-TTLS/MSCHAPv2 (1): shall indicate that the desired EAP type is the
	 * Tunneled TLS Authentication Protocol EAP type specified in draft-ietf-pppext-eap-ttls, with Microsoft PPP CHAP Extensions, Version 2 (MSCHAPv2)
	 * as the inner authentication method. If AuthenticationProtocol contains 1, Username and Password should not be null, RoamingIdentity,
	 * ServerCertificateName, ServerCertificateNameComparison, and Domain may be null or not null, and ProtectedAccessCredential, PACPassword, and PSK
	 * should be null. * PEAPv0/EAP-MSCHAPv2 (2): shall indicate that the desired EAP type is the Protected Extensible Authentication Protocol (PEAP)
	 * Version 0 EAP type specified in draft-kamath-pppext-peapv0, with Microsoft PPP CHAP Extensions, Version 2 (MSCHAPv2) as the inner
	 * authentication method. If AuthenticationProtocol contains2, Username and Password should not be null, RoamingIdentity, ServerCertificateName,
	 * ServerCertificateNameComparison, and Domain may be null or not null, and ProtectedAccessCredential, PACPassword, and PSK should be null. *
	 * PEAPv1/EAP-GTC (3): shall indicate that the desired EAP type is the Protected Extensible Authentication Protocol (PEAP) Version 1 EAP type
	 * specified in draft-josefsson-pppext-eap-tls-eap, with Generic Token Card (GTC) as the inner authentication method. If AuthenticationProtocol
	 * contains 3, Username and Password should not be null, RoamingIdentity, ServerCertificateName, ServerCertificateNameComparison, and Domain may
	 * be null or not null, and ProtectedAccessCredential, PACPassword, and PSK should be null. * EAP-FAST/MSCHAPv2 (4): shall indicate that the
	 * desired EAP type is the Flexible Authentication Extensible Authentication Protocol EAP type specified in IETF RFC 4851, with Microsoft PPP CHAP
	 * Extensions, Version 2 (MSCHAPv2) as the inner authentication method. If AuthenticationProtocol contains 4, Username and Password should not be
	 * null, RoamingIdentity, ServerCertificateName, ServerCertificateNameComparison, Domain, ProtectedAccessCredential, and PACPassword may be null
	 * or not null, and PSK should be null. * EAP-FAST/GTC (5): shall indicate that the desired EAP type is the Flexible Authentication Extensible
	 * Authentication Protocol EAP type specified in IETF RFC 4851, with Generic Token Card (GTC) as the inner authentication method. If
	 * AuthenticationProtocol contains 5, Username and Password should not be null, RoamingIdentity, ServerCertificateName,
	 * ServerCertificateNameComparison, Domain, ProtectedAccessCredential, and PACPassword may be null or not null, and PSK should be null. * EAP-MD5
	 * (6): shall indicate that the desired EAP type is the EAP MD5 authentication method, specified in RFC 3748. If AuthenticationProtocol contains
	 * 6, Username and Password should not be null, Domain may be null or not null, and RoamingIdentity, ServerCertificateName,
	 * ServerCertificateNameComparison, ProtectedAccessCredential, PACPassword, and PSK should be null. * EAP-PSK (7): shall indicate that the desired
	 * EAP type is the EAP-PSK (Pre-Shared Key) EAP type specified in RFC 4764. If AuthenticationProtocol contains 7, Username and PSK should not be
	 * null, Domain and RoamingIdentity may be null or not null, and Password, ServerCertificateName, ServerCertificateNameComparison,
	 * ProtectedAccessCredential, and PACPassword should be null. * EAP-SIM (8): shall indicate that the desired EAP type is the Extensible
	 * Authentication Protocol Method for Global System for Mobile Communications (GSM) Subscriber Identity Modules (EAP-SIM), specified in RFC 4186.
	 * If AuthenticationProtocol contains 8, Username and PSK should not be null, Domain and RoamingIdentity may be null or not null, and Password,
	 * ServerCertificateName, ServerCertificateNameComparison, ProtectedAccessCredential, and PACPassword should be null. * EAP-AKA (9): shall
	 * indicate that the desired EAP type is the EAP Method for 3rd Generation Authentication and Key Agreement (EAP-AKA), specified in RFC 4187. If
	 * AuthenticationProtocol contains 9, Username and PSK should not be null, Domain and RoamingIdentity may be null or not null, and Password,
	 * ServerCertificateName, ServerCertificateNameComparison, ProtectedAccessCredential, and PACPassword should be null. * EAP-FAST/TLS (10): shall
	 * indicate that the desired EAP type is the Flexible Authentication EAP type specified in IETF RFC 4851, with TLS as the inner authentication
	 * method. If AuthenticationProtocol contains 10, Username and Password should not be null, RoamingIdentity, ServerCertificateName,
	 * ServerCertificateNameComparison, Domain, ProtectedAccessCredential, and PACPassword may be null or not null, and PSK should be null.
	 * 
	 * @param int new authenticationProtocol property value
	 * @exception Exception
	 */
	public void setAuthenticationProtocol(AuthenticationProtocol
			authenticationProtocol) {

		this.authenticationProtocol = authenticationProtocol;
	} // setAuthenticationProtocol

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property roamingIdentity.
	 */
	private String	roamingIdentity;

	/**
	 * This method returns the IEEE8021xSettings.roamingIdentity property value. This property is described as follows:
	 * 
	 * A string presented to the authentication server in 802.1x protocol exchange. The AAA server determines the format of this string. Formats
	 * supported by AAA servers include: <domain>\<username>, <username>@<domain>.
	 * 
	 * @return String current roamingIdentity property value
	 * @exception Exception
	 */
	public String getRoamingIdentity() {

		return this.roamingIdentity;
	} // getRoamingIdentity

	/**
	 * This method sets the IEEE8021xSettings.roamingIdentity property value. This property is described as follows:
	 * 
	 * A string presented to the authentication server in 802.1x protocol exchange. The AAA server determines the format of this string. Formats
	 * supported by AAA servers include: <domain>\<username>, <username>@<domain>.
	 * 
	 * @param String
	 *            new roamingIdentity property value
	 * @exception Exception
	 */
	public void setRoamingIdentity(String roamingIdentity) {

		this.roamingIdentity = roamingIdentity;
	} // setRoamingIdentity

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property serverCertificateName.
	 */
	private String	serverCertificateName;

	/**
	 * This method returns the IEEE8021xSettings.serverCertificateName property value. This property is described as follows:
	 * 
	 * The name that shall be compared against the subject name field in the certificate provided by the AAA server. Shall contain either the fully
	 * qualified domain name of the AAA server, in which case ServerCertificateNameComparison shall contain "FullName", or the domain suffix of the
	 * AAA server, in which case ServerCertificateNameComparison shall contain "DomainSuffix".
	 * 
	 * @return String current serverCertificateName property value
	 * @exception Exception
	 */
	public String getServerCertificateName() {

		return this.serverCertificateName;
	} // getServerCertificateName

	/**
	 * This method sets the IEEE8021xSettings.serverCertificateName property value. This property is described as follows:
	 * 
	 * The name that shall be compared against the subject name field in the certificate provided by the AAA server. Shall contain either the fully
	 * qualified domain name of the AAA server, in which case ServerCertificateNameComparison shall contain "FullName", or the domain suffix of the
	 * AAA server, in which case ServerCertificateNameComparison shall contain "DomainSuffix".
	 * 
	 * @param String
	 *            new serverCertificateName property value
	 * @exception Exception
	 */
	public void setServerCertificateName(String serverCertificateName) {

		this.serverCertificateName = serverCertificateName;
	} // setServerCertificateName

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property ServerCertificateNameComparison.
	 */

	public enum ServerCertificateNameComparison {
		OTHER,
		FULLNAME,
		DOMAINSUFFIX,
		DMTF_RESERVED
	}

	private ServerCertificateNameComparison	serverCertificateNameComparison;

	/**
	 * This method returns the IEEE8021xSettings.serverCertificateNameComparison property value. This property is described as follows:
	 * 
	 * The comparison algorithm that shall be used by the server to validate the subject name field of the certificate presented by the AAA server
	 * against the value of the ServerCertificateName property.
	 * 
	 * @return int current serverCertificateNameComparison property value
	 * @exception Exception
	 */
	public ServerCertificateNameComparison
			getServerCertificateNameComparison() {

		return this.serverCertificateNameComparison;
	} // getServerCertificateNameComparison

	/**
	 * This method sets the IEEE8021xSettings.serverCertificateNameComparison property value. This property is described as follows:
	 * 
	 * The comparison algorithm that shall be used by the server to validate the subject name field of the certificate presented by the AAA server
	 * against the value of the ServerCertificateName property.
	 * 
	 * @param int new serverCertificateNameComparison property value
	 * @exception Exception
	 */
	public void
			setServerCertificateNameComparison(ServerCertificateNameComparison
					serverCertificateNameComparison) {

		this.serverCertificateNameComparison = serverCertificateNameComparison;
	} // setServerCertificateNameComparison

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property username.
	 */
	private String	username;

	/**
	 * This method returns the IEEE8021xSettings.username property value. This property is described as follows:
	 * 
	 * Identifies the user requesting access to the network.
	 * 
	 * @return String current username property value
	 * @exception Exception
	 */
	public String getUsername() {

		return this.username;
	} // getUsername

	/**
	 * This method sets the IEEE8021xSettings.username property value. This property is described as follows:
	 * 
	 * Identifies the user requesting access to the network.
	 * 
	 * @param String
	 *            new username property value
	 * @exception Exception
	 */
	public void setUsername(String username) {

		this.username = username;
	} // setUsername

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property password.
	 */
	private String	password;

	/**
	 * This method returns the IEEE8021xSettings.password property value. This property is described as follows:
	 * 
	 * A password associated with the user identified by Username within Domain.
	 * 
	 * @return String current password property value
	 * @exception Exception
	 */
	public String getPassword() {

		return this.password;
	} // getPassword

	/**
	 * This method sets the IEEE8021xSettings.password property value. This property is described as follows:
	 * 
	 * A password associated with the user identified by Username within Domain.
	 * 
	 * @param String
	 *            new password property value
	 * @exception Exception
	 */
	public void setPassword(String password) {

		this.password = password;
	} // setPassword

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property domain.
	 */
	private String	domain;

	/**
	 * This method returns the IEEE8021xSettings.domain property value. This property is described as follows:
	 * 
	 * The domain (also known as realm) within which Username is unique.
	 * 
	 * @return String current domain property value
	 * @exception Exception
	 */
	public String getDomain() {

		return this.domain;
	} // getDomain

	/**
	 * This method sets the IEEE8021xSettings.domain property value. This property is described as follows:
	 * 
	 * The domain (also known as realm) within which Username is unique.
	 * 
	 * @param String
	 *            new domain property value
	 * @exception Exception
	 */
	public void setDomain(String domain) {

		this.domain = domain;
	} // setDomain

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property protectedAccessCredential.
	 */
	private short[]	protectedAccessCredential;

	/**
	 * This method returns the IEEE8021xSettings.protectedAccessCredential property value. This property is described as follows:
	 * 
	 * A credential used by the supplicant and AAA server to establish a mutually authenticated encrypted tunnel for confidential user authentication.
	 * 
	 * @return short[] current protectedAccessCredential property value
	 * @exception Exception
	 */
	public short[] getProtectedAccessCredential() {

		return this.protectedAccessCredential;
	} // getProtectedAccessCredential

	/**
	 * This method sets the IEEE8021xSettings.protectedAccessCredential property value. This property is described as follows:
	 * 
	 * A credential used by the supplicant and AAA server to establish a mutually authenticated encrypted tunnel for confidential user authentication.
	 * 
	 * @param short[] new protectedAccessCredential property value
	 * @exception Exception
	 */
	public void setProtectedAccessCredential(short[]
			protectedAccessCredential) {

		this.protectedAccessCredential = protectedAccessCredential;
	} // setProtectedAccessCredential

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property pACPassword.
	 */
	private String	pACPassword;

	/**
	 * This method returns the IEEE8021xSettings.pACPassword property value. This property is described as follows:
	 * 
	 * Optional password to extract the PAC (Protected Access Credential) information from the PAC data.
	 * 
	 * @return String current pACPassword property value
	 * @exception Exception
	 */
	public String getPACPassword() {

		return this.pACPassword;
	} // getPACPassword

	/**
	 * This method sets the IEEE8021xSettings.pACPassword property value. This property is described as follows:
	 * 
	 * Optional password to extract the PAC (Protected Access Credential) information from the PAC data.
	 * 
	 * @param String
	 *            new pACPassword property value
	 * @exception Exception
	 */
	public void setPACPassword(String pACPassword) {

		this.pACPassword = pACPassword;
	} // setPACPassword

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property pSK.
	 */
	private short[]	pSK;

	/**
	 * This method returns the IEEE8021xSettings.pSK property value. This property is described as follows:
	 * 
	 * A pre-shared key used for pre-shared key EAP types such as EAP-PSK, EAP-SIM, and EAP-AKA.
	 * 
	 * @return short[] current pSK property value
	 * @exception Exception
	 */
	public short[] getPSK() {

		return this.pSK;
	} // getPSK

	/**
	 * This method sets the IEEE8021xSettings.pSK property value. This property is described as follows:
	 * 
	 * A pre-shared key used for pre-shared key EAP types such as EAP-PSK, EAP-SIM, and EAP-AKA.
	 * 
	 * @param short[] new pSK property value
	 * @exception Exception
	 */
	public void setPSK(short[] pSK) {

		this.pSK = pSK;
	} // setPSK

} // Class IEEE8021xSettings
