/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class ServiceAffectsElement as well as methods comparable to
 * the invokeMethods defined for this class. This Class implements the ServiceAffectsElementBean Interface. The CIM class ServiceAffectsElement is
 * described as follows:
 * 
 * ServiceAffectsElement represents an association between a Service and the ManagedElements that might be affected by its execution. Instantiating
 * this association indicates that running the service may change, manage, provide functionality for,or pose some burden on the ManagedElement. This
 * burden might affect performance, throughput, availability, and so on.
 */
public class ServiceAffectsElement extends Association implements Serializable
{

	/**
	 * This constructor creates a ServiceAffectsElementBeanImpl Class which implements the ServiceAffectsElementBean Interface, and encapsulates the
	 * CIM class ServiceAffectsElement in a Java Bean. The CIM class ServiceAffectsElement is described as follows:
	 * 
	 * ServiceAffectsElement represents an association between a Service and the ManagedElements that might be affected by its execution.
	 * Instantiating this association indicates that running the service may change, manage, provide functionality for,or pose some burden on the
	 * ManagedElement. This burden might affect performance, throughput, availability, and so on.
	 */
	public ServiceAffectsElement() {
	};

	/**
	 * This method create an Association of the type ServiceAffectsElement between one ManagedElement object and Service object
	 */
	public static ServiceAffectsElement link(ManagedElement
			affectedElement, Service affectingElement) {

		return (ServiceAffectsElement) Association.link(ServiceAffectsElement.class, affectedElement, affectingElement);
	}// link

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property ElementEffects.
	 */

	public enum ElementEffects {
		UNKNOWN,
		OTHER,
		EXCLUSIVE_USE,
		PERFORMANCE_IMPACT,
		ELEMENT_INTEGRITY,
		MANAGES,
		CONSUMES,
		ENHANCES_INTEGRITY,
		DEGRADES_INTEGRITY,
		ENHANCES_PERFORMANCE,
		DEGRADES_PERFORMANCE,
		DMTF_RESERVED,
		VENDOR_RESERVED
	}

	private ElementEffects	elementEffects;

	/**
	 * This method returns the ServiceAffectsElement.elementEffects property value. This property is described as follows:
	 * 
	 * An enumeration that describes the effect on the ManagedElement. This array corresponds to the OtherElementEffectsDescriptions array, where the
	 * latter provides details that are related to the high-level effects enumerated by this property. Additional detail is required if the
	 * ElementEffects array contains the value 1 (Other). The values are defined as follows: - Exclusive Use (2): No other Service may have this
	 * association to the element. - Performance Impact (3): Deprecated in favor of "Consumes", "Enhances Performance", or "Degrades Performance".
	 * Execution of the Service may enhance or degrade the performance of the element. This may be as a side-effect of execution or as an intended
	 * consequence of methods provided by the Service. - Element Integrity (4): Deprecated in favor of "Consumes", "Enhances Integrity", or
	 * "Degrades Integrity". Execution of the Service may enhance or degrade the integrity of the element. This may be as a side-effect of execution
	 * or as an intended consequence of methods provided by the Service. - Manages (5): The Service manages the element. - Consumes (6): Execution of
	 * the Service consumes some or all of the associated element as a consequence of running the Service. For example, the Service may consume CPU
	 * cycles, which may affect performance, or Storage which may affect both performance and integrity. (For instance, the lack of free storage can
	 * degrade integrity by reducing the ability to save state. ) "Consumes" may be used alone or in conjunction with other values, in particular,
	 * "Degrades Performance" and "Degrades Integrity". "Manages" and not "Consumes" should be used to reflect allocation services that may be
	 * provided by a Service. - Enhances Integrity (7): The Service may enhance integrity of the associated element. - Degrades Integrity (8): The
	 * Service may degrade integrity of the associated element. - Enhances Performance (9): The Service may enhance performance of the associated
	 * element. - Degrades Performance (10): The Service may degrade performance of the associated element.
	 * 
	 * @return int current elementEffects property value
	 * @exception Exception
	 */
	public ElementEffects getElementEffects() {

		return this.elementEffects;
	} // getElementEffects

	/**
	 * This method sets the ServiceAffectsElement.elementEffects property value. This property is described as follows:
	 * 
	 * An enumeration that describes the effect on the ManagedElement. This array corresponds to the OtherElementEffectsDescriptions array, where the
	 * latter provides details that are related to the high-level effects enumerated by this property. Additional detail is required if the
	 * ElementEffects array contains the value 1 (Other). The values are defined as follows: - Exclusive Use (2): No other Service may have this
	 * association to the element. - Performance Impact (3): Deprecated in favor of "Consumes", "Enhances Performance", or "Degrades Performance".
	 * Execution of the Service may enhance or degrade the performance of the element. This may be as a side-effect of execution or as an intended
	 * consequence of methods provided by the Service. - Element Integrity (4): Deprecated in favor of "Consumes", "Enhances Integrity", or
	 * "Degrades Integrity". Execution of the Service may enhance or degrade the integrity of the element. This may be as a side-effect of execution
	 * or as an intended consequence of methods provided by the Service. - Manages (5): The Service manages the element. - Consumes (6): Execution of
	 * the Service consumes some or all of the associated element as a consequence of running the Service. For example, the Service may consume CPU
	 * cycles, which may affect performance, or Storage which may affect both performance and integrity. (For instance, the lack of free storage can
	 * degrade integrity by reducing the ability to save state. ) "Consumes" may be used alone or in conjunction with other values, in particular,
	 * "Degrades Performance" and "Degrades Integrity". "Manages" and not "Consumes" should be used to reflect allocation services that may be
	 * provided by a Service. - Enhances Integrity (7): The Service may enhance integrity of the associated element. - Degrades Integrity (8): The
	 * Service may degrade integrity of the associated element. - Enhances Performance (9): The Service may enhance performance of the associated
	 * element. - Degrades Performance (10): The Service may degrade performance of the associated element.
	 * 
	 * @param int new elementEffects property value
	 * @exception Exception
	 */
	public void setElementEffects(ElementEffects elementEffects) {

		this.elementEffects = elementEffects;
	} // setElementEffects

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property otherElementEffectsDescriptions.
	 */
	private String[]	otherElementEffectsDescriptions;

	/**
	 * This method returns the ServiceAffectsElement.otherElementEffectsDescriptions property value. This property is described as follows:
	 * 
	 * Provides details for the effect at the corresponding array position in ElementEffects. This information is required if ElementEffects contains
	 * the value 1 (Other).
	 * 
	 * @return String[] current otherElementEffectsDescriptions property value
	 * @exception Exception
	 */
	public String[] getOtherElementEffectsDescriptions() {

		return this.otherElementEffectsDescriptions;
	} // getOtherElementEffectsDescriptions

	/**
	 * This method sets the ServiceAffectsElement.otherElementEffectsDescriptions property value. This property is described as follows:
	 * 
	 * Provides details for the effect at the corresponding array position in ElementEffects. This information is required if ElementEffects contains
	 * the value 1 (Other).
	 * 
	 * @param String
	 *            [] new otherElementEffectsDescriptions property value
	 * @exception Exception
	 */
	public void setOtherElementEffectsDescriptions(String[]
			otherElementEffectsDescriptions) {

		this.otherElementEffectsDescriptions = otherElementEffectsDescriptions;
	} // setOtherElementEffectsDescriptions

} // Class ServiceAffectsElement
