/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.*;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class ConcreteDependency as well as methods comparable to
 * the invokeMethods defined for this class. This Class implements the ConcreteDependencyBean Interface. The CIM class ConcreteDependency is described
 * as follows:
 * 
 * CIM_ConcreteDependency is a generic association used to establish dependency relationships between ManagedElements. It is defined as a concrete
 * subclass of the abstract CIM_Dependency class, to be used in place of many specific subclasses of Dependency that add no semantics, that is
 * subclasses that do not clarify the type of dependency, update cardinalities, or add or remove qualifiers. Note that when you define additional
 * semantics for Dependency, this class must not be subclassed. Specific semantics continue to be defined as subclasses of the abstract
 * CIM_Dependency. ConcreteDependency is limited in its use as a concrete form of a general dependency. It was deemed more prudent to create this
 * concrete subclass than to change Dependency from an abstract to a concrete class. Dependency already had multiple abstract subclasses in the CIM
 * Schema, and wider industry usage and impact could not be anticipated.
 */
public class ConcreteDependency extends Dependency implements Serializable {

	/**
	 * This constructor creates a ConcreteDependencyBeanImpl Class which implements the ConcreteDependencyBean Interface, and encapsulates the CIM
	 * class ConcreteDependency in a Java Bean. The CIM class ConcreteDependency is described as follows:
	 * 
	 * CIM_ConcreteDependency is a generic association used to establish dependency relationships between ManagedElements. It is defined as a concrete
	 * subclass of the abstract CIM_Dependency class, to be used in place of many specific subclasses of Dependency that add no semantics, that is
	 * subclasses that do not clarify the type of dependency, update cardinalities, or add or remove qualifiers. Note that when you define additional
	 * semantics for Dependency, this class must not be subclassed. Specific semantics continue to be defined as subclasses of the abstract
	 * CIM_Dependency. ConcreteDependency is limited in its use as a concrete form of a general dependency. It was deemed more prudent to create this
	 * concrete subclass than to change Dependency from an abstract to a concrete class. Dependency already had multiple abstract subclasses in the
	 * CIM Schema, and wider industry usage and impact could not be anticipated.
	 */
	public ConcreteDependency() {
	};

	/**
	 * This method create an Association of the type ConcreteDependency between one ManagedElement object and ManagedElement object
	 */
	public static ConcreteDependency link(ManagedElement
			antecedent, ManagedElement dependent) {

		return (ConcreteDependency) Association.link(ConcreteDependency.class, antecedent, dependent);
	}// link

} // Class ConcreteDependency
