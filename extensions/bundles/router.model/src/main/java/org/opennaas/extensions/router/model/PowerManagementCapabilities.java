/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class PowerManagementCapabilities as well as methods
 * comparable to the invokeMethods defined for this class. This Class implements the PowerManagementCapabilitiesBean Interface. The CIM class
 * PowerManagementCapabilities is described as follows:
 * 
 * A class derived from Capabilities that describes the power management aspects of an element (typically a system or device). The element's power
 * management capabilities are decoupled from a PowerManagementService, since a single service could apply to multiple elements, each with specific
 * capabilities.
 */
public class PowerManagementCapabilities extends Capabilities implements
		Serializable {

	/**
	 * This constructor creates a PowerManagementCapabilitiesBeanImpl Class which implements the PowerManagementCapabilitiesBean Interface, and
	 * encapsulates the CIM class PowerManagementCapabilities in a Java Bean. The CIM class PowerManagementCapabilities is described as follows:
	 * 
	 * A class derived from Capabilities that describes the power management aspects of an element (typically a system or device). The element's power
	 * management capabilities are decoupled from a PowerManagementService, since a single service could apply to multiple elements, each with
	 * specific capabilities.
	 */
	public PowerManagementCapabilities() {
	};

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property PowerCapabilities.
	 */

	public enum PowerCapabilities {
		UNKNOWN,
		OTHER,
		POWER_SAVING_MODES_ENTERED_AUTOMATICALLY,
		POWER_STATE_SETTABLE,
		POWER_CYCLING_SUPPORTED,
		TIMED_POWER_ON_SUPPORTED
	}

	private PowerCapabilities	powerCapabilities;

	/**
	 * This method returns the PowerManagementCapabilities.powerCapabilities property value. This property is described as follows:
	 * 
	 * An enumeration indicating the specific power-related capabilities of a managed element. Since this is an array, multiple values may be
	 * specified. The current values in the enumeration are: 0 = Unknown 1 = Other 2 = Power Saving Modes Entered Automatically, describing that a
	 * managed element can change its power state based on usage or other criteria 3 = Power State Settable, indicating that the SetPowerState method
	 * is supported 4 = Power Cycling Supported, indicating that the SetPowerState method can be invoked with the PowerState input variable set to
	 * 'Power Cycle' 5 = Timed Power On Supported, indicating that the SetPowerState method can be invoked with the PowerState input variable set to
	 * 'Power Cycle' and the Time parameter set to a specific date and time, or interval, for power-on.
	 * 
	 * @return int current powerCapabilities property value
	 * @exception Exception
	 */
	public PowerCapabilities getPowerCapabilities() {

		return this.powerCapabilities;
	} // getPowerCapabilities

	/**
	 * This method sets the PowerManagementCapabilities.powerCapabilities property value. This property is described as follows:
	 * 
	 * An enumeration indicating the specific power-related capabilities of a managed element. Since this is an array, multiple values may be
	 * specified. The current values in the enumeration are: 0 = Unknown 1 = Other 2 = Power Saving Modes Entered Automatically, describing that a
	 * managed element can change its power state based on usage or other criteria 3 = Power State Settable, indicating that the SetPowerState method
	 * is supported 4 = Power Cycling Supported, indicating that the SetPowerState method can be invoked with the PowerState input variable set to
	 * 'Power Cycle' 5 = Timed Power On Supported, indicating that the SetPowerState method can be invoked with the PowerState input variable set to
	 * 'Power Cycle' and the Time parameter set to a specific date and time, or interval, for power-on.
	 * 
	 * @param int new powerCapabilities property value
	 * @exception Exception
	 */
	public void setPowerCapabilities(PowerCapabilities powerCapabilities) {

		this.powerCapabilities = powerCapabilities;
	} // setPowerCapabilities

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property otherPowerCapabilitiesDescriptions.
	 */
	private String[]	otherPowerCapabilitiesDescriptions;

	/**
	 * This method returns the PowerManagementCapabilities.otherPowerCapabilitiesDescriptions property value. This property is described as follows:
	 * 
	 * An array of strings describing an element's additional power management capabilities, used when the PowerCapabilities array includes the value
	 * 1, "Other".
	 * 
	 * @return String[] current otherPowerCapabilitiesDescriptions property value
	 * @exception Exception
	 */
	public String[] getOtherPowerCapabilitiesDescriptions() {

		return this.otherPowerCapabilitiesDescriptions;
	} // getOtherPowerCapabilitiesDescriptions

	/**
	 * This method sets the PowerManagementCapabilities.otherPowerCapabilitiesDescriptions property value. This property is described as follows:
	 * 
	 * An array of strings describing an element's additional power management capabilities, used when the PowerCapabilities array includes the value
	 * 1, "Other".
	 * 
	 * @param String
	 *            [] new otherPowerCapabilitiesDescriptions property value
	 * @exception Exception
	 */
	public void setOtherPowerCapabilitiesDescriptions(String[]
			otherPowerCapabilitiesDescriptions) {

		this.otherPowerCapabilitiesDescriptions =
				otherPowerCapabilitiesDescriptions;
	} // setOtherPowerCapabilitiesDescriptions

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property PowerStatesSupported.
	 */

	public enum PowerStatesSupported {
		OTHER,
		ON,
		SLEEP_LIGHT,
		SLEEP_DEEP,
		POWER_CYCLE_OFF_SOFT,
		OFF_HARD,
		HIBERNATE_OFF_SOFT,
		OFF_SOFT,
		POWER_CYCLE_OFF_HARD,
		MASTER_BUS_RESET,
		DIAGNOSTIC_INTERRUPT_NMI,
		OFF_SOFT_GRACEFUL,
		OFF_HARD_GRACEFUL,
		MASTER_BUS_RESET_GRACEFUL,
		POWER_CYCLE_OFF_SOFT_GRACEFUL,
		POWER_CYCLE_OFF_HARD_GRACEFUL,
		DMTF_RESERVED,
		VENDOR_SPECIFIC
	}

	private PowerStatesSupported	powerStatesSupported;

	/**
	 * This method returns the PowerManagementCapabilities.powerStatesSupported property value. This property is described as follows:
	 * 
	 * An enumeration that indicates the power states supported by a managed element. Because this is an array, multiple values can be specified. The
	 * current values in the enumeration are: 2=On, corresponding to ACPI state G0 or S0 or D0. 3=Sleep - Light, corresponding to ACPI state G1,
	 * S1/S2, or D1. 4=Sleep - Deep, corresponding to ACPI state G1, S3, or D2. 5=Power Cycle (Off - Soft), corresponding to ACPI state G2, S5, or D3,
	 * but where the managed element is set to return to power state "On" at a pre-determined time. 6=Off - Hard, corresponding to ACPI state G3, S5,
	 * or D3. 7=Hibernate (Off - Soft), corresponding to ACPI state S4, where the state of the managed element is preserved and will be recovered upon
	 * powering on. 8=Off - Soft, corresponding to ACPI state G2, S5, or D3. 9= Power Cycle (Off-Hard), corresponds to the managed element reaching
	 * the ACPI state G3 followed by ACPI state S0. 10=Master Bus Reset, corresponds to the system reaching ACPI state S5 followed by ACPI state S0.
	 * This is used to represent system master bus reset. 11=Diagnostic Interrupt (NMI), corresponding to the system reaching ACPI state S5 followed
	 * by ACPI state S0. This is used to represent system non-maskable interrupt. 12=Off - Soft Graceful, equivalent to Off Soft but preceded by a
	 * request to the managed element to perform an orderlyshutdown. 13=Off - Hard Graceful, equivalent to Off Hard but preceded by a request to the
	 * managed element to perform an orderly shutdown. 14=Master Bus Rest Graceful, equivalent to Master Bus Reset but preceded by a request to the
	 * managed element to perform an orderly shutdown. 15=Power Cycle (Off - Soft Graceful), equivalent to Power Cycle (Off - Soft) but preceded by a
	 * request to the managed element to perform an orderly shutdown. 16=Power Cycle (Off - Hard Graceful), equivalent to Power Cycle (Off - Hard) but
	 * preceded by a request to the managed element to perform an orderly shutdown. ..=DMTF Reserved. 0x7FFF..0xFFFF = Vendor Specific.
	 * 
	 * @return int current powerStatesSupported property value
	 * @exception Exception
	 */
	public PowerStatesSupported getPowerStatesSupported() {

		return this.powerStatesSupported;
	} // getPowerStatesSupported

	/**
	 * This method sets the PowerManagementCapabilities.powerStatesSupported property value. This property is described as follows:
	 * 
	 * An enumeration that indicates the power states supported by a managed element. Because this is an array, multiple values can be specified. The
	 * current values in the enumeration are: 2=On, corresponding to ACPI state G0 or S0 or D0. 3=Sleep - Light, corresponding to ACPI state G1,
	 * S1/S2, or D1. 4=Sleep - Deep, corresponding to ACPI state G1, S3, or D2. 5=Power Cycle (Off - Soft), corresponding to ACPI state G2, S5, or D3,
	 * but where the managed element is set to return to power state "On" at a pre-determined time. 6=Off - Hard, corresponding to ACPI state G3, S5,
	 * or D3. 7=Hibernate (Off - Soft), corresponding to ACPI state S4, where the state of the managed element is preserved and will be recovered upon
	 * powering on. 8=Off - Soft, corresponding to ACPI state G2, S5, or D3. 9= Power Cycle (Off-Hard), corresponds to the managed element reaching
	 * the ACPI state G3 followed by ACPI state S0. 10=Master Bus Reset, corresponds to the system reaching ACPI state S5 followed by ACPI state S0.
	 * This is used to represent system master bus reset. 11=Diagnostic Interrupt (NMI), corresponding to the system reaching ACPI state S5 followed
	 * by ACPI state S0. This is used to represent system non-maskable interrupt. 12=Off - Soft Graceful, equivalent to Off Soft but preceded by a
	 * request to the managed element to perform an orderlyshutdown. 13=Off - Hard Graceful, equivalent to Off Hard but preceded by a request to the
	 * managed element to perform an orderly shutdown. 14=Master Bus Rest Graceful, equivalent to Master Bus Reset but preceded by a request to the
	 * managed element to perform an orderly shutdown. 15=Power Cycle (Off - Soft Graceful), equivalent to Power Cycle (Off - Soft) but preceded by a
	 * request to the managed element to perform an orderly shutdown. 16=Power Cycle (Off - Hard Graceful), equivalent to Power Cycle (Off - Hard) but
	 * preceded by a request to the managed element to perform an orderly shutdown. ..=DMTF Reserved. 0x7FFF..0xFFFF = Vendor Specific.
	 * 
	 * @param int new powerStatesSupported property value
	 * @exception Exception
	 */
	public void setPowerStatesSupported(PowerStatesSupported
			powerStatesSupported) {

		this.powerStatesSupported = powerStatesSupported;
	} // setPowerStatesSupported

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property PowerChangeCapabilities.
	 */

	public enum PowerChangeCapabilities {
		UNKNOWN,
		OTHER,
		POWER_SAVING_MODES_ENTERED_AUTOMATICALLY,
		POWER_STATE_SETTABLE,
		POWER_CYCLING_SUPPORTED,
		TIMED_POWER_ON_SUPPORTED,
		OFF_HARD_POWER_CYCLING_SUPPORTED,
		HW_RESET_SUPPORTED,
		GRACEFUL_SHUTDOWN_SUPPORTED
	}

	private PowerChangeCapabilities	powerChangeCapabilities;

	/**
	 * This method returns the PowerManagementCapabilities.powerChangeCapabilities property value. This property is described as follows:
	 * 
	 * An enumeration indicating the specific power-related capabilities of a managed element. Since this is an array, multiple values may be
	 * specified. The current values in the enumeration are: 0 = Unknown 1 = Other 2 = Power Saving Modes Entered Automatically, describing that a
	 * managed element can change its power state based on usage or other criteria 3 = Power State Settable, indicating that the
	 * RequestPowerStateChange method is supported 4 = Power Cycling Supported, indicating that the RequestPowerStateChange method can be invoked with
	 * the PowerState input variable set to 'Power Cycle (Off Soft)' 5 = Timed Power On Supported, indicating that the RequestPowerStateChange method
	 * can be invoked with the PowerState input variable set to 'Power On' and the Time parameter set to a specific date and time, or interval, for
	 * power-on.8 = Graceful Shutdown Supported, indicating that the managed element can be sent a hardware signal requesting an orderly shutdown
	 * prior to the requested power state change.
	 * 
	 * @return int current powerChangeCapabilities property value
	 * @exception Exception
	 */
	public PowerChangeCapabilities getPowerChangeCapabilities() {

		return this.powerChangeCapabilities;
	} // getPowerChangeCapabilities

	/**
	 * This method sets the PowerManagementCapabilities.powerChangeCapabilities property value. This property is described as follows:
	 * 
	 * An enumeration indicating the specific power-related capabilities of a managed element. Since this is an array, multiple values may be
	 * specified. The current values in the enumeration are: 0 = Unknown 1 = Other 2 = Power Saving Modes Entered Automatically, describing that a
	 * managed element can change its power state based on usage or other criteria 3 = Power State Settable, indicating that the
	 * RequestPowerStateChange method is supported 4 = Power Cycling Supported, indicating that the RequestPowerStateChange method can be invoked with
	 * the PowerState input variable set to 'Power Cycle (Off Soft)' 5 = Timed Power On Supported, indicating that the RequestPowerStateChange method
	 * can be invoked with the PowerState input variable set to 'Power On' and the Time parameter set to a specific date and time, or interval, for
	 * power-on.8 = Graceful Shutdown Supported, indicating that the managed element can be sent a hardware signal requesting an orderly shutdown
	 * prior to the requested power state change.
	 * 
	 * @param int new powerChangeCapabilities property value
	 * @exception Exception
	 */
	public void setPowerChangeCapabilities(PowerChangeCapabilities
			powerChangeCapabilities) {

		this.powerChangeCapabilities = powerChangeCapabilities;
	} // setPowerChangeCapabilities

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property otherPowerChangeCapabilities.
	 */
	private String	otherPowerChangeCapabilities;

	/**
	 * This method returns the PowerManagementCapabilities.otherPowerChangeCapabilities property value. This property is described as follows:
	 * 
	 * A string describing the additional power management capabilities of the element, used when the PowerChangeCapabilities is set to the value 1,
	 * "Other".
	 * 
	 * @return String current otherPowerChangeCapabilities property value
	 * @exception Exception
	 */
	public String getOtherPowerChangeCapabilities() {

		return this.otherPowerChangeCapabilities;
	} // getOtherPowerChangeCapabilities

	/**
	 * This method sets the PowerManagementCapabilities.otherPowerChangeCapabilities property value. This property is described as follows:
	 * 
	 * A string describing the additional power management capabilities of the element, used when the PowerChangeCapabilities is set to the value 1,
	 * "Other".
	 * 
	 * @param String
	 *            new otherPowerChangeCapabilities property value
	 * @exception Exception
	 */
	public void setOtherPowerChangeCapabilities(String
			otherPowerChangeCapabilities) {

		this.otherPowerChangeCapabilities = otherPowerChangeCapabilities;
	} // setOtherPowerChangeCapabilities

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property RequestedPowerStatesSupported.
	 */

	public enum RequestedPowerStatesSupported {
		OTHER,
		ON,
		SLEEP_LIGHT,
		SLEEP_DEEP,
		POWER_CYCLE_OFF_SOFT,
		OFF_HARD,
		HIBERNATE_OFF_SOFT,
		OFF_SOFT,
		POWER_CYCLE_OFF_HARD,
		MASTER_BUS_RESET,
		DIAGNOSTIC_INTERRUPT_NMI,
		OFF_SOFT_GRACEFUL,
		OFF_HARD_GRACEFUL,
		MASTER_BUS_RESET_GRACEFUL,
		POWER_CYCLE_OFF_SOFT_GRACEFUL,
		POWER_CYCLE_OFF_HARD_GRACEFUL,
		DIAGNOSTIC_INTERRUPT_INIT,
		DMTF_RESERVED,
		VENDOR_SPECIFIC
	}

	private RequestedPowerStatesSupported	requestedPowerStatesSupported;

	/**
	 * This method returns the PowerManagementCapabilities.requestedPowerStatesSupported property value. This property is described as follows:
	 * 
	 * An enumeration that indicates the requested power states supported by the power management service. Because this is an array, multiple values
	 * can be specified. The current values in the enumeration are: 2=On, corresponding to ACPI state G0 or S0 or D0. 3=Sleep - Light, corresponding
	 * to ACPI state G1, S1/S2, or D1. 4=Sleep - Deep, corresponding to ACPI state G1, S3, or D2. 5=Power Cycle (Off - Soft), corresponding to ACPI
	 * state G2, S5, or D3, but where the managed element is set to return to power state "On" at a pre-determined time. 6=Off - Hard, corresponding
	 * to ACPI state G3, S5, or D3. 7=Hibernate (Off - Soft), corresponding to ACPI state S4, where the state of the managed element is preserved and
	 * will be recovered upon powering on. 8=Off - Soft, corresponding to ACPI state G2, S5, or D3. 9= Power Cycle (Off-Hard), corresponds to the
	 * managed element reaching the ACPI state G3 followed by ACPI state S0. 10=Master Bus Reset, corresponds to the system reaching ACPI state S5
	 * followed by ACPI state S0. This is used to represent system master bus reset. 11=Diagnostic Interrupt (NMI), corresponding to the system
	 * reaching ACPI state S5 followed by ACPI state S0. This is used to represent system non-maskable interrupt. 12=Off - Soft Graceful, equivalent
	 * to Off Soft but preceded by a request to the managed element to perform an orderlyshutdown. 13=Off - Hard Graceful, equivalent to Off Hard but
	 * preceded by a request to the managed element to perform an orderly shutdown. 14=Master Bus Rest Graceful, equivalent to Master Bus Reset but
	 * preceded by a request to the managed element to perform an orderly shutdown. 15=Power Cycle (Off - Soft Graceful), equivalent to Power Cycle
	 * (Off - Soft) but preceded by a request to the managed element to perform an orderly shutdown. 16=Power Cycle (Off - Hard Graceful), equivalent
	 * to Power Cycle (Off - Hard) but preceded by a request to the managed element to perform an orderly shutdown. 17=Diagnostic Interrupt (INIT),
	 * equivalent to Diagnostic Interrupt (NMI) but performed by an INIT switch instead because the NMI signal is masked. ..=DMTF Reserved.
	 * 0x7FFF..0xFFFF = Vendor Specific.
	 * 
	 * @return int current requestedPowerStatesSupported property value
	 * @exception Exception
	 */
	public RequestedPowerStatesSupported getRequestedPowerStatesSupported() {

		return this.requestedPowerStatesSupported;
	} // getRequestedPowerStatesSupported

	/**
	 * This method sets the PowerManagementCapabilities.requestedPowerStatesSupported property value. This property is described as follows:
	 * 
	 * An enumeration that indicates the requested power states supported by the power management service. Because this is an array, multiple values
	 * can be specified. The current values in the enumeration are: 2=On, corresponding to ACPI state G0 or S0 or D0. 3=Sleep - Light, corresponding
	 * to ACPI state G1, S1/S2, or D1. 4=Sleep - Deep, corresponding to ACPI state G1, S3, or D2. 5=Power Cycle (Off - Soft), corresponding to ACPI
	 * state G2, S5, or D3, but where the managed element is set to return to power state "On" at a pre-determined time. 6=Off - Hard, corresponding
	 * to ACPI state G3, S5, or D3. 7=Hibernate (Off - Soft), corresponding to ACPI state S4, where the state of the managed element is preserved and
	 * will be recovered upon powering on. 8=Off - Soft, corresponding to ACPI state G2, S5, or D3. 9= Power Cycle (Off-Hard), corresponds to the
	 * managed element reaching the ACPI state G3 followed by ACPI state S0. 10=Master Bus Reset, corresponds to the system reaching ACPI state S5
	 * followed by ACPI state S0. This is used to represent system master bus reset. 11=Diagnostic Interrupt (NMI), corresponding to the system
	 * reaching ACPI state S5 followed by ACPI state S0. This is used to represent system non-maskable interrupt. 12=Off - Soft Graceful, equivalent
	 * to Off Soft but preceded by a request to the managed element to perform an orderlyshutdown. 13=Off - Hard Graceful, equivalent to Off Hard but
	 * preceded by a request to the managed element to perform an orderly shutdown. 14=Master Bus Rest Graceful, equivalent to Master Bus Reset but
	 * preceded by a request to the managed element to perform an orderly shutdown. 15=Power Cycle (Off - Soft Graceful), equivalent to Power Cycle
	 * (Off - Soft) but preceded by a request to the managed element to perform an orderly shutdown. 16=Power Cycle (Off - Hard Graceful), equivalent
	 * to Power Cycle (Off - Hard) but preceded by a request to the managed element to perform an orderly shutdown. 17=Diagnostic Interrupt (INIT),
	 * equivalent to Diagnostic Interrupt (NMI) but performed by an INIT switch instead because the NMI signal is masked. ..=DMTF Reserved.
	 * 0x7FFF..0xFFFF = Vendor Specific.
	 * 
	 * @param int new requestedPowerStatesSupported property value
	 * @exception Exception
	 */
	public void setRequestedPowerStatesSupported(RequestedPowerStatesSupported
			requestedPowerStatesSupported) {

		this.requestedPowerStatesSupported = requestedPowerStatesSupported;
	} // setRequestedPowerStatesSupported

} // Class PowerManagementCapabilities
