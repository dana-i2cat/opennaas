/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class PacketSchedulingService as well as methods comparable
 * to the invokeMethods defined for this class. This Class implements the PacketSchedulingServiceBean Interface. The CIM class PacketSchedulingService
 * is described as follows:
 * 
 * This class represents the scheduling service, which is a process that determines whether a queued packet should be removed from a queue and sent to
 * an output interface. Note that output interfaces can be physical network interfaces or interfaces to components internal to systems, such as
 * crossbars or backplanes. In either case, if multiple queues are involved, schedulers are used to provide access to the interface. Each instance of
 * a PacketSchedulingService describes a scheduler from the perspective of the queues that the scheduler is servicing. One can describe that different
 * schedulers support different queues, or that a scheduler supports several queues. PacketSchedulingService is modeled as a ConditioningService so
 * that it can be aggregated into a QoSService (using the QoSConditioningSubService association) to indicate that its functionality underlies that QoS
 * service. It participates in the NextService association to identify a subsequent ConditioningService, if any, that acts on traffic after it has
 * been processed by the scheduler.
 */
public class PacketSchedulingService extends ConditioningService implements
		Serializable {

	/**
	 * This constructor creates a PacketSchedulingServiceBeanImpl Class which implements the PacketSchedulingServiceBean Interface, and encapsulates
	 * the CIM class PacketSchedulingService in a Java Bean. The CIM class PacketSchedulingService is described as follows:
	 * 
	 * This class represents the scheduling service, which is a process that determines whether a queued packet should be removed from a queue and
	 * sent to an output interface. Note that output interfaces can be physical network interfaces or interfaces to components internal to systems,
	 * such as crossbars or backplanes. In either case, if multiple queues are involved, schedulers are used to provide access to the interface. Each
	 * instance of a PacketSchedulingService describes a scheduler from the perspective of the queues that the scheduler is servicing. One can
	 * describe that different schedulers support different queues, or that a scheduler supports several queues. PacketSchedulingService is modeled as
	 * a ConditioningService so that it can be aggregated into a QoSService (using the QoSConditioningSubService association) to indicate that its
	 * functionality underlies that QoS service. It participates in the NextService association to identify a subsequent ConditioningService, if any,
	 * that acts on traffic after it has been processed by the scheduler.
	 */
	public PacketSchedulingService() {
	};

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property SchedulerType.
	 */

	public enum SchedulerType {
		OTHER,
		FIFO,
		PRIORITY,
		ALLOCATION,
		BOUNDED_PRIORITY,
		WEIGHTED_ROUND_ROBIN_PACKET
	}

	private SchedulerType	schedulerType;

	/**
	 * This method returns the PacketSchedulingService.schedulerType property value. This property is described as follows:
	 * 
	 * This property is an enumerated 16-bit unsigned integer, and defines the type of scheduler. Values are: 1: Other 2: FIFO 3: Priority 4:
	 * Allocation 5: Bounded Priority 6: Weighted Round Robin Packet If no value is specified, 2 ("FIFO") should be assumed.
	 * 
	 * @return int current schedulerType property value
	 * @exception Exception
	 */
	public SchedulerType getSchedulerType() {

		return this.schedulerType;
	} // getSchedulerType

	/**
	 * This method sets the PacketSchedulingService.schedulerType property value. This property is described as follows:
	 * 
	 * This property is an enumerated 16-bit unsigned integer, and defines the type of scheduler. Values are: 1: Other 2: FIFO 3: Priority 4:
	 * Allocation 5: Bounded Priority 6: Weighted Round Robin Packet If no value is specified, 2 ("FIFO") should be assumed.
	 * 
	 * @param int new schedulerType property value
	 * @exception Exception
	 */
	public void setSchedulerType(SchedulerType schedulerType) {

		this.schedulerType = schedulerType;
	} // setSchedulerType

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property otherSchedulerType.
	 */
	private String	otherSchedulerType;

	/**
	 * This method returns the PacketSchedulingService.otherSchedulerType property value. This property is described as follows:
	 * 
	 * This string property is used in conjunction with the SchedulerType property. When the value of SchedulerType is 1 (i.e., "Other"), then the
	 * type of scheduler to be used is defined in this attribute.
	 * 
	 * @return String current otherSchedulerType property value
	 * @exception Exception
	 */
	public String getOtherSchedulerType() {

		return this.otherSchedulerType;
	} // getOtherSchedulerType

	/**
	 * This method sets the PacketSchedulingService.otherSchedulerType property value. This property is described as follows:
	 * 
	 * This string property is used in conjunction with the SchedulerType property. When the value of SchedulerType is 1 (i.e., "Other"), then the
	 * type of scheduler to be used is defined in this attribute.
	 * 
	 * @param String
	 *            new otherSchedulerType property value
	 * @exception Exception
	 */
	public void setOtherSchedulerType(String otherSchedulerType) {

		this.otherSchedulerType = otherSchedulerType;
	} // setOtherSchedulerType

} // Class PacketSchedulingService
