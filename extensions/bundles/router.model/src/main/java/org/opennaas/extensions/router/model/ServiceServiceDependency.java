/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class ServiceServiceDependency as well as methods comparable
 * to the invokeMethods defined for this class. This Class implements the ServiceServiceDependencyBean Interface. The CIM class
 * ServiceServiceDependency is described as follows:
 * 
 * CIM_ServiceServiceDependency is an association between a Service and another Service, which indicates that the latter cooperates with the former,
 * is required to be present, required to have completed, or must be absent for the former Service to provide its functionality. For example, Boot
 * Services might be dependent upon underlying system initialization Services. In the case of the initialization Services, the Boot Service might be
 * dependent on the completion of the init Services. When examining the ServiceServiceDependency class definition, note that its superclass
 * ProvidesServiceToElement is deprecated. Unfortunately, ProvidesServiceToElement cannot be removed from the object hierarchy without a major Schema
 * release. When or if a major release occurs, the ProvidesServiceToElement superclass will be removed, and ServiceServiceDependency will subclass
 * from CIM_Dependency directly.
 */
public class ServiceServiceDependency extends ProvidesServiceToElement
		implements Serializable {

	/**
	 * This constructor creates a ServiceServiceDependencyBeanImpl Class which implements the ServiceServiceDependencyBean Interface, and encapsulates
	 * the CIM class ServiceServiceDependency in a Java Bean. The CIM class ServiceServiceDependency is described as follows:
	 * 
	 * CIM_ServiceServiceDependency is an association between a Service and another Service, which indicates that the latter cooperates with the
	 * former, is required to be present, required to have completed, or must be absent for the former Service to provide its functionality. For
	 * example, Boot Services might be dependent upon underlying system initialization Services. In the case of the initialization Services, the Boot
	 * Service might be dependent on the completion of the init Services. When examining the ServiceServiceDependency class definition, note that its
	 * superclass ProvidesServiceToElement is deprecated. Unfortunately, ProvidesServiceToElement cannot be removed from the object hierarchy without
	 * a major Schema release. When or if a major release occurs, the ProvidesServiceToElement superclass will be removed, and
	 * ServiceServiceDependency will subclass from CIM_Dependency directly.
	 */
	public ServiceServiceDependency() {
	};

	/**
	 * This method create an Association of the type ServiceServiceDependency between one Service object and Service object
	 */
	public static ServiceServiceDependency link(Service antecedent, Service
			dependent) {

		return (ServiceServiceDependency) Association.link(ServiceServiceDependency.class, antecedent, dependent);
	}// link

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property TypeOfDependency.
	 */

	public enum TypeOfDependency {
		UNKNOWN,
		OTHER,
		SERVICE_MUST_HAVE_COMPLETED,
		SERVICE_MUST_BE_STARTED,
		SERVICE_MUST_NOT_BE_STARTED,
		COOPERATE
	}

	private TypeOfDependency	typeOfDependency;

	/**
	 * This method returns the ServiceServiceDependency.typeOfDependency property value. This property is described as follows:
	 * 
	 * The nature of the Service-to-Service dependency. 2 - Antecedent Service shall have completed before Dependent service's functionality is
	 * available. 3 - Antecedent Service shall have started before Dependent service's functionality is available. 4 - Antecedent Service shall not be
	 * started in order for Dependent service's functionality to be available. 5 - The two Services cooperate and augment each other's function. There
	 * is no requirement implied by this value regarding the execution of the Antecedent service in order for the Dependent service to operate.
	 * 
	 * @return int current typeOfDependency property value
	 * @exception Exception
	 */
	public TypeOfDependency getTypeOfDependency() {

		return this.typeOfDependency;
	} // getTypeOfDependency

	/**
	 * This method sets the ServiceServiceDependency.typeOfDependency property value. This property is described as follows:
	 * 
	 * The nature of the Service-to-Service dependency. 2 - Antecedent Service shall have completed before Dependent service's functionality is
	 * available. 3 - Antecedent Service shall have started before Dependent service's functionality is available. 4 - Antecedent Service shall not be
	 * started in order for Dependent service's functionality to be available. 5 - The two Services cooperate and augment each other's function. There
	 * is no requirement implied by this value regarding the execution of the Antecedent service in order for the Dependent service to operate.
	 * 
	 * @param int new typeOfDependency property value
	 * @exception Exception
	 */
	public void setTypeOfDependency(TypeOfDependency typeOfDependency) {

		this.typeOfDependency = typeOfDependency;
	} // setTypeOfDependency

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property restartService.
	 */
	private boolean	restartService;

	/**
	 * This method returns the ServiceServiceDependency.restartService property value. This property is described as follows:
	 * 
	 * This property describes that the Antecedent Service must be restarted after the Dependent operation is complete.
	 * 
	 * @return boolean current restartService property value
	 * @exception Exception
	 */
	public boolean isRestartService() {

		return this.restartService;
	} // getRestartService

	/**
	 * This method sets the ServiceServiceDependency.restartService property value. This property is described as follows:
	 * 
	 * This property describes that the Antecedent Service must be restarted after the Dependent operation is complete.
	 * 
	 * @param boolean new restartService property value
	 * @exception Exception
	 */
	public void setRestartService(boolean restartService) {

		this.restartService = restartService;
	} // setRestartService

} // Class ServiceServiceDependency
