/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.util.*;
import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class StatisticalData as well as methods comparable to the
 * invokeMethods defined for this class. This Class implements the StatisticalDataBean Interface. The CIM class StatisticalData is described as
 * follows:
 * 
 * CIM_StatisticalData is a root class for any arbitrary collection of statistical data and/or metrics applicable to one or more ManagedElements.
 * These statistics MUST represent the most recent observations and MUST NOT be provided if irrelevant or stale. Note that this class uses a
 * simplified naming/identity algorithm as compared to CIM_StatisticalInformation.
 */
public class StatisticalData extends ManagedElement implements Serializable
{

	/**
	 * This constructor creates a StatisticalDataBeanImpl Class which implements the StatisticalDataBean Interface, and encapsulates the CIM class
	 * StatisticalData in a Java Bean. The CIM class StatisticalData is described as follows:
	 * 
	 * CIM_StatisticalData is a root class for any arbitrary collection of statistical data and/or metrics applicable to one or more ManagedElements.
	 * These statistics MUST represent the most recent observations and MUST NOT be provided if irrelevant or stale. Note that this class uses a
	 * simplified naming/identity algorithm as compared to CIM_StatisticalInformation.
	 */
	protected StatisticalData() {
	};

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property instanceID.
	 */
	private String	instanceID;

	/**
	 * This method returns the StatisticalData.instanceID property value. This property is described as follows:
	 * 
	 * Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. In order to ensure
	 * uniqueness within the NameSpace, the value of InstanceID SHOULD be constructed using the following 'preferred' algorithm: <OrgID>:<LocalID>
	 * Where <OrgID> and <LocalID> are separated by a colon ':', and where <OrgID> MUST include a copyrighted, trademarked or otherwise unique name
	 * that is owned by the business entity creating/defining the InstanceID, or is a registered ID that is assigned to the business entity by a
	 * recognized global authority (This is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure
	 * uniqueness <OrgID> MUST NOT contain a colon (':'). When using this algorithm, the first colon to appear in InstanceID MUST appear between
	 * <OrgID> and <LocalID>. <LocalID> is chosen by the business entity and SHOULD not be re-used to identify different underlying (real-world)
	 * elements. If the above 'preferred' algorithm is not used, the defining entity MUST assure that the resultant InstanceID is not re-used across
	 * any InstanceIDs produced by this or other providers for this instance's NameSpace. For DMTF defined instances, the 'preferred' algorithm MUST
	 * be used with the <OrgID> set to 'CIM'.
	 * 
	 * @return String current instanceID property value
	 * @exception Exception
	 */
	@Override
	public String getInstanceID() {

		return this.instanceID;
	} // getInstanceID

	/**
	 * This method sets the StatisticalData.instanceID property value. This property is described as follows:
	 * 
	 * Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. In order to ensure
	 * uniqueness within the NameSpace, the value of InstanceID SHOULD be constructed using the following 'preferred' algorithm: <OrgID>:<LocalID>
	 * Where <OrgID> and <LocalID> are separated by a colon ':', and where <OrgID> MUST include a copyrighted, trademarked or otherwise unique name
	 * that is owned by the business entity creating/defining the InstanceID, or is a registered ID that is assigned to the business entity by a
	 * recognized global authority (This is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure
	 * uniqueness <OrgID> MUST NOT contain a colon (':'). When using this algorithm, the first colon to appear in InstanceID MUST appear between
	 * <OrgID> and <LocalID>. <LocalID> is chosen by the business entity and SHOULD not be re-used to identify different underlying (real-world)
	 * elements. If the above 'preferred' algorithm is not used, the defining entity MUST assure that the resultant InstanceID is not re-used across
	 * any InstanceIDs produced by this or other providers for this instance's NameSpace. For DMTF defined instances, the 'preferred' algorithm MUST
	 * be used with the <OrgID> set to 'CIM'.
	 * 
	 * @param String
	 *            new instanceID property value
	 * @exception Exception
	 */
	@Override
	public void setInstanceID(String instanceID) {

		this.instanceID = instanceID;
	} // setInstanceID

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property elementName.
	 */
	private String	elementName;

	/**
	 * This method returns the StatisticalData.elementName property value. This property is described as follows:
	 * 
	 * The user friendly name for this instance of StatisticalData. In addition, the user friendly name can be used as a index property for a search
	 * of query. (Note: Name does not have to be unique within a namespace.)
	 * 
	 * @return String current elementName property value
	 * @exception Exception
	 */
	@Override
	public String getElementName() {

		return this.elementName;
	} // getElementName

	/**
	 * This method sets the StatisticalData.elementName property value. This property is described as follows:
	 * 
	 * The user friendly name for this instance of StatisticalData. In addition, the user friendly name can be used as a index property for a search
	 * of query. (Note: Name does not have to be unique within a namespace.)
	 * 
	 * @param String
	 *            new elementName property value
	 * @exception Exception
	 */
	@Override
	public void setElementName(String elementName) {

		this.elementName = elementName;
	} // setElementName

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property startStatisticTime.
	 */
	private Date	startStatisticTime;

	/**
	 * This method returns the StatisticalData.startStatisticTime property value. This property is described as follows:
	 * 
	 * The time, relative to managed element where the statistic was collected, when the first measurement was taken. If the statistic is reset, the
	 * StartStatisticTime is the time when the reset was performed.
	 * 
	 * @return Date current startStatisticTime property value
	 * @exception Exception
	 */
	public Date getStartStatisticTime() {

		return this.startStatisticTime;
	} // getStartStatisticTime

	/**
	 * This method sets the StatisticalData.startStatisticTime property value. This property is described as follows:
	 * 
	 * The time, relative to managed element where the statistic was collected, when the first measurement was taken. If the statistic is reset, the
	 * StartStatisticTime is the time when the reset was performed.
	 * 
	 * @param Date
	 *            new startStatisticTime property value
	 * @exception Exception
	 */
	public void setStartStatisticTime(Date startStatisticTime) {

		this.startStatisticTime = startStatisticTime;
	} // setStartStatisticTime

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property statisticTime.
	 */
	private Date	statisticTime;

	/**
	 * This method returns the StatisticalData.statisticTime property value. This property is described as follows:
	 * 
	 * The time the most recent measurement was taken, relative to the managed element where the statistic was collected.
	 * 
	 * @return Date current statisticTime property value
	 * @exception Exception
	 */
	public Date getStatisticTime() {

		return this.statisticTime;
	} // getStatisticTime

	/**
	 * This method sets the StatisticalData.statisticTime property value. This property is described as follows:
	 * 
	 * The time the most recent measurement was taken, relative to the managed element where the statistic was collected.
	 * 
	 * @param Date
	 *            new statisticTime property value
	 * @exception Exception
	 */
	public void setStatisticTime(Date statisticTime) {

		this.statisticTime = statisticTime;
	} // setStatisticTime

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property sampleInterval.
	 */
	private Date	sampleInterval;

	/**
	 * This method returns the StatisticalData.sampleInterval property value. This property is described as follows:
	 * 
	 * Some statistics are sampled at consistent time intervals. This property provides the sample interval so that client applications can determine
	 * the minimum time that new statistics should be pulled. If the statistics are not sampled at consistent time intervals, this property must be
	 * set to a zero time interval.
	 * 
	 * @return Date current sampleInterval property value
	 * @exception Exception
	 */
	public Date getSampleInterval() {

		return this.sampleInterval;
	} // getSampleInterval

	/**
	 * This method sets the StatisticalData.sampleInterval property value. This property is described as follows:
	 * 
	 * Some statistics are sampled at consistent time intervals. This property provides the sample interval so that client applications can determine
	 * the minimum time that new statistics should be pulled. If the statistics are not sampled at consistent time intervals, this property must be
	 * set to a zero time interval.
	 * 
	 * @param Date
	 *            new sampleInterval property value
	 * @exception Exception
	 */
	public void setSampleInterval(Date sampleInterval) {

		this.sampleInterval = sampleInterval;
	} // setSampleInterval

} // Class StatisticalData
