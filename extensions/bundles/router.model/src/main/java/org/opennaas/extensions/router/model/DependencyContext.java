/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Tue Jan 04
 * 15:37:42 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.Serializable;

import javax.persistence.Entity;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class DependencyContext as well as methods comparable to the
 * invokeMethods defined for this class. This Class implements the DependencyContextBean Interface. The CIM class DependencyContext is described as
 * follows:
 * 
 * Note: The Configuration class is being deprecated in lieu of using a ConcreteComponent relationship to indicate a hierarchy of Setting or
 * SettingData instances. Therefore, this association is also deprecated but it is deprecated to "No value" because there are no equivalent
 * relationships currently defined for the Setting or SettingData classes. This association is an anomaly because it defines what cannot be expressed
 * for the components of the Configuration. Also, it singles out the Dependency association as opposed to allowing any relationships to be defined as
 * "settings". Its use in the industry is discouraged. Deprecated description: This relationship associates a Dependency with one or more
 * Configuration objects. For example, dependencies for a ComputerSystem could change based on the site or network to which the System is attached.
 */
@Deprecated
@Entity
public class DependencyContext extends Association implements Serializable {

	/**
	 * This constructor creates a DependencyContextBeanImpl Class which implements the DependencyContextBean Interface, and encapsulates the CIM class
	 * DependencyContext in a Java Bean. The CIM class DependencyContext is described as follows:
	 * 
	 * Note: The Configuration class is being deprecated in lieu of using a ConcreteComponent relationship to indicate a hierarchy of Setting or
	 * SettingData instances. Therefore, this association is also deprecated but it is deprecated to "No value" because there are no equivalent
	 * relationships currently defined for the Setting or SettingData classes. This association is an anomaly because it defines what cannot be
	 * expressed for the components of the Configuration. Also, it singles out the Dependency association as opposed to allowing any relationships to
	 * be defined as "settings". Its use in the industry is discouraged. Deprecated description: This relationship associates a Dependency with one or
	 * more Configuration objects. For example, dependencies for a ComputerSystem could change based on the site or network to which the System is
	 * attached.
	 */
	public DependencyContext() {
	};
	/**
	 * This method create an Association of the type DependencyContext between one Configuration object and Dependency object
	 */
	// @Deprecated
	// public Association link(Configuration context,Dependency dependency){
	//
	// return super.link(DependencyContext.class,context,dependency);
	// }//link

} // Class DependencyContext
