/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class FilterEntry as well as methods comparable to the
 * invokeMethods defined for this class. This Class implements the FilterEntryBean Interface. The CIM class FilterEntry is described as follows:
 * 
 * A FilterEntry is used by network devices to identify traffic and either forward it (with possibly further processing) to its destination, or to
 * deny its forwarding. It is one of the building block of FilterLists. This class is oriented towards packet filtering. Other subclasses of
 * FilterEntryBase can be defined to do other types of filtering. A FilterEntry is weak to the network device (i.e., the ComputerSystem) that contains
 * it. Hence, the ComputerSystem keys are propagated to this class.
 */
public class FilterEntry extends FilterEntryBase implements Serializable {

	/**
	 * This constructor creates a FilterEntryBeanImpl Class which implements the FilterEntryBean Interface, and encapsulates the CIM class FilterEntry
	 * in a Java Bean. The CIM class FilterEntry is described as follows:
	 * 
	 * A FilterEntry is used by network devices to identify traffic and either forward it (with possibly further processing) to its destination, or to
	 * deny its forwarding. It is one of the building block of FilterLists. This class is oriented towards packet filtering. Other subclasses of
	 * FilterEntryBase can be defined to do other types of filtering. A FilterEntry is weak to the network device (i.e., the ComputerSystem) that
	 * contains it. Hence, the ComputerSystem keys are propagated to this class.
	 */
	public FilterEntry() {
	};

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property TrafficType.
	 */

	public enum TrafficType {
		UNKNOWN,
		IPV4,
		IPX,
		IPV6,
		ANY,
		OTHER
	}

	private TrafficType	trafficType;

	/**
	 * This method returns the FilterEntry.trafficType property value. This property is described as follows:
	 * 
	 * This defines the type of traffic that is being filtered. This will affect the filtering rules in the MatchCondition property of this class.
	 * 
	 * @return int current trafficType property value
	 * @exception Exception
	 */
	public TrafficType getTrafficType() {

		return this.trafficType;
	} // getTrafficType

	/**
	 * This method sets the FilterEntry.trafficType property value. This property is described as follows:
	 * 
	 * This defines the type of traffic that is being filtered. This will affect the filtering rules in the MatchCondition property of this class.
	 * 
	 * @param int new trafficType property value
	 * @exception Exception
	 */
	public void setTrafficType(TrafficType trafficType) {

		this.trafficType = trafficType;
	} // setTrafficType

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property otherTrafficType.
	 */
	private String	otherTrafficType;

	/**
	 * This method returns the FilterEntry.otherTrafficType property value. This property is described as follows:
	 * 
	 * If the value of the TrafficType property in this class is 5 (i.e., "Other"), then the specific type of traffic is specified in this property.
	 * 
	 * @return String current otherTrafficType property value
	 * @exception Exception
	 */
	public String getOtherTrafficType() {

		return this.otherTrafficType;
	} // getOtherTrafficType

	/**
	 * This method sets the FilterEntry.otherTrafficType property value. This property is described as follows:
	 * 
	 * If the value of the TrafficType property in this class is 5 (i.e., "Other"), then the specific type of traffic is specified in this property.
	 * 
	 * @param String
	 *            new otherTrafficType property value
	 * @exception Exception
	 */
	public void setOtherTrafficType(String otherTrafficType) {

		this.otherTrafficType = otherTrafficType;
	} // setOtherTrafficType

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property MatchConditionType.
	 */

	public enum MatchConditionType {
		OTHER,
		SOURCE_ADDRESS_AND_MASK,
		DESTINATION_ADDRESS_AND_MASK,
		SOURCE_PORT,
		SOURCE_PORT_RANGE,
		DESTINATION_PORT,
		DESTINATION_PORT_RANGE,
		PROTOCOL_TYPE,
		PROTOCOL_TYPE_AND_OPTION,
		DSCP,
		TOS_VALUE,
		_802_1P_PRIORITY_VALUE,
		ANY
	}

	private MatchConditionType	matchConditionType;

	/**
	 * This method returns the FilterEntry.matchConditionType property value. This property is described as follows:
	 * 
	 * This specifies one of a set of ways to identify traffic. If the value is 1 (i.e., "Other"), then the specific type of filtering is specified in
	 * the OtherMatchConditionType property of this class.
	 * 
	 * @return int current matchConditionType property value
	 * @exception Exception
	 */
	public MatchConditionType getMatchConditionType() {

		return this.matchConditionType;
	} // getMatchConditionType

	/**
	 * This method sets the FilterEntry.matchConditionType property value. This property is described as follows:
	 * 
	 * This specifies one of a set of ways to identify traffic. If the value is 1 (i.e., "Other"), then the specific type of filtering is specified in
	 * the OtherMatchConditionType property of this class.
	 * 
	 * @param int new matchConditionType property value
	 * @exception Exception
	 */
	public void setMatchConditionType(MatchConditionType
			matchConditionType) {

		this.matchConditionType = matchConditionType;
	} // setMatchConditionType

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property otherMatchConditionType.
	 */
	private String	otherMatchConditionType;

	/**
	 * This method returns the FilterEntry.otherMatchConditionType property value. This property is described as follows:
	 * 
	 * If the value of the MatchConditionType property in this class is 1 (i.e., "Other"), then the specific type of filtering is specified in this
	 * property.
	 * 
	 * @return String current otherMatchConditionType property value
	 * @exception Exception
	 */
	public String getOtherMatchConditionType() {

		return this.otherMatchConditionType;
	} // getOtherMatchConditionType

	/**
	 * This method sets the FilterEntry.otherMatchConditionType property value. This property is described as follows:
	 * 
	 * If the value of the MatchConditionType property in this class is 1 (i.e., "Other"), then the specific type of filtering is specified in this
	 * property.
	 * 
	 * @param String
	 *            new otherMatchConditionType property value
	 * @exception Exception
	 */
	public void setOtherMatchConditionType(String otherMatchConditionType) {

		this.otherMatchConditionType = otherMatchConditionType;
	} // setOtherMatchConditionType

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property matchConditionValue.
	 */
	private String	matchConditionValue;

	/**
	 * This method returns the FilterEntry.matchConditionValue property value. This property is described as follows:
	 * 
	 * This is the value of the condition that filters the traffic. It corresponds to the condition specified in the MatchConditionType property. If,
	 * however, the value of the MatchConditionProperty is 1, then it corresponds to the condition specified in the OtherMatchConditionType property.
	 * 
	 * @return String current matchConditionValue property value
	 * @exception Exception
	 */
	public String getMatchConditionValue() {

		return this.matchConditionValue;
	} // getMatchConditionValue

	/**
	 * This method sets the FilterEntry.matchConditionValue property value. This property is described as follows:
	 * 
	 * This is the value of the condition that filters the traffic. It corresponds to the condition specified in the MatchConditionType property. If,
	 * however, the value of the MatchConditionProperty is 1, then it corresponds to the condition specified in the OtherMatchConditionType property.
	 * 
	 * @param String
	 *            new matchConditionValue property value
	 * @exception Exception
	 */
	public void setMatchConditionValue(String matchConditionValue) {

		this.matchConditionValue = matchConditionValue;
	} // setMatchConditionValue

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property Action.
	 */

	public enum Action {
		PERMIT,
		DENY
	}

	private Action	action;

	/**
	 * This method returns the FilterEntry.action property value. This property is described as follows:
	 * 
	 * This defines whether the action should be to forward or deny traffic meeting the match condition specified in this filter.
	 * 
	 * @return int current action property value
	 * @exception Exception
	 */
	public Action getAction() {

		return this.action;
	} // getAction

	/**
	 * This method sets the FilterEntry.action property value. This property is described as follows:
	 * 
	 * This defines whether the action should be to forward or deny traffic meeting the match condition specified in this filter.
	 * 
	 * @param int new action property value
	 * @exception Exception
	 */
	public void setAction(Action action) {

		this.action = action;
	} // setAction

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property defaultFilter.
	 */
	private boolean	defaultFilter;

	/**
	 * This method returns the FilterEntry.defaultFilter property value. This property is described as follows:
	 * 
	 * This defines whether this FilterEntry is the default entry to use by its FilterList.
	 * 
	 * @return boolean current defaultFilter property value
	 * @exception Exception
	 */
	public boolean isDefaultFilter() {

		return this.defaultFilter;
	} // getDefaultFilter

	/**
	 * This method sets the FilterEntry.defaultFilter property value. This property is described as follows:
	 * 
	 * This defines whether this FilterEntry is the default entry to use by its FilterList.
	 * 
	 * @param boolean new defaultFilter property value
	 * @exception Exception
	 */
	public void setDefaultFilter(boolean defaultFilter) {

		this.defaultFilter = defaultFilter;
	} // setDefaultFilter

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property trafficClass.
	 */
	private String	trafficClass;

	/**
	 * This method returns the FilterEntry.trafficClass property value. This property is described as follows:
	 * 
	 * This defines the traffic class that is being matched by this FilterEntry. Note that FilterEntries are aggregated into FilterLists by the
	 * EntriesInFilterList relationship. If the EntrySequence property of the aggregation is set to 0, this means that all the Filter Entries should
	 * be ANDed together. Consequently, the TrafficClass property of each of the aggregated Entries should be set to the same value.
	 * 
	 * @return String current trafficClass property value
	 * @exception Exception
	 */
	public String getTrafficClass() {

		return this.trafficClass;
	} // getTrafficClass

	/**
	 * This method sets the FilterEntry.trafficClass property value. This property is described as follows:
	 * 
	 * This defines the traffic class that is being matched by this FilterEntry. Note that FilterEntries are aggregated into FilterLists by the
	 * EntriesInFilterList relationship. If the EntrySequence property of the aggregation is set to 0, this means that all the Filter Entries should
	 * be ANDed together. Consequently, the TrafficClass property of each of the aggregated Entries should be set to the same value.
	 * 
	 * @param String
	 *            new trafficClass property value
	 * @exception Exception
	 */
	public void setTrafficClass(String trafficClass) {

		this.trafficClass = trafficClass;
	} // setTrafficClass

} // Class FilterEntry
