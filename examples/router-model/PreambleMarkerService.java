/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class PreambleMarkerService as well as methods comparable to
 * the invokeMethods defined for this class. This Class implements the PreambleMarkerServiceBean Interface. The CIM class PreambleMarkerService is
 * described as follows:
 * 
 * PreambleMarkerService models the storing of traffic- conditioning results in a packet preamble. An instance appends a two-part string of the form
 * '<type>,<value>' to the packet preamble. The concept of 'type's is discussed more fully in the Description of the class' FilterItemList property.
 */
public class PreambleMarkerService extends MarkerService implements
		Serializable {

	/**
	 * This constructor creates a PreambleMarkerServiceBeanImpl Class which implements the PreambleMarkerServiceBean Interface, and encapsulates the
	 * CIM class PreambleMarkerService in a Java Bean. The CIM class PreambleMarkerService is described as follows:
	 * 
	 * PreambleMarkerService models the storing of traffic- conditioning results in a packet preamble. An instance appends a two-part string of the
	 * form '<type>,<value>' to the packet preamble. The concept of 'type's is discussed more fully in the Description of the class' FilterItemList
	 * property.
	 */
	public PreambleMarkerService() {
	};

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property filterItemList.
	 */
	private String[]	filterItemList;

	/**
	 * This method returns the PreambleMarkerService.filterItemList property value. This property is described as follows:
	 * 
	 * To foster interoperability, the basic format of the information captured by a PreambleMarker is specified. That information is contained in the
	 * FilterItemList property (an ordered, string array). Each entry in the array takes the form 'type,value'. When entries are added, they are
	 * appended to the end of the list. A limited set of standardized 'type's exist. They are: - ConformingFromMeter, NonConformingFromMeter and
	 * PartConformingFromMeter to convey metering results (where the 'value' is the name of the meter) - VlanId to describe the traffic's VLAN
	 * information (where the 'value' is the VLAN ID). An implementation is free to define and use other preamble 'types'. Note that a wildcard value
	 * of "any" is allowed to indicate that the preamble entry matches for any 'value' of the specified 'type'. For example, using the wildcard, an
	 * administrator can define a filter to select all packets that were found to be conforming ('type' = "ConformingFromMeter") without having to
	 * name each meter individually.
	 * 
	 * @return String[] current filterItemList property value
	 * @exception Exception
	 */
	public String[] getFilterItemList() {

		return this.filterItemList;
	} // getFilterItemList

	/**
	 * This method sets the PreambleMarkerService.filterItemList property value. This property is described as follows:
	 * 
	 * To foster interoperability, the basic format of the information captured by a PreambleMarker is specified. That information is contained in the
	 * FilterItemList property (an ordered, string array). Each entry in the array takes the form 'type,value'. When entries are added, they are
	 * appended to the end of the list. A limited set of standardized 'type's exist. They are: - ConformingFromMeter, NonConformingFromMeter and
	 * PartConformingFromMeter to convey metering results (where the 'value' is the name of the meter) - VlanId to describe the traffic's VLAN
	 * information (where the 'value' is the VLAN ID). An implementation is free to define and use other preamble 'types'. Note that a wildcard value
	 * of "any" is allowed to indicate that the preamble entry matches for any 'value' of the specified 'type'. For example, using the wildcard, an
	 * administrator can define a filter to select all packets that were found to be conforming ('type' = "ConformingFromMeter") without having to
	 * name each meter individually.
	 * 
	 * @param String
	 *            [] new filterItemList property value
	 * @exception Exception
	 */
	public void setFilterItemList(String[] filterItemList) {

		this.filterItemList = filterItemList;
	} // setFilterItemList

} // Class PreambleMarkerService
