/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.*;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class EgressConditioningServiceOnEndpoint as well as methods
 * comparable to the invokeMethods defined for this class. This Class implements the EgressConditioningServiceOnEndpointBean Interface. The CIM class
 * EgressConditioningServiceOnEndpoint is described as follows:
 * 
 * This association represents the binding, in the egress direction, between a ProtocolEndpoint and the last ConditioningService that processes
 * packets before they leave a network device (via that ProtocolEndpoint). This 'last' ConditioningService is ordinarily a scheduler, but it does not
 * have to be. There can be multiple 'last' ConditioningServices for an Endpoint (for example, in the case of a fallback scheduler). Therefore, the
 * cardinality for the Dependent object reference remains 0..n. On the other hand, a single ConditioningService cannot be the last one to process
 * packets for multiple Endpoints. So, the cardinality of the Antecedent object reference is narrowed from 0..n to 0..1.
 */
public class EgressConditioningServiceOnEndpoint extends ServiceSAPDependency
		implements Serializable {

	/**
	 * This constructor creates a EgressConditioningServiceOnEndpointBeanImpl Class which implements the EgressConditioningServiceOnEndpointBean
	 * Interface, and encapsulates the CIM class EgressConditioningServiceOnEndpoint in a Java Bean. The CIM class EgressConditioningServiceOnEndpoint
	 * is described as follows:
	 * 
	 * This association represents the binding, in the egress direction, between a ProtocolEndpoint and the last ConditioningService that processes
	 * packets before they leave a network device (via that ProtocolEndpoint). This 'last' ConditioningService is ordinarily a scheduler, but it does
	 * not have to be. There can be multiple 'last' ConditioningServices for an Endpoint (for example, in the case of a fallback scheduler).
	 * Therefore, the cardinality for the Dependent object reference remains 0..n. On the other hand, a single ConditioningService cannot be the last
	 * one to process packets for multiple Endpoints. So, the cardinality of the Antecedent object reference is narrowed from 0..n to 0..1.
	 */
	public EgressConditioningServiceOnEndpoint() {
	};

	/**
	 * This method create an Association of the type EgressConditioningServiceOnEndpoint between one ProtocolEndpoint object and ConditioningService
	 * object
	 */
	public static EgressConditioningServiceOnEndpoint link(ProtocolEndpoint
			antecedent, ConditioningService dependent) {

		return (EgressConditioningServiceOnEndpoint) Association.link(EgressConditioningServiceOnEndpoint.class, antecedent, dependent);
	}// link

} // Class EgressConditioningServiceOnEndpoint
