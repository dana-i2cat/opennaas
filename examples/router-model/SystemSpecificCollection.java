/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class SystemSpecificCollection as well as methods comparable
 * to the invokeMethods defined for this class. This Class implements the SystemSpecificCollectionBean Interface. The CIM class
 * SystemSpecificCollection is described as follows:
 * 
 * SystemSpecificCollection represents the general concept of a collection that is scoped (or contained) by a System. It represents a Collection that
 * has meaning only in the context of a System, a Collection whose elements are restricted by the definition of the System, or both of these types of
 * Collections. This meaning is explicitly described by the (required) association, HostedCollection. An example of a SystemSpecificCollection is a
 * Fibre Channel zone that collects network ports, port groupings, and aliases (as required by a customer) in the context of an AdminDomain. The
 * Collection is not a part of the domain, but merely an arbitrary grouping of the devices and other Collections in the domain. In other words, the
 * context of the Collection is restricted to the domain, and its members are also limited by the domain.
 */
public class SystemSpecificCollection extends Collection implements
		Serializable {

	/**
	 * This constructor creates a SystemSpecificCollectionBeanImpl Class which implements the SystemSpecificCollectionBean Interface, and encapsulates
	 * the CIM class SystemSpecificCollection in a Java Bean. The CIM class SystemSpecificCollection is described as follows:
	 * 
	 * SystemSpecificCollection represents the general concept of a collection that is scoped (or contained) by a System. It represents a Collection
	 * that has meaning only in the context of a System, a Collection whose elements are restricted by the definition of the System, or both of these
	 * types of Collections. This meaning is explicitly described by the (required) association, HostedCollection. An example of a
	 * SystemSpecificCollection is a Fibre Channel zone that collects network ports, port groupings, and aliases (as required by a customer) in the
	 * context of an AdminDomain. The Collection is not a part of the domain, but merely an arbitrary grouping of the devices and other Collections in
	 * the domain. In other words, the context of the Collection is restricted to the domain, and its members are also limited by the domain.
	 */
	public SystemSpecificCollection() {
	};

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property instanceID.
	 */
	private String	instanceID;

	/**
	 * This method returns the SystemSpecificCollection.instanceID property value. This property is described as follows:
	 * 
	 * Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. To ensure uniqueness
	 * within the NameSpace, the value of InstanceID should be constructed using the following 'preferred' algorithm: <OrgID>:<LocalID> Where <OrgID>
	 * and <LocalID> are separated by a colon ':', and where <OrgID> must include a unique name. It can be a copyrighted, trademarked, or otherwise
	 * unique name that is owned by the business entity that is creating or defining the InstanceID. Or, it could be a registered ID that is assigned
	 * to the business entity by a recognized global authority.(This requirement is similar to the <Schema Name>_<Class Name> structure of Schema
	 * class names.) In addition, to ensure uniqueness <OrgID> must not contain a colon (':'). When using this algorithm, the first colon to appear in
	 * InstanceID must appear between <OrgID> and <LocalID>. <LocalID> is chosen by the business entity and should not be re-used to identify
	 * different underlying (real-world) elements. If the above 'preferred' algorithm is not used, the defining entity must ensure that the resulting
	 * InstanceID is not re-used as any of InstanceIDs produced by this or other providers for the NameSpace of this instance. For DMTF-defined
	 * instances, the 'preferred' algorithm must be used with the <OrgID> set to 'CIM'.
	 * 
	 * @return String current instanceID property value
	 * @exception Exception
	 */
	@Override
	public String getInstanceID() {

		return this.instanceID;
	} // getInstanceID

	/**
	 * This method sets the SystemSpecificCollection.instanceID property value. This property is described as follows:
	 * 
	 * Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. To ensure uniqueness
	 * within the NameSpace, the value of InstanceID should be constructed using the following 'preferred' algorithm: <OrgID>:<LocalID> Where <OrgID>
	 * and <LocalID> are separated by a colon ':', and where <OrgID> must include a unique name. It can be a copyrighted, trademarked, or otherwise
	 * unique name that is owned by the business entity that is creating or defining the InstanceID. Or, it could be a registered ID that is assigned
	 * to the business entity by a recognized global authority.(This requirement is similar to the <Schema Name>_<Class Name> structure of Schema
	 * class names.) In addition, to ensure uniqueness <OrgID> must not contain a colon (':'). When using this algorithm, the first colon to appear in
	 * InstanceID must appear between <OrgID> and <LocalID>. <LocalID> is chosen by the business entity and should not be re-used to identify
	 * different underlying (real-world) elements. If the above 'preferred' algorithm is not used, the defining entity must ensure that the resulting
	 * InstanceID is not re-used as any of InstanceIDs produced by this or other providers for the NameSpace of this instance. For DMTF-defined
	 * instances, the 'preferred' algorithm must be used with the <OrgID> set to 'CIM'.
	 * 
	 * @param String
	 *            new instanceID property value
	 * @exception Exception
	 */
	@Override
	public void setInstanceID(String instanceID) {

		this.instanceID = instanceID;
	} // setInstanceID

} // Class SystemSpecificCollection
