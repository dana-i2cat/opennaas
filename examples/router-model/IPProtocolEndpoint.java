/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class IPProtocolEndpoint as well as methods comparable to
 * the invokeMethods defined for this class. This Class implements the IPProtocolEndpointBean Interface. The CIM class IPProtocolEndpoint is described
 * as follows:
 * 
 * A ProtocolEndpoint that is dedicated to running IP.
 */
public class IPProtocolEndpoint extends ProtocolEndpoint implements
		Serializable {

	/**
	 * This constructor creates a IPProtocolEndpointBeanImpl Class which implements the IPProtocolEndpointBean Interface, and encapsulates the CIM
	 * class IPProtocolEndpoint in a Java Bean. The CIM class IPProtocolEndpoint is described as follows:
	 * 
	 * A ProtocolEndpoint that is dedicated to running IP.
	 */
	public IPProtocolEndpoint() {
	};

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property iPv4Address.
	 */
	private String	iPv4Address;

	/**
	 * This method returns the IPProtocolEndpoint.iPv4Address property value. This property is described as follows:
	 * 
	 * The IPv4 address that this ProtocolEndpoint represents.
	 * 
	 * @return String current iPv4Address property value
	 * @exception Exception
	 */
	public String getIPv4Address() {

		return this.iPv4Address;
	} // getIPv4Address

	/**
	 * This method sets the IPProtocolEndpoint.iPv4Address property value. This property is described as follows:
	 * 
	 * The IPv4 address that this ProtocolEndpoint represents.
	 * 
	 * @param String
	 *            new iPv4Address property value
	 * @exception Exception
	 */
	public void setIPv4Address(String iPv4Address) {

		this.iPv4Address = iPv4Address;
	} // setIPv4Address

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property iPv6Address.
	 */
	private String	iPv6Address;

	/**
	 * This method returns the IPProtocolEndpoint.iPv6Address property value. This property is described as follows:
	 * 
	 * The IPv6 address that this ProtocolEndpoint represents.
	 * 
	 * @return String current iPv6Address property value
	 * @exception Exception
	 */
	public String getIPv6Address() {

		return this.iPv6Address;
	} // getIPv6Address

	/**
	 * This method sets the IPProtocolEndpoint.iPv6Address property value. This property is described as follows:
	 * 
	 * The IPv6 address that this ProtocolEndpoint represents.
	 * 
	 * @param String
	 *            new iPv6Address property value
	 * @exception Exception
	 */
	public void setIPv6Address(String iPv6Address) {

		this.iPv6Address = iPv6Address;
	} // setIPv6Address

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property address.
	 */
	@Deprecated
	private String	address;

	/**
	 * This method returns the IPProtocolEndpoint.address property value. This property is described as follows:
	 * 
	 * The IP address that this ProtocolEndpoint represents, formatted according to the appropriate convention as defined in the AddressType property
	 * of this class (e.g., 171.79.6.40). This single property is deprecated to replace it by specific IPv4 and v6 addresses.
	 * 
	 * @return String current address property value
	 * @exception Exception
	 */
	@Deprecated
	public String getAddress() {

		return this.address;
	} // getAddress

	/**
	 * This method sets the IPProtocolEndpoint.address property value. This property is described as follows:
	 * 
	 * The IP address that this ProtocolEndpoint represents, formatted according to the appropriate convention as defined in the AddressType property
	 * of this class (e.g., 171.79.6.40). This single property is deprecated to replace it by specific IPv4 and v6 addresses.
	 * 
	 * @param String
	 *            new address property value
	 * @exception Exception
	 */
	@Deprecated
	public void setAddress(String address) {

		this.address = address;
	} // setAddress

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property subnetMask.
	 */
	private String	subnetMask;

	/**
	 * This method returns the IPProtocolEndpoint.subnetMask property value. This property is described as follows:
	 * 
	 * The mask for the IPv4 address of this ProtocolEndpoint, if one is defined.
	 * 
	 * @return String current subnetMask property value
	 * @exception Exception
	 */
	public String getSubnetMask() {

		return this.subnetMask;
	} // getSubnetMask

	/**
	 * This method sets the IPProtocolEndpoint.subnetMask property value. This property is described as follows:
	 * 
	 * The mask for the IPv4 address of this ProtocolEndpoint, if one is defined.
	 * 
	 * @param String
	 *            new subnetMask property value
	 * @exception Exception
	 */
	public void setSubnetMask(String subnetMask) {

		this.subnetMask = subnetMask;
	} // setSubnetMask

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property prefixLength.
	 */
	private short	prefixLength;

	/**
	 * This method returns the IPProtocolEndpoint.prefixLength property value. This property is described as follows:
	 * 
	 * The prefix length for the IPv6 address of this Protocol Endpoint, if one is defined.
	 * 
	 * @return short current prefixLength property value
	 * @exception Exception
	 */
	public short getPrefixLength() {

		return this.prefixLength;
	} // getPrefixLength

	/**
	 * This method sets the IPProtocolEndpoint.prefixLength property value. This property is described as follows:
	 * 
	 * The prefix length for the IPv6 address of this Protocol Endpoint, if one is defined.
	 * 
	 * @param short new prefixLength property value
	 * @exception Exception
	 */
	public void setPrefixLength(short prefixLength) {

		this.prefixLength = prefixLength;
	} // setPrefixLength

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property AddressType.
	 */
	@Deprecated
	public enum AddressType {
		UNKNOWN,
		IPV4,
		IPV6
	}

	@Deprecated
	private AddressType	addressType;

	/**
	 * This method returns the IPProtocolEndpoint.addressType property value. This property is described as follows:
	 * 
	 * An enumeration that describes the format of the Address property. It is deprecated since it is not needed, as the class contains both IPv4 and
	 * v6 addresses).
	 * 
	 * @return int current addressType property value
	 * @exception Exception
	 */
	@Deprecated
	public AddressType getAddressType() {

		return this.addressType;
	} // getAddressType

	/**
	 * This method sets the IPProtocolEndpoint.addressType property value. This property is described as follows:
	 * 
	 * An enumeration that describes the format of the Address property. It is deprecated since it is not needed, as the class contains both IPv4 and
	 * v6 addresses).
	 * 
	 * @param int new addressType property value
	 * @exception Exception
	 */
	@Deprecated
	public void setAddressType(AddressType addressType) {

		this.addressType = addressType;
	} // setAddressType

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property IPVersionSupport.
	 */
	@Deprecated
	public enum IPVersionSupport {
		UNKNOWN,
		IPV4_ONLY,
		IPV6_ONLY,
		BOTH_IPV4_AND_IPV6
	}

	@Deprecated
	private IPVersionSupport	iPVersionSupport;

	/**
	 * This method returns the IPProtocolEndpoint.iPVersionSupport property value. This property is described as follows:
	 * 
	 * This property explicitly defines support for different versions of the IP protocol, for this Endpoint. It is deprecated since the
	 * ProtocolIFType also provides this functionality by describing an endpoint as IPv4 only (value=4096), IPv6 only (value=4097), or IPv4/v6
	 * (value=4098).
	 * 
	 * @return int current iPVersionSupport property value
	 * @exception Exception
	 */
	@Deprecated
	public IPVersionSupport getIPVersionSupport() {

		return this.iPVersionSupport;
	} // getIPVersionSupport

	/**
	 * This method sets the IPProtocolEndpoint.iPVersionSupport property value. This property is described as follows:
	 * 
	 * This property explicitly defines support for different versions of the IP protocol, for this Endpoint. It is deprecated since the
	 * ProtocolIFType also provides this functionality by describing an endpoint as IPv4 only (value=4096), IPv6 only (value=4097), or IPv4/v6
	 * (value=4098).
	 * 
	 * @param int new iPVersionSupport property value
	 * @exception Exception
	 */
	@Deprecated
	public void setIPVersionSupport(IPVersionSupport iPVersionSupport) {

		this.iPVersionSupport = iPVersionSupport;
	} // setIPVersionSupport

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property AddressOrigin.
	 */

	public enum AddressOrigin {
		UNKNOWN,
		OTHER,
		NOT_APPLICABLE,
		STATIC,
		DHCP,
		BOOTP,
		IPV4_LINK_LOCAL,
		DHCPV6,
		IPV6AUTOCONFIG,
		DMTF_RESERVED,
		VENDOR_RESERVED
	}

	private AddressOrigin	addressOrigin;

	/**
	 * This method returns the IPProtocolEndpoint.addressOrigin property value. This property is described as follows:
	 * 
	 * AddressOrigin identifies the method by which the IP Address, Subnet Mask, and Gateway were assigned to the IPProtocolEndpoint.A value of 3
	 * "Static" shall indicate the values were assigned manually. A value of 4 "DHCP" shall indicate the values were assigned utilizing the Dynamic
	 * Host Configuration Protocol. See RFC 2131 and related. A value of 5 "BOOTP" shall indicate the values were assigned utilizing BOOTP. See RFC
	 * 951 and related. A value of 6 "IPv4 Link Local" shall indicate the values were assigned using the IPv4 Link Local protocol. See RFC 3927. A
	 * value of 7 "DHCPv6" shall indicate the values were assigned using DHCPv6. See RFC 3315. A value of 8 "IPv6 AutoConfig" shall indicate the
	 * values were assinged using the IPv6 AutoConfig Protocol. See RFC 4862.
	 * 
	 * @return int current addressOrigin property value
	 * @exception Exception
	 */
	public AddressOrigin getAddressOrigin() {

		return this.addressOrigin;
	} // getAddressOrigin

	/**
	 * This method sets the IPProtocolEndpoint.addressOrigin property value. This property is described as follows:
	 * 
	 * AddressOrigin identifies the method by which the IP Address, Subnet Mask, and Gateway were assigned to the IPProtocolEndpoint.A value of 3
	 * "Static" shall indicate the values were assigned manually. A value of 4 "DHCP" shall indicate the values were assigned utilizing the Dynamic
	 * Host Configuration Protocol. See RFC 2131 and related. A value of 5 "BOOTP" shall indicate the values were assigned utilizing BOOTP. See RFC
	 * 951 and related. A value of 6 "IPv4 Link Local" shall indicate the values were assigned using the IPv4 Link Local protocol. See RFC 3927. A
	 * value of 7 "DHCPv6" shall indicate the values were assigned using DHCPv6. See RFC 3315. A value of 8 "IPv6 AutoConfig" shall indicate the
	 * values were assinged using the IPv6 AutoConfig Protocol. See RFC 4862.
	 * 
	 * @param int new addressOrigin property value
	 * @exception Exception
	 */
	public void setAddressOrigin(AddressOrigin addressOrigin) {

		this.addressOrigin = addressOrigin;
	} // setAddressOrigin

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property IPv6AddressType.
	 */

	public enum IPv6AddressType {
		UNSPECIFIED,
		LOOPBACK,
		MULTICAST,
		LINK_LOCAL_UNICAST,
		GLOBAL_UNICAST,
		EMBEDDED_IPV4_ADDRESS,
		SITE_LOCAL_UNICAST,
		DMTF_RESERVED,
		VENDOR_RESERVED
	}

	private IPv6AddressType	iPv6AddressType;

	/**
	 * This method returns the IPProtocolEndpoint.iPv6AddressType property value. This property is described as follows:
	 * 
	 * IPv6AddressType indentified the type of address found in the IPv6Address property. The values of this property shall be interpreted according
	 * to RFC4291, Section 2.4
	 * 
	 * @return int current iPv6AddressType property value
	 * @exception Exception
	 */
	public IPv6AddressType getIPv6AddressType() {

		return this.iPv6AddressType;
	} // getIPv6AddressType

	/**
	 * This method sets the IPProtocolEndpoint.iPv6AddressType property value. This property is described as follows:
	 * 
	 * IPv6AddressType indentified the type of address found in the IPv6Address property. The values of this property shall be interpreted according
	 * to RFC4291, Section 2.4
	 * 
	 * @param int new iPv6AddressType property value
	 * @exception Exception
	 */
	public void setIPv6AddressType(IPv6AddressType iPv6AddressType) {

		this.iPv6AddressType = iPv6AddressType;
	} // setIPv6AddressType

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property iPv6SubnetPrefixLength.
	 */
	private int	iPv6SubnetPrefixLength;

	/**
	 * This method returns the IPProtocolEndpoint.iPv6SubnetPrefixLength property value. This property is described as follows:
	 * 
	 * IPv6SubnetPrefixLength is used to identify the prefix length of the IPv6Address property that is used to specify a subnet
	 * 
	 * @return int current iPv6SubnetPrefixLength property value
	 * @exception Exception
	 */
	public int getIPv6SubnetPrefixLength() {

		return this.iPv6SubnetPrefixLength;
	} // getIPv6SubnetPrefixLength

	/**
	 * This method sets the IPProtocolEndpoint.iPv6SubnetPrefixLength property value. This property is described as follows:
	 * 
	 * IPv6SubnetPrefixLength is used to identify the prefix length of the IPv6Address property that is used to specify a subnet
	 * 
	 * @param int new iPv6SubnetPrefixLength property value
	 * @exception Exception
	 */
	public void setIPv6SubnetPrefixLength(int iPv6SubnetPrefixLength) {

		this.iPv6SubnetPrefixLength = iPv6SubnetPrefixLength;
	} // setIPv6SubnetPrefixLength

} // Class IPProtocolEndpoint
