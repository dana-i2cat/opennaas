/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.*;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class ConcreteComponent as well as methods comparable to the
 * invokeMethods defined for this class. This Class implements the ConcreteComponentBean Interface. The CIM class ConcreteComponent is described as
 * follows:
 * 
 * CIM_ConcreteComponent is a generic association used to establish 'part of' relationships between ManagedElements. It is defined as a concrete
 * subclass of the abstract CIM_Component class, to be used in place of many specific subclasses of Component that add no semantics, that is
 * subclasses that do not clarify the type of composition, update cardinalities, or add or remove qualifiers. Note that when you define additional
 * semantics for Component, this class must not be subclassed. Specific semantics continue to be defined as subclasses of the abstract CIM_Component.
 * ConcreteComponent is limited in its use as a concrete form of a general composition. It was deemed more prudent to create this concrete subclass
 * than to change Component from an abstract to a concrete class. Industry usage and impact could not be anticipated.
 */
public class ConcreteComponent extends Component implements Serializable {

	/**
	 * This constructor creates a ConcreteComponentBeanImpl Class which implements the ConcreteComponentBean Interface, and encapsulates the CIM class
	 * ConcreteComponent in a Java Bean. The CIM class ConcreteComponent is described as follows:
	 * 
	 * CIM_ConcreteComponent is a generic association used to establish 'part of' relationships between ManagedElements. It is defined as a concrete
	 * subclass of the abstract CIM_Component class, to be used in place of many specific subclasses of Component that add no semantics, that is
	 * subclasses that do not clarify the type of composition, update cardinalities, or add or remove qualifiers. Note that when you define additional
	 * semantics for Component, this class must not be subclassed. Specific semantics continue to be defined as subclasses of the abstract
	 * CIM_Component. ConcreteComponent is limited in its use as a concrete form of a general composition. It was deemed more prudent to create this
	 * concrete subclass than to change Component from an abstract to a concrete class. Industry usage and impact could not be anticipated.
	 */
	public ConcreteComponent() {
	};

	/**
	 * This method create an Association of the type ConcreteComponent between one ManagedElement object and ManagedElement object
	 */
	public static ConcreteComponent link(ManagedElement
			groupComponent, ManagedElement partComponent) {

		return (ConcreteComponent) Association.link(ConcreteComponent.class, groupComponent, partComponent);
	}// link

} // Class ConcreteComponent
