/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.*;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class SettingContext as well as methods comparable to the
 * invokeMethods defined for this class. This Class implements the SettingContextBean Interface. The CIM class SettingContext is described as follows:
 * 
 * Note: The Configuration class is being deprecated in lieu of using a ConcreteComponent relationship to indicate a hierarchy of instances of Setting
 * or SettingData. Therefore, the aggregation of Settings into Configurations is replaced by the ConcreteComponent relationship between instances of
 * Settings and SettingData. Deprecated description: This relationship associates Configuration objects with Setting objects. For example, Settings of
 * a NetworkAdapter could change based on the site or network to which its hosting ComputerSystem is attached. In this case, the ComputerSystem would
 * have two different Configuration objects, corresponding to the differences in network configuration for the two network segments. Configuration A
 * would aggregate a Setting object for the NetworkAdapter when operating on segment "ANet", whereas Configuration B would aggregate a different
 * NetworkAdapter Setting object, specific to segment "BNet". Note that many Settings of the computer are independent of the network Configuration.
 * For example, both Configurations A and B would aggregate the same Setting object for the MonitorResolution of the ComputerSystem.
 */
@Deprecated
public class SettingContext extends Association implements Serializable {

	/**
	 * This constructor creates a SettingContextBeanImpl Class which implements the SettingContextBean Interface, and encapsulates the CIM class
	 * SettingContext in a Java Bean. The CIM class SettingContext is described as follows:
	 * 
	 * Note: The Configuration class is being deprecated in lieu of using a ConcreteComponent relationship to indicate a hierarchy of instances of
	 * Setting or SettingData. Therefore, the aggregation of Settings into Configurations is replaced by the ConcreteComponent relationship between
	 * instances of Settings and SettingData. Deprecated description: This relationship associates Configuration objects with Setting objects. For
	 * example, Settings of a NetworkAdapter could change based on the site or network to which its hosting ComputerSystem is attached. In this case,
	 * the ComputerSystem would have two different Configuration objects, corresponding to the differences in network configuration for the two
	 * network segments. Configuration A would aggregate a Setting object for the NetworkAdapter when operating on segment "ANet", whereas
	 * Configuration B would aggregate a different NetworkAdapter Setting object, specific to segment "BNet". Note that many Settings of the computer
	 * are independent of the network Configuration. For example, both Configurations A and B would aggregate the same Setting object for the
	 * MonitorResolution of the ComputerSystem.
	 */
	public SettingContext() {
	};

	/**
	 * This method create an Association of the type SettingContext between one Configuration object and Setting object
	 */
	@Deprecated
	public static SettingContext link(Configuration context, Setting
			setting) {

		return (SettingContext) Association.link(SettingContext.class, context, setting);
	}// link

} // Class SettingContext
