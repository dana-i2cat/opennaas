/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class SwitchPortSourceRouting as well as methods comparable
 * to the invokeMethods defined for this class. This Class implements the SwitchPortSourceRoutingBean Interface. The CIM class SwitchPortSourceRouting
 * is described as follows:
 * 
 * A switch capable of source routing maintains source-routing specific information about each port. This association represents that information.
 */
public class SwitchPortSourceRouting extends ServiceSAPDependency implements
		Serializable {

	/**
	 * This constructor creates a SwitchPortSourceRoutingBeanImpl Class which implements the SwitchPortSourceRoutingBean Interface, and encapsulates
	 * the CIM class SwitchPortSourceRouting in a Java Bean. The CIM class SwitchPortSourceRouting is described as follows:
	 * 
	 * A switch capable of source routing maintains source-routing specific information about each port. This association represents that information.
	 */
	public SwitchPortSourceRouting() {
	};

	/**
	 * This method create an Association of the type SwitchPortSourceRouting between one SwitchPort object and SourceRoutingService object
	 */
	public static SwitchPortSourceRouting link(SwitchPort
			antecedent, SourceRoutingService dependent) {

		return (SwitchPortSourceRouting) Association.link(SwitchPortSourceRouting.class, antecedent, dependent);
	}// link

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property hopCount.
	 */
	private int	hopCount;

	/**
	 * This method returns the SwitchPortSourceRouting.hopCount property value. This property is described as follows:
	 * 
	 * The maximum number of routing descriptors allowed in an All Paths or Spanning Tree Explorer frames.
	 * 
	 * @return int current hopCount property value
	 * @exception Exception
	 */
	public int getHopCount() {

		return this.hopCount;
	} // getHopCount

	/**
	 * This method sets the SwitchPortSourceRouting.hopCount property value. This property is described as follows:
	 * 
	 * The maximum number of routing descriptors allowed in an All Paths or Spanning Tree Explorer frames.
	 * 
	 * @param int new hopCount property value
	 * @exception Exception
	 */
	public void setHopCount(int hopCount) {

		this.hopCount = hopCount;
	} // setHopCount

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property localSegment.
	 */
	private int	localSegment;

	/**
	 * This method returns the SwitchPortSourceRouting.localSegment property value. This property is described as follows:
	 * 
	 * The segment number that uniquely identifies the segment to which this port is connected. Current source routing protocols limit this value to
	 * the range: 0 through 4095. (The value 0 is used by some management applications for special test cases.) A value of 65535 signifies that no
	 * segment number is assigned to this port.
	 * 
	 * @return int current localSegment property value
	 * @exception Exception
	 */
	public int getLocalSegment() {

		return this.localSegment;
	} // getLocalSegment

	/**
	 * This method sets the SwitchPortSourceRouting.localSegment property value. This property is described as follows:
	 * 
	 * The segment number that uniquely identifies the segment to which this port is connected. Current source routing protocols limit this value to
	 * the range: 0 through 4095. (The value 0 is used by some management applications for special test cases.) A value of 65535 signifies that no
	 * segment number is assigned to this port.
	 * 
	 * @param int new localSegment property value
	 * @exception Exception
	 */
	public void setLocalSegment(int localSegment) {

		this.localSegment = localSegment;
	} // setLocalSegment

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property bridgeNum.
	 */
	private int	bridgeNum;

	/**
	 * This method returns the SwitchPortSourceRouting.bridgeNum property value. This property is described as follows:
	 * 
	 * A bridge number uniquely identifies a bridge when more than one bridge is used to span the same two segments. Current source routing protocols
	 * limit this value to the range: 0 through 15. A value of 65535 signifies that no bridge number is assigned to this bridge.
	 * 
	 * @return int current bridgeNum property value
	 * @exception Exception
	 */
	public int getBridgeNum() {

		return this.bridgeNum;
	} // getBridgeNum

	/**
	 * This method sets the SwitchPortSourceRouting.bridgeNum property value. This property is described as follows:
	 * 
	 * A bridge number uniquely identifies a bridge when more than one bridge is used to span the same two segments. Current source routing protocols
	 * limit this value to the range: 0 through 15. A value of 65535 signifies that no bridge number is assigned to this bridge.
	 * 
	 * @param int new bridgeNum property value
	 * @exception Exception
	 */
	public void setBridgeNum(int bridgeNum) {

		this.bridgeNum = bridgeNum;
	} // setBridgeNum

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property targetSegment.
	 */
	private int	targetSegment;

	/**
	 * This method returns the SwitchPortSourceRouting.targetSegment property value. This property is described as follows:
	 * 
	 * The segment number that corresponds to the target segment to which this port is considered connected. Current source routing protocols limit
	 * this value to the range: 0 through 4095. (The value 0 is used by some management applications for special test cases.) A value of 65535
	 * signifies that no target segment is assigned to this port.
	 * 
	 * @return int current targetSegment property value
	 * @exception Exception
	 */
	public int getTargetSegment() {

		return this.targetSegment;
	} // getTargetSegment

	/**
	 * This method sets the SwitchPortSourceRouting.targetSegment property value. This property is described as follows:
	 * 
	 * The segment number that corresponds to the target segment to which this port is considered connected. Current source routing protocols limit
	 * this value to the range: 0 through 4095. (The value 0 is used by some management applications for special test cases.) A value of 65535
	 * signifies that no target segment is assigned to this port.
	 * 
	 * @param int new targetSegment property value
	 * @exception Exception
	 */
	public void setTargetSegment(int targetSegment) {

		this.targetSegment = targetSegment;
	} // setTargetSegment

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property STESpanMode.
	 */

	public enum STESpanMode {
		AUTO_SPAN,
		DISABLED,
		FORCED
	}

	private STESpanMode	sTESpanMode;

	/**
	 * This method returns the SwitchPortSourceRouting.sTESpanMode property value. This property is described as follows:
	 * 
	 * Determines how the port behaves when presented with a Spanning Tree Explorer frame. The value 'disabled(2)' indicates that the port will not
	 * accept or send Spanning Tree Explorer packets; any STE packets received will be silently discarded. The value 'forced(3)' indicates the port
	 * will always accept and propagate Spanning Tree Explorer frames. (This allows a manually configured Spanning Tree for this class of packet to be
	 * configured.) Note that unlike transparent bridging, it is not catastrophic to the network if there are loops. The value 'auto-span(1)' can only
	 * be returned by a bridge that both implements the Spanning Tree Protocol and has use of the protocol enabled on this port. The behavior of the
	 * port for Spanning Tree Explorer frames is determined by the value of the State property of the SwitchPortSpanningTree association for the port.
	 * If the port is in the 'forwarding' state, the frame will be accepted or propagated. Otherwise, it will be silently discarded.
	 * 
	 * @return int current sTESpanMode property value
	 * @exception Exception
	 */
	public STESpanMode getSTESpanMode() {

		return this.sTESpanMode;
	} // getSTESpanMode

	/**
	 * This method sets the SwitchPortSourceRouting.sTESpanMode property value. This property is described as follows:
	 * 
	 * Determines how the port behaves when presented with a Spanning Tree Explorer frame. The value 'disabled(2)' indicates that the port will not
	 * accept or send Spanning Tree Explorer packets; any STE packets received will be silently discarded. The value 'forced(3)' indicates the port
	 * will always accept and propagate Spanning Tree Explorer frames. (This allows a manually configured Spanning Tree for this class of packet to be
	 * configured.) Note that unlike transparent bridging, it is not catastrophic to the network if there are loops. The value 'auto-span(1)' can only
	 * be returned by a bridge that both implements the Spanning Tree Protocol and has use of the protocol enabled on this port. The behavior of the
	 * port for Spanning Tree Explorer frames is determined by the value of the State property of the SwitchPortSpanningTree association for the port.
	 * If the port is in the 'forwarding' state, the frame will be accepted or propagated. Otherwise, it will be silently discarded.
	 * 
	 * @param int new sTESpanMode property value
	 * @exception Exception
	 */
	public void setSTESpanMode(STESpanMode sTESpanMode) {

		this.sTESpanMode = sTESpanMode;
	} // setSTESpanMode

} // Class SwitchPortSourceRouting
