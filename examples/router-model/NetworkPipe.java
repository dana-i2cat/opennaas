/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class NetworkPipe as well as methods comparable to the
 * invokeMethods defined for this class. This Class implements the NetworkPipeBean Interface. The CIM class NetworkPipe is described as follows:
 * 
 * NetworkPipe is a subclass of EnabledLogicalElement, representing the state and management of a connection or trail between endpoints. This object
 * is different than the association between the endpoints (CIM_ActiveConnection) since the emphasis is NOT on the endpoints but on the management of
 * the pipe itself - its state, configuration, etc. NetworkPipes are defined in the context of a CIM_Network and represent the 'transfer of
 * information . . . between . . . endpoints'. These concepts are aligned with the definition of the Pipe object in ITU's M.3100 specification.
 */
public class NetworkPipe extends EnabledLogicalElement implements Serializable
{

	/**
	 * This constructor creates a NetworkPipeBeanImpl Class which implements the NetworkPipeBean Interface, and encapsulates the CIM class NetworkPipe
	 * in a Java Bean. The CIM class NetworkPipe is described as follows:
	 * 
	 * NetworkPipe is a subclass of EnabledLogicalElement, representing the state and management of a connection or trail between endpoints. This
	 * object is different than the association between the endpoints (CIM_ActiveConnection) since the emphasis is NOT on the endpoints but on the
	 * management of the pipe itself - its state, configuration, etc. NetworkPipes are defined in the context of a CIM_Network and represent the
	 * 'transfer of information . . . between . . . endpoints'. These concepts are aligned with the definition of the Pipe object in ITU's M.3100
	 * specification.
	 */
	public NetworkPipe() {
	};

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property instanceID.
	 */
	private String	instanceID;

	/**
	 * This method returns the NetworkPipe.instanceID property value. This property is described as follows:
	 * 
	 * Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. In order to ensure
	 * uniqueness within the NameSpace, the value of InstanceID SHOULD be constructed using the following 'preferred' algorithm: <OrgID>:<LocalID>
	 * Where <OrgID> and <LocalID> are separated by a colon ':', and where <OrgID> MUST include a copyrighted, trademarked or otherwise unique name
	 * that is owned by the business entity creating/defining the InstanceID, or is a registered ID that is assigned to the business entity by a
	 * recognized global authority. (This is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure
	 * uniqueness <OrgID> MUST NOT contain a colon (':'). When using this algorithm, the first colon to appear in InstanceID MUST appear between
	 * <OrgID> and <LocalID>. (For DMTF defined instances, the 'preferred' algorithm MUST be used with the <OrgID> set to 'CIM'.) <LocalID> MUST
	 * include either a vendor specified unique identifier, or if mapping from an ITU M.3100 environment, the trailID, connectionID or
	 * subNetworkConnectionID of the instances of PipeR2.
	 * 
	 * @return String current instanceID property value
	 * @exception Exception
	 */
	@Override
	public String getInstanceID() {

		return this.instanceID;
	} // getInstanceID

	/**
	 * This method sets the NetworkPipe.instanceID property value. This property is described as follows:
	 * 
	 * Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. In order to ensure
	 * uniqueness within the NameSpace, the value of InstanceID SHOULD be constructed using the following 'preferred' algorithm: <OrgID>:<LocalID>
	 * Where <OrgID> and <LocalID> are separated by a colon ':', and where <OrgID> MUST include a copyrighted, trademarked or otherwise unique name
	 * that is owned by the business entity creating/defining the InstanceID, or is a registered ID that is assigned to the business entity by a
	 * recognized global authority. (This is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure
	 * uniqueness <OrgID> MUST NOT contain a colon (':'). When using this algorithm, the first colon to appear in InstanceID MUST appear between
	 * <OrgID> and <LocalID>. (For DMTF defined instances, the 'preferred' algorithm MUST be used with the <OrgID> set to 'CIM'.) <LocalID> MUST
	 * include either a vendor specified unique identifier, or if mapping from an ITU M.3100 environment, the trailID, connectionID or
	 * subNetworkConnectionID of the instances of PipeR2.
	 * 
	 * @param String
	 *            new instanceID property value
	 * @exception Exception
	 */
	@Override
	public void setInstanceID(String instanceID) {

		this.instanceID = instanceID;
	} // setInstanceID

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property Directionality.
	 */

	public enum Directionality {
		UNKNOWN,
		BI_DIRECTIONAL,
		UNIDIRECTIONAL
	}

	private Directionality	directionality;

	/**
	 * This method returns the NetworkPipe.directionality property value. This property is described as follows:
	 * 
	 * Indicates whether the pipe is bi-directional (value = 2), unidirectional (value = 3), or this information is not known (value = 0). For
	 * unidirectional pipes, the source and sink are indicated by a property (SourceOrSink) of the association, EndpointOfNetworkPipe.
	 * 
	 * @return int current directionality property value
	 * @exception Exception
	 */
	public Directionality getDirectionality() {

		return this.directionality;
	} // getDirectionality

	/**
	 * This method sets the NetworkPipe.directionality property value. This property is described as follows:
	 * 
	 * Indicates whether the pipe is bi-directional (value = 2), unidirectional (value = 3), or this information is not known (value = 0). For
	 * unidirectional pipes, the source and sink are indicated by a property (SourceOrSink) of the association, EndpointOfNetworkPipe.
	 * 
	 * @param int new directionality property value
	 * @exception Exception
	 */
	public void setDirectionality(Directionality directionality) {

		this.directionality = directionality;
	} // setDirectionality

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property AggregationBehavior.
	 */

	public enum AggregationBehavior {
		UNKNOWN,
		NO_LOWER_LEVEL_COMPOSITION,
		COMBINED_IN_PARALLEL,
		COMBINED_IN_SEQUENCE
	}

	private AggregationBehavior	aggregationBehavior;

	/**
	 * This method returns the NetworkPipe.aggregationBehavior property value. This property is described as follows:
	 * 
	 * Indicates whether the pipe is composed of lower-level pipes, and if so, how these lower-level pipes are aggregated (in parallel or in
	 * sequence). The specific instances of NetworkPipe that are combined are described using the NetworkPipeComposition association. In the context
	 * of M.3100, the ability to be composed of lower-level pipes is modeled as a Trail. A Trail is made up of one or more Connections. (Note that
	 * both Trails and Connections are subclasses of Pipe). Because of the flexibility of the NetworkPipeComposition association, there is no need to
	 * subclass NetworkPipe, as was done in M.3100, but merely to instantiate the NetworkPipeComposition association to describe the bundling of the
	 * lower-level pipes (i.e., the connections), or the sequencing of them.
	 * 
	 * @return int current aggregationBehavior property value
	 * @exception Exception
	 */
	public AggregationBehavior getAggregationBehavior() {

		return this.aggregationBehavior;
	} // getAggregationBehavior

	/**
	 * This method sets the NetworkPipe.aggregationBehavior property value. This property is described as follows:
	 * 
	 * Indicates whether the pipe is composed of lower-level pipes, and if so, how these lower-level pipes are aggregated (in parallel or in
	 * sequence). The specific instances of NetworkPipe that are combined are described using the NetworkPipeComposition association. In the context
	 * of M.3100, the ability to be composed of lower-level pipes is modeled as a Trail. A Trail is made up of one or more Connections. (Note that
	 * both Trails and Connections are subclasses of Pipe). Because of the flexibility of the NetworkPipeComposition association, there is no need to
	 * subclass NetworkPipe, as was done in M.3100, but merely to instantiate the NetworkPipeComposition association to describe the bundling of the
	 * lower-level pipes (i.e., the connections), or the sequencing of them.
	 * 
	 * @param int new aggregationBehavior property value
	 * @exception Exception
	 */
	public void setAggregationBehavior(AggregationBehavior
			aggregationBehavior) {

		this.aggregationBehavior = aggregationBehavior;
	} // setAggregationBehavior

} // Class NetworkPipe
