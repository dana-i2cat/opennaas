/**
 * This file was auto-generated by mofcomp -j version 1.0.0 on Wed Jan 12
 * 09:21:06 CET 2011.
 */

package org.opennaas.extensions.router.model;

import java.io.*;
import java.lang.Exception;

/**
 * This Class contains accessor and mutator methods for all properties defined in the CIM class DNSProtocolEndpoint as well as methods comparable to
 * the invokeMethods defined for this class. This Class implements the DNSProtocolEndpointBean Interface. The CIM class DNSProtocolEndpoint is
 * described as follows:
 * 
 * A class derived from CIM_ProtocolEndpoint which represents the DNS client and DNS configuration for a single IP endpoint. The DNS server addresses
 * can be determined by querying the AccessInfo property of associated CIM_RemoteServiceAccessPoint instances which have an AccessContext of
 * "DNS Server". The order in which the DNS servers will be queried can be determined by the relative values of the OrderOfAccess property on each
 * CIM_RemoteAccessAvailableToElement association which associated the CIM_RemoteServiceAccessPoint with the CIM_DNSProtocolEndpoint.
 */
public class DNSProtocolEndpoint extends ProtocolEndpoint implements
		Serializable {

	/**
	 * This constructor creates a DNSProtocolEndpointBeanImpl Class which implements the DNSProtocolEndpointBean Interface, and encapsulates the CIM
	 * class DNSProtocolEndpoint in a Java Bean. The CIM class DNSProtocolEndpoint is described as follows:
	 * 
	 * A class derived from CIM_ProtocolEndpoint which represents the DNS client and DNS configuration for a single IP endpoint. The DNS server
	 * addresses can be determined by querying the AccessInfo property of associated CIM_RemoteServiceAccessPoint instances which have an
	 * AccessContext of "DNS Server". The order in which the DNS servers will be queried can be determined by the relative values of the OrderOfAccess
	 * property on each CIM_RemoteAccessAvailableToElement association which associated the CIM_RemoteServiceAccessPoint with the
	 * CIM_DNSProtocolEndpoint.
	 */
	public DNSProtocolEndpoint() {
	};

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property hostname.
	 */
	private String	hostname;

	/**
	 * This method returns the DNSProtocolEndpoint.hostname property value. This property is described as follows:
	 * 
	 * The Hostname actually in use for this client connection.
	 * 
	 * @return String current hostname property value
	 * @exception Exception
	 */
	public String getHostname() {

		return this.hostname;
	} // getHostname

	/**
	 * This method sets the DNSProtocolEndpoint.hostname property value. This property is described as follows:
	 * 
	 * The Hostname actually in use for this client connection.
	 * 
	 * @param String
	 *            new hostname property value
	 * @exception Exception
	 */
	public void setHostname(String hostname) {

		this.hostname = hostname;
	} // setHostname

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property DHCPOptionsToUse.
	 */

	public enum DHCPOptionsToUse {
		DOMAIN_NAME_SERVER,
		HOST_NAME,
		DOMAIN_NAME,
		DMTF_RESERVED,
		VENDOR_RESERVED
	}

	private DHCPOptionsToUse	dHCPOptionsToUse;

	/**
	 * This method returns the DNSProtocolEndpoint.dHCPOptionsToUse property value. This property is described as follows:
	 * 
	 * One or more DHCP options that the DNS client is utilizing if they were returned during a DHCP bind operation.
	 * 
	 * @return int current dHCPOptionsToUse property value
	 * @exception Exception
	 */
	public DHCPOptionsToUse getDHCPOptionsToUse() {

		return this.dHCPOptionsToUse;
	} // getDHCPOptionsToUse

	/**
	 * This method sets the DNSProtocolEndpoint.dHCPOptionsToUse property value. This property is described as follows:
	 * 
	 * One or more DHCP options that the DNS client is utilizing if they were returned during a DHCP bind operation.
	 * 
	 * @param int new dHCPOptionsToUse property value
	 * @exception Exception
	 */
	public void setDHCPOptionsToUse(DHCPOptionsToUse dHCPOptionsToUse) {

		this.dHCPOptionsToUse = dHCPOptionsToUse;
	} // setDHCPOptionsToUse

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property appendParentSuffixes.
	 */
	private boolean	appendParentSuffixes;

	/**
	 * This method returns the DNSProtocolEndpoint.appendParentSuffixes property value. This property is described as follows:
	 * 
	 * Whether or not the client appends the parent domain suffix to target names prior to attempting to resolve.
	 * 
	 * @return boolean current appendParentSuffixes property value
	 * @exception Exception
	 */
	public boolean isAppendParentSuffixes() {

		return this.appendParentSuffixes;
	} // getAppendParentSuffixes

	/**
	 * This method sets the DNSProtocolEndpoint.appendParentSuffixes property value. This property is described as follows:
	 * 
	 * Whether or not the client appends the parent domain suffix to target names prior to attempting to resolve.
	 * 
	 * @param boolean new appendParentSuffixes property value
	 * @exception Exception
	 */
	public void setAppendParentSuffixes(boolean appendParentSuffixes) {

		this.appendParentSuffixes = appendParentSuffixes;
	} // setAppendParentSuffixes

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property appendPrimarySuffixes.
	 */
	private boolean	appendPrimarySuffixes;

	/**
	 * This method returns the DNSProtocolEndpoint.appendPrimarySuffixes property value. This property is described as follows:
	 * 
	 * Whether or not the client appends the primary domain suffix to target names prior to attempting to resolve.
	 * 
	 * @return boolean current appendPrimarySuffixes property value
	 * @exception Exception
	 */
	public boolean isAppendPrimarySuffixes() {

		return this.appendPrimarySuffixes;
	} // getAppendPrimarySuffixes

	/**
	 * This method sets the DNSProtocolEndpoint.appendPrimarySuffixes property value. This property is described as follows:
	 * 
	 * Whether or not the client appends the primary domain suffix to target names prior to attempting to resolve.
	 * 
	 * @param boolean new appendPrimarySuffixes property value
	 * @exception Exception
	 */
	public void setAppendPrimarySuffixes(boolean appendPrimarySuffixes) {

		this.appendPrimarySuffixes = appendPrimarySuffixes;
	} // setAppendPrimarySuffixes

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property dNSSuffixesToAppend.
	 */
	private String[]	dNSSuffixesToAppend;

	/**
	 * This method returns the DNSProtocolEndpoint.dNSSuffixesToAppend property value. This property is described as follows:
	 * 
	 * The DNS suffixes to append when attempting to resolve a hostname.
	 * 
	 * @return String[] current dNSSuffixesToAppend property value
	 * @exception Exception
	 */
	public String[] getDNSSuffixesToAppend() {

		return this.dNSSuffixesToAppend;
	} // getDNSSuffixesToAppend

	/**
	 * This method sets the DNSProtocolEndpoint.dNSSuffixesToAppend property value. This property is described as follows:
	 * 
	 * The DNS suffixes to append when attempting to resolve a hostname.
	 * 
	 * @param String
	 *            [] new dNSSuffixesToAppend property value
	 * @exception Exception
	 */
	public void setDNSSuffixesToAppend(String[] dNSSuffixesToAppend) {

		this.dNSSuffixesToAppend = dNSSuffixesToAppend;
	} // setDNSSuffixesToAppend

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property domainName.
	 */
	private String	domainName;

	/**
	 * This method returns the DNSProtocolEndpoint.domainName property value. This property is described as follows:
	 * 
	 * The domain to use for this client connection.
	 * 
	 * @return String current domainName property value
	 * @exception Exception
	 */
	public String getDomainName() {

		return this.domainName;
	} // getDomainName

	/**
	 * This method sets the DNSProtocolEndpoint.domainName property value. This property is described as follows:
	 * 
	 * The domain to use for this client connection.
	 * 
	 * @param String
	 *            new domainName property value
	 * @exception Exception
	 */
	public void setDomainName(String domainName) {

		this.domainName = domainName;
	} // setDomainName

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property registerThisConnectionsAddress.
	 */
	private boolean	registerThisConnectionsAddress;

	/**
	 * This method returns the DNSProtocolEndpoint.registerThisConnectionsAddress property value. This property is described as follows:
	 * 
	 * Whether or not the client attempted to register this connection's address in DNS.
	 * 
	 * @return boolean current registerThisConnectionsAddress property value
	 * @exception Exception
	 */
	public boolean isRegisterThisConnectionsAddress() {

		return this.registerThisConnectionsAddress;
	} // getRegisterThisConnectionsAddress

	/**
	 * This method sets the DNSProtocolEndpoint.registerThisConnectionsAddress property value. This property is described as follows:
	 * 
	 * Whether or not the client attempted to register this connection's address in DNS.
	 * 
	 * @param boolean new registerThisConnectionsAddress property value
	 * @exception Exception
	 */
	public void setRegisterThisConnectionsAddress(boolean
			registerThisConnectionsAddress) {

		this.registerThisConnectionsAddress = registerThisConnectionsAddress;
	} // setRegisterThisConnectionsAddress

	/**
	 * The following constants are defined for use with the ValueMap/Values qualified property useSuffixWhenRegistering.
	 */
	private boolean	useSuffixWhenRegistering;

	/**
	 * This method returns the DNSProtocolEndpoint.useSuffixWhenRegistering property value. This property is described as follows:
	 * 
	 * Whether or not the suffix is appended before registering the client name with the DNS server.
	 * 
	 * @return boolean current useSuffixWhenRegistering property value
	 * @exception Exception
	 */
	public boolean isUseSuffixWhenRegistering() {

		return this.useSuffixWhenRegistering;
	} // getUseSuffixWhenRegistering

	/**
	 * This method sets the DNSProtocolEndpoint.useSuffixWhenRegistering property value. This property is described as follows:
	 * 
	 * Whether or not the suffix is appended before registering the client name with the DNS server.
	 * 
	 * @param boolean new useSuffixWhenRegistering property value
	 * @exception Exception
	 */
	public void setUseSuffixWhenRegistering(boolean useSuffixWhenRegistering)
	{

		this.useSuffixWhenRegistering = useSuffixWhenRegistering;
	} // setUseSuffixWhenRegistering

} // Class DNSProtocolEndpoint
